; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30038.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	printf
PUBLIC	?quick_sort@@YAXXZ				; quick_sort
PUBLIC	?swap@@YAXPEAH0@Z				; swap
PUBLIC	?partition@@YAHQEAHHH@Z				; partition
PUBLIC	?quickSort@@YAXQEAHHH@Z				; quickSort
PUBLIC	?printArray@@YAXQEAHH@Z				; printArray
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0Cmathlibrary@@QEAA@XZ			; Cmathlibrary::Cmathlibrary
PUBLIC	??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z		; Cmathlibrary::operator=
PUBLIC	??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z		; Cmathlibrary::operator=
PUBLIC	?function_in_main@@YAXXZ			; function_in_main
PUBLIC	main
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_0BA@DOEKPICM@Sorted?5array?3?5?6@		; `string'
PUBLIC	??_C@_0O@IAJJIKF@crash_in_main@			; `string'
PUBLIC	??_C@_0P@FMFLLGHF@crash_in_main?6@		; `string'
PUBLIC	??_C@_0BG@GDOENEFP@crash_in_static_lib_a@	; `string'
PUBLIC	??_C@_0BH@BFIEADL@crash_in_static_lib_a?6@	; `string'
PUBLIC	??_C@_0BG@EIMJIHJM@crash_in_static_lib_b@	; `string'
PUBLIC	??_C@_0BH@DBOPOGC@crash_in_static_lib_b?6@	; `string'
PUBLIC	??_C@_0BH@LCLCGICA@crash_in_dynamic_lib_a@	; `string'
PUBLIC	??_C@_0BI@MBDDHKCK@crash_in_dynamic_lib_a?6@	; `string'
PUBLIC	??_C@_0BH@JJJPDLOD@crash_in_dynamic_lib_b@	; `string'
PUBLIC	??_C@_0BI@MDHFMEHD@crash_in_dynamic_lib_b?6@	; `string'
PUBLIC	??_C@_0BL@NCMICPBB@Wrong?5command?5line?5option?6@ ; `string'
PUBLIC	__xmm@0000000900000008000000070000000a
EXTRN	__std_terminate:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	?search@pattern_searcher_t@@QEAAHXZ:PROC	; pattern_searcher_t::search
EXTRN	?calc_mininum_spaning@@YAXXZ:PROC		; calc_mininum_spaning
EXTRN	?calc_convex_hull@Cmathlibrary@@QEAAHXZ:PROC	; Cmathlibrary::calc_convex_hull
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memset:PROC
EXTRN	strcmp:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?quick_sort@@YAXXZ DD imagerel $LN32
	DD	imagerel $LN32+293
	DD	imagerel $unwind$?quick_sort@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?partition@@YAHQEAHHH@Z DD imagerel $LN18
	DD	imagerel $LN18+41
	DD	imagerel $unwind$?partition@@YAHQEAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?partition@@YAHQEAHHH@Z DD imagerel $LN18+41
	DD	imagerel $LN18+97
	DD	imagerel $chain$0$?partition@@YAHQEAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?partition@@YAHQEAHHH@Z DD imagerel $LN18+97
	DD	imagerel $LN18+128
	DD	imagerel $chain$1$?partition@@YAHQEAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?quickSort@@YAXQEAHHH@Z DD imagerel $LN26
	DD	imagerel $LN26+26
	DD	imagerel $unwind$?quickSort@@YAXQEAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?quickSort@@YAXQEAHHH@Z DD imagerel $LN26+26
	DD	imagerel $LN26+204
	DD	imagerel $chain$4$?quickSort@@YAXQEAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?quickSort@@YAXQEAHHH@Z DD imagerel $LN26+204
	DD	imagerel $LN26+212
	DD	imagerel $chain$5$?quickSort@@YAXQEAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?printArray@@YAXQEAHH@Z DD imagerel $LN11
	DD	imagerel $LN11+20
	DD	imagerel $unwind$?printArray@@YAXQEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?printArray@@YAXQEAHH@Z DD imagerel $LN11+20
	DD	imagerel $LN11+76
	DD	imagerel $chain$0$?printArray@@YAXQEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?printArray@@YAXQEAHH@Z DD imagerel $LN11+76
	DD	imagerel $LN11+107
	DD	imagerel $chain$1$?printArray@@YAXQEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN99
	DD	imagerel $LN99+457
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+59
	DD	imagerel $unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0pattern_searcher_t@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$??0pattern_searcher_t@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?function_in_main@@YAXXZ DD imagerel $LN8
	DD	imagerel $LN8+11
	DD	imagerel $unwind$?function_in_main@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN52
	DD	imagerel $LN52+115
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$main DD imagerel $LN52+115
	DD	imagerel $LN52+352
	DD	imagerel $chain$0$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$main DD imagerel $LN52+352
	DD	imagerel $LN52+636
	DD	imagerel $chain$1$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN8
	DD	imagerel $LN8+44
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+36
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN24
	DD	imagerel $LN24+122
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+61
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT __xmm@0000000900000008000000070000000a
CONST	SEGMENT
__xmm@0000000900000008000000070000000a DB 0aH, 00H, 00H, 00H, 07H, 00H, 00H
	DB	00H, 08H, 00H, 00H, 00H, 09H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT ??_C@_0BL@NCMICPBB@Wrong?5command?5line?5option?6@
CONST	SEGMENT
??_C@_0BL@NCMICPBB@Wrong?5command?5line?5option?6@ DB 'Wrong command line'
	DB	' option', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MDHFMEHD@crash_in_dynamic_lib_b?6@
CONST	SEGMENT
??_C@_0BI@MDHFMEHD@crash_in_dynamic_lib_b?6@ DB 'crash_in_dynamic_lib_b', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JJJPDLOD@crash_in_dynamic_lib_b@
CONST	SEGMENT
??_C@_0BH@JJJPDLOD@crash_in_dynamic_lib_b@ DB 'crash_in_dynamic_lib_b', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MBDDHKCK@crash_in_dynamic_lib_a?6@
CONST	SEGMENT
??_C@_0BI@MBDDHKCK@crash_in_dynamic_lib_a?6@ DB 'crash_in_dynamic_lib_a', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCLCGICA@crash_in_dynamic_lib_a@
CONST	SEGMENT
??_C@_0BH@LCLCGICA@crash_in_dynamic_lib_a@ DB 'crash_in_dynamic_lib_a', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DBOPOGC@crash_in_static_lib_b?6@
CONST	SEGMENT
??_C@_0BH@DBOPOGC@crash_in_static_lib_b?6@ DB 'crash_in_static_lib_b', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EIMJIHJM@crash_in_static_lib_b@
CONST	SEGMENT
??_C@_0BG@EIMJIHJM@crash_in_static_lib_b@ DB 'crash_in_static_lib_b', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BFIEADL@crash_in_static_lib_a?6@
CONST	SEGMENT
??_C@_0BH@BFIEADL@crash_in_static_lib_a?6@ DB 'crash_in_static_lib_a', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDOENEFP@crash_in_static_lib_a@
CONST	SEGMENT
??_C@_0BG@GDOENEFP@crash_in_static_lib_a@ DB 'crash_in_static_lib_a', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FMFLLGHF@crash_in_main?6@
CONST	SEGMENT
??_C@_0P@FMFLLGHF@crash_in_main?6@ DB 'crash_in_main', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IAJJIKF@crash_in_main@
CONST	SEGMENT
??_C@_0O@IAJJIKF@crash_in_main@ DB 'crash_in_main', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DOEKPICM@Sorted?5array?3?5?6@
CONST	SEGMENT
??_C@_0BA@DOEKPICM@Sorted?5array?3?5?6@ DB 'Sorted array: ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 04H
	DB	'*'
	DB	00H
	DB	'<'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel __std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 068H
	DD	imagerel $stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 04H
	DB	'X'
	DB	00H
	DB	'H'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0cH
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 040f11H
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	'6'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010419H
	DD	04204H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$main DD 021H
	DD	imagerel $LN52
	DD	imagerel $LN52+115
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$main DD 030821H
	DD	052507508H
	DD	0fH
	DD	imagerel $LN52
	DD	imagerel $LN52+115
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	042119H
	DD	05240110fH
	DD	03002000fH
	DD	imagerel __GSHandlerCheck
	DD	0f5238H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?function_in_main@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0pattern_searcher_t@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0eH
	DB	0e2H
	DB	00H
	DB	'T'
	DB	02H
	DB	0b6H
	DB	06H
	DB	0d8H
	DB	04H
	DB	'L'
	DB	0aH
	DB	'&'
	DB	0cH
	DB	'2'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	011H
	DB	080H
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	091H, 05H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	04H
	DB	04H
	DB	06H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0cH
	DB	0aH
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	040H
	DB	03aH
	DD	imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	040H
	DB	030H
	DB	038H
	DB	07eH
	DD	imagerel __std_terminate
	DB	02eH
	DD	imagerel __std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 081619H
	DD	0d3416H
	DD	0f0125216H
	DD	0c00ee010H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?printArray@@YAXQEAHH@Z DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+20
	DD	imagerel $unwind$?printArray@@YAXQEAHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?printArray@@YAXQEAHH@Z DD 020521H
	DD	063405H
	DD	imagerel $LN11
	DD	imagerel $LN11+20
	DD	imagerel $unwind$?printArray@@YAXQEAHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?printArray@@YAXQEAHH@Z DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?quickSort@@YAXQEAHHH@Z DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+26
	DD	imagerel $unwind$?quickSort@@YAXQEAHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?quickSort@@YAXQEAHHH@Z DD 0a2321H
	DD	04e423H
	DD	0bc41bH
	DD	0a6416H
	DD	09540eH
	DD	083405H
	DD	imagerel $LN26
	DD	imagerel $LN26+26
	DD	imagerel $unwind$?quickSort@@YAXQEAHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?quickSort@@YAXQEAHHH@Z DD 030801H
	DD	0f0044208H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?partition@@YAHQEAHHH@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+41
	DD	imagerel $unwind$?partition@@YAHQEAHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?partition@@YAHQEAHHH@Z DD 020521H
	DD	026405H
	DD	imagerel $LN18
	DD	imagerel $LN18+41
	DD	imagerel $unwind$?partition@@YAHQEAHHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?partition@@YAHQEAHHH@Z DD 030601H
	DD	033406H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?quick_sort@@YAXXZ DD 041919H
	DD	0a340aH
	DD	07006720aH
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00009	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0000e	84 c0		 test	 al, al
  00010	75 0a		 jne	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  00012	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0001b	90		 npad	 1
$LN2@sentry:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001c	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0001f	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00022	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios

; 80   :         return _Mystrbuf;

  00026	48 8b 4c 11 48	 mov	 rcx, QWORD PTR [rcx+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 80   :             if (_Rdbuf) {

  0002b	48 85 c9	 test	 rcx, rcx
  0002e	74 07		 je	 SHORT $LN10@sentry

; 81   :                 _Rdbuf->_Unlock();

  00030	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00033	ff 50 10	 call	 QWORD PTR [rax+16]
  00036	90		 npad	 1
$LN10@sentry:

; 120  :             }
; 121  :         }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00004	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00007	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0000a	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios

; 80   :         return _Mystrbuf;

  0000e	48 8b 4c 11 48	 mov	 rcx, QWORD PTR [rcx+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 80   :             if (_Rdbuf) {

  00013	48 85 c9	 test	 rcx, rcx
  00016	74 07		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00018	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0001b	ff 50 10	 call	 QWORD PTR [rax+16]
  0001e	90		 npad	 1
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
;	COMDAT main
_TEXT	SEGMENT
math_library$1 = 32
pattern_searcher$2 = 48
arr$3 = 1004064
__$ArrayPad$ = 1004088
argc$ = 1004112
argv$ = 1004120
main	PROC						; COMDAT

; 35   : {

$LN52:
  00000	40 53		 push	 rbx
  00002	b8 40 52 0f 00	 mov	 eax, 1004096		; 000f5240H
  00007	e8 00 00 00 00	 call	 __chkstk
  0000c	48 2b e0	 sub	 rsp, rax
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 84 24 38
	52 0f 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 36   :   if ((argc > 1) && ((*argv[1] == '-' || (*argv[1] == '/'))))

  00021	83 f9 01	 cmp	 ecx, 1
  00024	0f 8e 25 02 00
	00		 jle	 $LN13@main
  0002a	48 8b 5a 08	 mov	 rbx, QWORD PTR [rdx+8]
  0002e	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00031	2c 2d		 sub	 al, 45			; 0000002dH
  00033	a8 fd		 test	 al, 253			; 000000fdH
  00035	0f 85 14 02 00
	00		 jne	 $LN13@main

; 37   :   {
; 38   :     int svc_ret = 1;
; 39   :     if (strcmp("crash_in_main", argv[1] + 1) == 0)

  0003b	48 ff c3	 inc	 rbx
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IAJJIKF@crash_in_main@
  00045	48 8b d3	 mov	 rdx, rbx
  00048	e8 00 00 00 00	 call	 strcmp
  0004d	85 c0		 test	 eax, eax
  0004f	0f 84 15 02 00
	00		 je	 $LN50@main

; 43   :     }
; 44   :     else if (strcmp("crash_in_static_lib_a", argv[1] + 1) == 0)

  00055	48 8b d3	 mov	 rdx, rbx
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@GDOENEFP@crash_in_static_lib_a@
  0005f	e8 00 00 00 00	 call	 strcmp
  00064	85 c0		 test	 eax, eax
  00066	0f 85 39 01 00
	00		 jne	 $LN6@main

; 46   :       printf("crash_in_static_lib_a\n");

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@BFIEADL@crash_in_static_lib_a?6@
  00073	48 89 bc 24 50
	52 0f 00	 mov	 QWORD PTR [rsp+1004112], rdi
  0007b	e8 00 00 00 00	 call	 printf
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp

; 62   :   int arr[] = { 10, 7, 8, 9, 1, 5 };

  00080	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@0000000900000008000000070000000a
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp

; 46   :       printf("crash_in_static_lib_a\n");

  00088	48 8d 94 24 20
	52 0f 00	 lea	 rdx, QWORD PTR arr$3[rsp]
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp

; 17   :   int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

  00090	33 db		 xor	 ebx, ebx

; 62   :   int arr[] = { 10, 7, 8, 9, 1, 5 };

  00092	c7 84 24 30 52
	0f 00 01 00 00
	00		 mov	 DWORD PTR arr$3[rsp+16], 1
  0009d	f3 0f 7f 84 24
	20 52 0f 00	 movdqu	 XMMWORD PTR arr$3[rsp], xmm0
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp

; 46   :       printf("crash_in_static_lib_a\n");

  000a6	48 83 ea 04	 sub	 rdx, 4
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp

; 62   :   int arr[] = { 10, 7, 8, 9, 1, 5 };

  000aa	c7 84 24 34 52
	0f 00 05 00 00
	00		 mov	 DWORD PTR arr$3[rsp+20], 5

; 17   :   int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

  000b5	bf ff ff ff ff	 mov	 edi, -1
  000ba	8b cb		 mov	 ecx, ebx
  000bc	0f 1f 40 00	 npad	 4
$LL23@main:

; 20   :   {
; 21   :     // If current element is smaller than the pivot
; 22   :     if (arr[j] < pivot)

  000c0	44 8b 84 8c 20
	52 0f 00	 mov	 r8d, DWORD PTR arr$3[rsp+rcx*4]
  000c8	41 83 f8 05	 cmp	 r8d, 5
  000cc	7d 19		 jge	 SHORT $LN21@main

; 9    :   int t = *a;

  000ce	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]

; 24   :       i++; // increment index of smaller element

  000d1	ff c7		 inc	 edi
  000d3	48 83 c2 04	 add	 rdx, 4

; 25   :       
; 26   :       int* a = nullptr;
; 27   :       *a = 42; //TEST crash: write access violation

  000d7	c7 03 2a 00 00
	00		 mov	 DWORD PTR [rbx], 42	; 0000002aH

; 10   :   *a = *b;

  000dd	44 89 02	 mov	 DWORD PTR [rdx], r8d

; 11   :   *b = t;

  000e0	89 84 8c 20 52
	0f 00		 mov	 DWORD PTR arr$3[rsp+rcx*4], eax
$LN21@main:

; 19   :   for (int j = low; j <= high - 1; j++)

  000e7	48 ff c1	 inc	 rcx
  000ea	48 83 f9 04	 cmp	 rcx, 4
  000ee	7e d0		 jle	 SHORT $LL23@main

; 28   :   
; 29   :       swap(&arr[i], &arr[j]);
; 30   :     }
; 31   :   }
; 32   :   swap(&arr[i + 1], &arr[high]);

  000f0	48 63 c7	 movsxd	 rax, edi
  000f3	48 8d 8c 24 24
	52 0f 00	 lea	 rcx, QWORD PTR arr$3[rsp+4]

; 9    :   int t = *a;

  000fb	8b 14 81	 mov	 edx, DWORD PTR [rcx+rax*4]

; 32   :   swap(&arr[i + 1], &arr[high]);

  000fe	48 8d 0c 81	 lea	 rcx, QWORD PTR [rcx+rax*4]

; 10   :   *a = *b;

  00102	8b 84 24 34 52
	0f 00		 mov	 eax, DWORD PTR arr$3[rsp+20]

; 46   :     quickSort(arr, low, pi - 1);

  00109	44 8b c7	 mov	 r8d, edi

; 10   :   *a = *b;

  0010c	89 01		 mov	 DWORD PTR [rcx], eax

; 46   :     quickSort(arr, low, pi - 1);

  0010e	48 8d 8c 24 20
	52 0f 00	 lea	 rcx, QWORD PTR arr$3[rsp]

; 11   :   *b = t;

  00116	89 94 24 34 52
	0f 00		 mov	 DWORD PTR arr$3[rsp+20], edx

; 46   :     quickSort(arr, low, pi - 1);

  0011d	33 d2		 xor	 edx, edx
  0011f	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort

; 47   :     quickSort(arr, pi + 1, high);

  00124	8d 57 02	 lea	 edx, DWORD PTR [rdi+2]
  00127	41 b8 05 00 00
	00		 mov	 r8d, 5
  0012d	48 8d 8c 24 20
	52 0f 00	 lea	 rcx, QWORD PTR arr$3[rsp]
  00135	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort

; 65   :   std::cout << "Sorted array: \n";

  0013a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DOEKPICM@Sorted?5array?3?5?6@
  00148	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0014d	48 8b bc 24 50
	52 0f 00	 mov	 rdi, QWORD PTR [rsp+1004112]
  00155	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL33@main:

; 56   :     std::cout << arr[i] << " ";

  00160	8b 94 9c 20 52
	0f 00		 mov	 edx, DWORD PTR arr$3[rsp+rbx*4]
  00167	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00174	48 8b c8	 mov	 rcx, rax
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01CLKCMJKC@?5@
  0017e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00183	48 ff c3	 inc	 rbx
  00186	48 83 fb 06	 cmp	 rbx, 6
  0018a	7c d4		 jl	 SHORT $LL33@main

; 57   :   std::cout << std::endl;

  0018c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00193	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp

; 48   :     }

  001a0	e9 aa 00 00 00	 jmp	 $LN13@main
$LN6@main:

; 49   :     else if (strcmp("crash_in_static_lib_b", argv[1] + 1) == 0)

  001a5	48 8b d3	 mov	 rdx, rbx
  001a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@EIMJIHJM@crash_in_static_lib_b@
  001af	e8 00 00 00 00	 call	 strcmp
  001b4	85 c0		 test	 eax, eax
  001b6	75 3a		 jne	 SHORT $LN8@main

; 50   :     {
; 51   :       printf("crash_in_static_lib_b\n");

  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DBOPOGC@crash_in_static_lib_b?6@
  001bf	e8 00 00 00 00	 call	 printf
  001c4	33 d2		 xor	 edx, edx
  001c6	c7 44 24 30 f4
	01 00 00	 mov	 DWORD PTR pattern_searcher$2[rsp], 500 ; 000001f4H
  001ce	41 b8 e0 51 0f
	00		 mov	 r8d, 1004000		; 000f51e0H
  001d4	c7 44 24 34 1a
	00 00 00	 mov	 DWORD PTR pattern_searcher$2[rsp+4], 26
  001dc	48 8d 4c 24 38	 lea	 rcx, QWORD PTR pattern_searcher$2[rsp+8]
  001e1	e8 00 00 00 00	 call	 memset

; 52   : 
; 53   :       pattern_searcher_t pattern_searcher;
; 54   :       pattern_searcher.search();//in static lib

  001e6	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pattern_searcher$2[rsp]
  001eb	e8 00 00 00 00	 call	 ?search@pattern_searcher_t@@QEAAHXZ ; pattern_searcher_t::search

; 55   :     }

  001f0	eb 5d		 jmp	 SHORT $LN13@main
$LN8@main:

; 56   :     else if (strcmp("crash_in_dynamic_lib_a", argv[1] + 1) == 0)

  001f2	48 8b d3	 mov	 rdx, rbx
  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@LCLCGICA@crash_in_dynamic_lib_a@
  001fc	e8 00 00 00 00	 call	 strcmp
  00201	85 c0		 test	 eax, eax
  00203	75 13		 jne	 SHORT $LN10@main

; 57   :     {
; 58   :       printf("crash_in_dynamic_lib_a\n");

  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MBDDHKCK@crash_in_dynamic_lib_a?6@
  0020c	e8 00 00 00 00	 call	 printf

; 59   :       calc_mininum_spaning();

  00211	e8 00 00 00 00	 call	 ?calc_mininum_spaning@@YAXXZ ; calc_mininum_spaning

; 60   :     }

  00216	eb 37		 jmp	 SHORT $LN13@main
$LN10@main:

; 61   :     else if (strcmp("crash_in_dynamic_lib_b", argv[1] + 1) == 0)

  00218	48 8b d3	 mov	 rdx, rbx
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@JJJPDLOD@crash_in_dynamic_lib_b@
  00222	e8 00 00 00 00	 call	 strcmp
  00227	85 c0		 test	 eax, eax
  00229	75 18		 jne	 SHORT $LN12@main

; 62   :     {
; 63   :       printf("crash_in_dynamic_lib_b\n");

  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MDHFMEHD@crash_in_dynamic_lib_b?6@
  00232	e8 00 00 00 00	 call	 printf

; 64   :       Cmathlibrary math_library;
; 65   :       math_library.calc_convex_hull();//in dynamic lib

  00237	48 8d 4c 24 20	 lea	 rcx, QWORD PTR math_library$1[rsp]
  0023c	e8 00 00 00 00	 call	 ?calc_convex_hull@Cmathlibrary@@QEAAHXZ ; Cmathlibrary::calc_convex_hull

; 66   :     }

  00241	eb 0c		 jmp	 SHORT $LN13@main
$LN12@main:

; 67   :     else
; 68   :     {
; 69   :       printf("Wrong command line option\n");

  00243	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@NCMICPBB@Wrong?5command?5line?5option?6@
  0024a	e8 00 00 00 00	 call	 printf
$LN13@main:

; 70   :       assert(false);
; 71   :     }
; 72   :   }
; 73   : 
; 74   :   return 0;

  0024f	33 c0		 xor	 eax, eax

; 75   : }

  00251	48 8b 8c 24 38
	52 0f 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00259	48 33 cc	 xor	 rcx, rsp
  0025c	e8 00 00 00 00	 call	 __security_check_cookie
  00261	48 81 c4 40 52
	0f 00		 add	 rsp, 1004096		; 000f5240H
  00268	5b		 pop	 rbx
  00269	c3		 ret	 0
$LN50@main:

; 40   :     {
; 41   :       printf("crash_in_main\n");

  0026a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FMFLLGHF@crash_in_main?6@
  00271	e8 00 00 00 00	 call	 printf

; 42   :       function_in_main();

  00276	e8 00 00 00 00	 call	 ?function_in_main@@YAXXZ ; function_in_main
  0027b	cc		 int	 3
$LN48@main:
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
;	COMDAT ?function_in_main@@YAXXZ
_TEXT	SEGMENT
?function_in_main@@YAXXZ PROC				; function_in_main, COMDAT

; 26   : {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LL2@function_i:

; 27   :   while (true)
; 28   :   {
; 29   :     std::array<uint8_t, 200> stack_memory_a;
; 30   :     function_in_main();  //TEST crash in main: stack overflow

  00004	e8 00 00 00 00	 call	 ?function_in_main@@YAXXZ ; function_in_main

; 31   :   }

  00009	eb f9		 jmp	 SHORT $LL2@function_i
?function_in_main@@YAXXZ ENDP				; function_in_main
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z PROC		; Cmathlibrary::operator=, COMDAT
  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z ENDP		; Cmathlibrary::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z PROC		; Cmathlibrary::operator=, COMDAT
  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z ENDP		; Cmathlibrary::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\dynamic_library\math_library.hpp
;	COMDAT ??0Cmathlibrary@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0Cmathlibrary@@QEAA@XZ PROC				; Cmathlibrary::Cmathlibrary, COMDAT

; 25   :   {
; 26   :   }

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0Cmathlibrary@@QEAA@XZ ENDP				; Cmathlibrary::Cmathlibrary
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 48
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  00006	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	b2 0a		 mov	 dl, 10
  0000e	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00012	48 03 cb	 add	 rcx, rbx
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  0001b	0f b6 d0	 movzx	 edx, al
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 980  :     _Ostr.flush();

  00027	48 8b cb	 mov	 rcx, rbx
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 981  :     return _Ostr;

  00030	48 8b c3	 mov	 rax, rbx

; 982  : }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5b		 pop	 rbx
  00038	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN99:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	41 54		 push	 r12
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00016	4c 8b fa	 mov	 r15, rdx
  00019	48 8b f1	 mov	 rsi, rcx

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0001c	33 db		 xor	 ebx, ebx
  0001e	89 5c 24 70	 mov	 DWORD PTR _State$[rsp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	49 c7 c6 ff ff
	ff ff		 mov	 r14, -1
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL92@operator:
  00030	49 ff c6	 inc	 r14
  00033	42 38 1c 32	 cmp	 BYTE PTR [rdx+r14], bl
  00037	75 f7		 jne	 SHORT $LL92@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00039	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003c	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase

; 363  :         return _Wide;

  00040	48 8b 7c 30 28	 mov	 rdi, QWORD PTR [rax+rsi+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00045	48 85 ff	 test	 rdi, rdi
  00048	7e 0a		 jle	 SHORT $LN17@operator
  0004a	49 3b fe	 cmp	 rdi, r14
  0004d	7e 05		 jle	 SHORT $LN17@operator
  0004f	49 2b fe	 sub	 rdi, r14
  00052	eb 02		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00054	33 ff		 xor	 edi, edi
$LN18@operator:

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00056	4c 8b e6	 mov	 r12, rsi
  00059	48 89 74 24 20	 mov	 QWORD PTR _Ok$[rsp], rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios

; 80   :         return _Mystrbuf;

  0005e	4c 8b 44 30 48	 mov	 r8, QWORD PTR [rax+rsi+72]
  00063	48 8b d1	 mov	 rdx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 73   :             if (_Rdbuf) {

  00066	4d 85 c0	 test	 r8, r8
  00069	74 0f		 je	 SHORT $LN39@operator

; 74   :                 _Rdbuf->_Lock();

  0006b	49 8b 00	 mov	 rax, QWORD PTR [r8]
  0006e	49 8b c8	 mov	 rcx, r8
  00071	ff 50 08	 call	 QWORD PTR [rax+8]
  00074	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  00077	48 8b d1	 mov	 rdx, rcx
$LN39@operator:

; 93   :             if (!_Ostr.good()) {

  0007a	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  0007e	83 7c 30 10 00	 cmp	 DWORD PTR [rax+rsi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 93   :             if (!_Ostr.good()) {

  00083	74 04		 je	 SHORT $LN33@operator

; 94   :                 _Ok = false;

  00085	32 c0		 xor	 al, al

; 95   :                 return;

  00087	eb 2e		 jmp	 SHORT $LN95@operator
$LN33@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios

; 70   :         return _Tiestr;

  00089	48 8b 44 30 50	 mov	 rax, QWORD PTR [rax+rsi+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  0008e	48 85 c0	 test	 rax, rax
  00091	74 22		 je	 SHORT $LN35@operator
  00093	48 3b c6	 cmp	 rax, rsi
  00096	74 1d		 je	 SHORT $LN35@operator

; 101  :                 return;
; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  00098	48 8b c8	 mov	 rcx, rax
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000a1	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  000a4	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  000a8	83 7c 30 10 00	 cmp	 DWORD PTR [rax+rsi+16], 0
  000ad	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000b0	48 8b d1	 mov	 rdx, rcx
  000b3	eb 02		 jmp	 SHORT $LN95@operator
$LN35@operator:

; 100  :                 _Ok = true;

  000b5	b0 01		 mov	 al, 1
$LN95@operator:

; 106  :         }

  000b7	88 44 24 28	 mov	 BYTE PTR _Ok$[rsp+8], al

; 741  :     const typename _Myos::sentry _Ok(_Ostr);
; 742  : 
; 743  :     if (!_Ok) {

  000bb	84 c0		 test	 al, al
  000bd	75 0a		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  000bf	bb 04 00 00 00	 mov	 ebx, 4

; 745  :     } else { // state okay, insert

  000c4	e9 a9 00 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000c9	48 63 41 04	 movsxd	 rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase

; 326  :         return _Fmtfl;

  000cd	8b 4c 30 18	 mov	 ecx, DWORD PTR [rax+rsi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000d1	81 e1 c0 01 00
	00		 and	 ecx, 448		; 000001c0H
  000d7	83 f9 40	 cmp	 ecx, 64			; 00000040H
  000da	74 2d		 je	 SHORT $LN87@operator
  000dc	0f 1f 40 00	 npad	 4
$LL4@operator:

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000e0	48 85 ff	 test	 rdi, rdi
  000e3	7e 21		 jle	 SHORT $LN89@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000e5	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  000e8	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  000ec	0f b6 54 31 58	 movzx	 edx, BYTE PTR [rcx+rsi+88]
  000f1	48 8b 4c 31 48	 mov	 rcx, QWORD PTR [rcx+rsi+72]
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  000fc	83 f8 ff	 cmp	 eax, -1
  000ff	74 48		 je	 SHORT $LN96@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00101	48 ff cf	 dec	 rdi
  00104	eb da		 jmp	 SHORT $LL4@operator
$LN89@operator:

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit
; 751  :                     break;
; 752  :                 }
; 753  :             }
; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00106	48 8b 16	 mov	 rdx, QWORD PTR [rsi]
$LN87@operator:
  00109	48 63 42 04	 movsxd	 rax, DWORD PTR [rdx+4]
  0010d	4d 8b c6	 mov	 r8, r14
  00110	49 8b d7	 mov	 rdx, r15
  00113	48 8b 4c 30 48	 mov	 rcx, QWORD PTR [rax+rsi+72]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  0011e	49 3b c6	 cmp	 rax, r14
  00121	75 26		 jne	 SHORT $LN96@operator
$LL93@operator:

; 757  :             _State |= ios_base::badbit;
; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {
; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00123	48 85 ff	 test	 rdi, rdi
  00126	7e 2a		 jle	 SHORT $LN6@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00128	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  0012b	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  0012f	0f b6 54 31 58	 movzx	 edx, BYTE PTR [rcx+rsi+88]
  00134	48 8b 4c 31 48	 mov	 rcx, QWORD PTR [rcx+rsi+72]
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0013f	83 f8 ff	 cmp	 eax, -1
  00142	74 05		 je	 SHORT $LN96@operator

; 757  :             _State |= ios_base::badbit;
; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {
; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00144	48 ff cf	 dec	 rdi
  00147	eb da		 jmp	 SHORT $LL93@operator
$LN96@operator:

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit
; 764  :                     break;
; 765  :                 }
; 766  :             }
; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  00149	bb 04 00 00 00	 mov	 ebx, 4
  0014e	89 5c 24 70	 mov	 DWORD PTR _State$[rsp], ebx
$LN6@operator:
  00152	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00155	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xiosbase

; 368  :         _Wide                      = _Newwidth;

  00159	48 c7 44 31 28
	00 00 00 00	 mov	 QWORD PTR [rcx+rsi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
  00162	eb 0e		 jmp	 SHORT $LN22@operator
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios
  00164	48 8b 74 24 60	 mov	 rsi, QWORD PTR _Ostr$[rsp]
  00169	8b 5c 24 70	 mov	 ebx, DWORD PTR _State$[rsp]
  0016d	4c 8b 64 24 20	 mov	 r12, QWORD PTR _Ok$[rsp]
$LN22@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 773  :     _Ostr.setstate(_State);

  00172	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00175	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00179	48 03 ce	 add	 rcx, rsi
  0017c	45 33 c0	 xor	 r8d, r8d
  0017f	8b d3		 mov	 edx, ebx
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00187	90		 npad	 1

; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00188	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0018d	84 c0		 test	 al, al
  0018f	75 0a		 jne	 SHORT $LN72@operator

; 119  :                 this->_Myostr._Osfx();

  00191	49 8b cc	 mov	 rcx, r12
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0019a	90		 npad	 1
$LN72@operator:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0019b	49 8b 04 24	 mov	 rax, QWORD PTR [r12]
  0019f	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ios

; 80   :         return _Mystrbuf;

  001a3	4a 8b 4c 21 48	 mov	 rcx, QWORD PTR [rcx+r12+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream

; 80   :             if (_Rdbuf) {

  001a8	48 85 c9	 test	 rcx, rcx
  001ab	74 07		 je	 SHORT $LN76@operator

; 81   :                 _Rdbuf->_Unlock();

  001ad	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  001b0	ff 50 10	 call	 QWORD PTR [rax+16]
  001b3	90		 npad	 1
$LN76@operator:

; 774  :     return _Ostr;

  001b4	48 8b c6	 mov	 rax, rsi

; 775  : }

  001b7	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  001bc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001c0	41 5f		 pop	 r15
  001c2	41 5e		 pop	 r14
  001c4	41 5c		 pop	 r12
  001c6	5f		 pop	 rdi
  001c7	5e		 pop	 rsi
  001c8	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 55 60	 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00011	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00014	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00018	48 03 ca	 add	 rcx, rdx
  0001b	41 b0 01	 mov	 r8b, 1
  0001e	ba 04 00 00 00	 mov	 edx, 4
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00029	90		 npad	 1
  0002a	48 b8 00 00 00
	00 00 00 00 00	 mov	 rax, 0
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
  0003a	cc		 int	 3
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 55 60	 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00011	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00014	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00018	48 03 ca	 add	 rcx, rdx
  0001b	41 b0 01	 mov	 r8b, 1
  0001e	ba 04 00 00 00	 mov	 edx, 4
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00029	90		 npad	 1
  0002a	48 b8 00 00 00
	00 00 00 00 00	 mov	 rax, 0
  00034	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
  0003a	cc		 int	 3
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4
text$x	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
;	COMDAT ?printArray@@YAXQEAHH@Z
_TEXT	SEGMENT
arr$ = 48
size$ = 56
?printArray@@YAXQEAHH@Z PROC				; printArray, COMDAT

; 53   : {

$LN11:
  00000	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 54   :   int i;
; 55   :   for (i = 0; i < size; i++)

  0000a	48 63 fa	 movsxd	 rdi, edx
  0000d	48 8b f1	 mov	 rsi, rcx
  00010	85 d2		 test	 edx, edx
  00012	7e 38		 jle	 SHORT $LN3@printArray
  00014	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00019	33 db		 xor	 ebx, ebx
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@printArray:

; 56   :     std::cout << arr[i] << " ";

  00020	8b 14 9e	 mov	 edx, DWORD PTR [rsi+rbx*4]
  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00030	48 8b c8	 mov	 rcx, rax
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01CLKCMJKC@?5@
  0003a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0003f	48 ff c3	 inc	 rbx
  00042	48 3b df	 cmp	 rbx, rdi
  00045	7c d9		 jl	 SHORT $LL4@printArray

; 54   :   int i;
; 55   :   for (i = 0; i < size; i++)

  00047	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
$LN3@printArray:

; 57   :   std::cout << std::endl;

  0004c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >

; 58   : }

  0005a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0005f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00063	5f		 pop	 rdi

; 57   :   std::cout << std::endl;

  00064	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
?printArray@@YAXQEAHH@Z ENDP				; printArray
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
;	COMDAT ?quickSort@@YAXQEAHHH@Z
_TEXT	SEGMENT
arr$ = 64
low$ = 72
high$ = 80
?quickSort@@YAXQEAHHH@Z PROC				; quickSort, COMDAT

; 37   : {

$LN26:
  00000	40 57		 push	 rdi
  00002	41 57		 push	 r15
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00008	4d 63 f8	 movsxd	 r15, r8d
  0000b	48 8b f9	 mov	 rdi, rcx
  0000e	4c 63 ca	 movsxd	 r9, edx

; 38   :   if (low < high)

  00011	45 3b cf	 cmp	 r9d, r15d
  00014	0f 8d b2 00 00
	00		 jge	 $LN2@quickSort

; 11   :   *b = t;

  0001a	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0001f	41 8d 47 ff	 lea	 eax, DWORD PTR [r15-1]
  00023	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00028	49 8b d9	 mov	 rbx, r9
  0002b	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00030	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  00035	45 33 e4	 xor	 r12d, r12d
  00038	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  0003d	4e 8d 34 b9	 lea	 r14, QWORD PTR [rcx+r15*4]
  00041	48 63 e8	 movsxd	 rbp, eax
  00044	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL14@quickSort:

; 16   :   int pivot = arr[high]; // pivot

  00050	45 8b 06	 mov	 r8d, DWORD PTR [r14]

; 17   :   int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

  00053	41 8d 71 ff	 lea	 esi, DWORD PTR [r9-1]
  00057	48 ff cb	 dec	 rbx

; 18   : 
; 19   :   for (int j = low; j <= high - 1; j++)

  0005a	49 63 c1	 movsxd	 rax, r9d
  0005d	48 3b c5	 cmp	 rax, rbp
  00060	7f 2a		 jg	 SHORT $LN6@quickSort
$LL7@quickSort:

; 20   :   {
; 21   :     // If current element is smaller than the pivot
; 22   :     if (arr[j] < pivot)

  00062	8b 14 87	 mov	 edx, DWORD PTR [rdi+rax*4]
  00065	41 3b d0	 cmp	 edx, r8d
  00068	7d 17		 jge	 SHORT $LN5@quickSort

; 9    :   int t = *a;

  0006a	8b 4c 9f 04	 mov	 ecx, DWORD PTR [rdi+rbx*4+4]

; 24   :       i++; // increment index of smaller element

  0006e	ff c6		 inc	 esi
  00070	48 ff c3	 inc	 rbx

; 25   :       
; 26   :       int* a = nullptr;
; 27   :       *a = 42; //TEST crash: write access violation

  00073	41 c7 04 24 2a
	00 00 00	 mov	 DWORD PTR [r12], 42	; 0000002aH

; 10   :   *a = *b;

  0007b	89 14 9f	 mov	 DWORD PTR [rdi+rbx*4], edx

; 11   :   *b = t;

  0007e	89 0c 87	 mov	 DWORD PTR [rdi+rax*4], ecx
$LN5@quickSort:

; 19   :   for (int j = low; j <= high - 1; j++)

  00081	48 ff c0	 inc	 rax
  00084	48 3b c5	 cmp	 rax, rbp
  00087	7e d9		 jle	 SHORT $LL7@quickSort

; 11   :   *b = t;

  00089	45 8b 06	 mov	 r8d, DWORD PTR [r14]
$LN6@quickSort:

; 9    :   int t = *a;

  0008c	8b 44 9f 04	 mov	 eax, DWORD PTR [rdi+rbx*4+4]

; 39   :   {
; 40   :     /* pi is partitioning index, arr[p] is now
; 41   :     at right place */
; 42   :     int pi = partition(arr, low, high);
; 43   : 
; 44   :     // Separately sort elements before
; 45   :     // partition and after partition
; 46   :     quickSort(arr, low, pi - 1);

  00090	41 8b d1	 mov	 edx, r9d

; 10   :   *a = *b;

  00093	44 89 44 9f 04	 mov	 DWORD PTR [rdi+rbx*4+4], r8d

; 39   :   {
; 40   :     /* pi is partitioning index, arr[p] is now
; 41   :     at right place */
; 42   :     int pi = partition(arr, low, high);
; 43   : 
; 44   :     // Separately sort elements before
; 45   :     // partition and after partition
; 46   :     quickSort(arr, low, pi - 1);

  00098	48 8b cf	 mov	 rcx, rdi
  0009b	44 8b c6	 mov	 r8d, esi

; 11   :   *b = t;

  0009e	41 89 06	 mov	 DWORD PTR [r14], eax

; 39   :   {
; 40   :     /* pi is partitioning index, arr[p] is now
; 41   :     at right place */
; 42   :     int pi = partition(arr, low, high);
; 43   : 
; 44   :     // Separately sort elements before
; 45   :     // partition and after partition
; 46   :     quickSort(arr, low, pi - 1);

  000a1	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort

; 47   :     quickSort(arr, pi + 1, high);

  000a6	44 8d 4e 02	 lea	 r9d, DWORD PTR [rsi+2]
  000aa	48 83 c3 02	 add	 rbx, 2
  000ae	45 3b cf	 cmp	 r9d, r15d
  000b1	7c 9d		 jl	 SHORT $LL14@quickSort

; 38   :   if (low < high)

  000b3	4c 8b 74 24 20	 mov	 r14, QWORD PTR [rsp+32]
  000b8	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
  000bd	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000c2	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  000c7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
$LN2@quickSort:

; 48   :   }
; 49   : }

  000cc	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d0	41 5f		 pop	 r15
  000d2	5f		 pop	 rdi
  000d3	c3		 ret	 0
?quickSort@@YAXQEAHHH@Z ENDP				; quickSort
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
;	COMDAT ?partition@@YAHQEAHHH@Z
_TEXT	SEGMENT
arr$ = 16
low$ = 24
high$ = 32
?partition@@YAHQEAHHH@Z PROC				; partition, COMDAT

; 15   : {

$LN18:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi

; 16   :   int pivot = arr[high]; // pivot

  00006	49 63 c0	 movsxd	 rax, r8d

; 17   :   int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

  00009	44 8d 4a ff	 lea	 r9d, DWORD PTR [rdx-1]
  0000d	8b 1c 81	 mov	 ebx, DWORD PTR [rcx+rax*4]
  00010	48 8d 3c 81	 lea	 rdi, QWORD PTR [rcx+rax*4]

; 18   : 
; 19   :   for (int j = low; j <= high - 1; j++)

  00014	48 63 c2	 movsxd	 rax, edx
  00017	4c 8b d1	 mov	 r10, rcx
  0001a	41 8d 50 ff	 lea	 edx, DWORD PTR [r8-1]
  0001e	4c 63 da	 movsxd	 r11, edx
  00021	49 3b c3	 cmp	 rax, r11
  00024	7f 3b		 jg	 SHORT $LN3@partition
  00026	49 63 d1	 movsxd	 rdx, r9d
  00029	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0002e	33 f6		 xor	 esi, esi
  00030	4c 8d 04 91	 lea	 r8, QWORD PTR [rcx+rdx*4]
$LL4@partition:

; 20   :   {
; 21   :     // If current element is smaller than the pivot
; 22   :     if (arr[j] < pivot)

  00034	41 8b 14 82	 mov	 edx, DWORD PTR [r10+rax*4]
  00038	3b d3		 cmp	 edx, ebx
  0003a	7d 18		 jge	 SHORT $LN2@partition

; 9    :   int t = *a;

  0003c	41 8b 48 04	 mov	 ecx, DWORD PTR [r8+4]

; 23   :     {
; 24   :       i++; // increment index of smaller element

  00040	41 ff c1	 inc	 r9d
  00043	49 83 c0 04	 add	 r8, 4

; 25   :       
; 26   :       int* a = nullptr;
; 27   :       *a = 42; //TEST crash: write access violation

  00047	c7 06 2a 00 00
	00		 mov	 DWORD PTR [rsi], 42	; 0000002aH

; 10   :   *a = *b;

  0004d	41 89 10	 mov	 DWORD PTR [r8], edx

; 11   :   *b = t;

  00050	41 89 0c 82	 mov	 DWORD PTR [r10+rax*4], ecx
$LN2@partition:

; 18   : 
; 19   :   for (int j = low; j <= high - 1; j++)

  00054	48 ff c0	 inc	 rax
  00057	49 3b c3	 cmp	 rax, r11
  0005a	7e d8		 jle	 SHORT $LL4@partition
  0005c	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
$LN3@partition:

; 33   :   return (i + 1);
; 34   : }

  00061	48 8b 5c 24 18	 mov	 rbx, QWORD PTR [rsp+24]
  00066	41 8d 41 01	 lea	 eax, DWORD PTR [r9+1]
  0006a	49 63 c9	 movsxd	 rcx, r9d

; 9    :   int t = *a;

  0006d	45 8b 44 8a 04	 mov	 r8d, DWORD PTR [r10+rcx*4+4]

; 28   :   
; 29   :       swap(&arr[i], &arr[j]);
; 30   :     }
; 31   :   }
; 32   :   swap(&arr[i + 1], &arr[high]);

  00072	49 8d 14 8a	 lea	 rdx, QWORD PTR [r10+rcx*4]

; 10   :   *a = *b;

  00076	8b 0f		 mov	 ecx, DWORD PTR [rdi]
  00078	89 4a 04	 mov	 DWORD PTR [rdx+4], ecx

; 11   :   *b = t;

  0007b	44 89 07	 mov	 DWORD PTR [rdi], r8d

; 33   :   return (i + 1);
; 34   : }

  0007e	5f		 pop	 rdi
  0007f	c3		 ret	 0
?partition@@YAHQEAHHH@Z ENDP				; partition
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
;	COMDAT ?swap@@YAXPEAH0@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
?swap@@YAXPEAH0@Z PROC					; swap, COMDAT

; 9    :   int t = *a;

  00000	44 8b 01	 mov	 r8d, DWORD PTR [rcx]

; 10   :   *a = *b;

  00003	8b 02		 mov	 eax, DWORD PTR [rdx]
  00005	89 01		 mov	 DWORD PTR [rcx], eax

; 11   :   *b = t;

  00007	44 89 02	 mov	 DWORD PTR [rdx], r8d

; 12   : }

  0000a	c3		 ret	 0
?swap@@YAXPEAH0@Z ENDP					; swap
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
;	COMDAT ?quick_sort@@YAXXZ
_TEXT	SEGMENT
arr$ = 32
__$ArrayPad$ = 56
?quick_sort@@YAXXZ PROC					; quick_sort, COMDAT

; 61   : {

$LN32:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 62   :   int arr[] = { 10, 7, 8, 9, 1, 5 };

  00019	66 0f 6f 05 00
	00 00 00	 movdqa	 xmm0, XMMWORD PTR __xmm@0000000900000008000000070000000a
  00021	48 8d 54 24 20	 lea	 rdx, QWORD PTR arr$[rsp]

; 17   :   int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

  00026	33 db		 xor	 ebx, ebx

; 62   :   int arr[] = { 10, 7, 8, 9, 1, 5 };

  00028	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR arr$[rsp+16], 1
  00030	f3 0f 7f 44 24
	20		 movdqu	 XMMWORD PTR arr$[rsp], xmm0
  00036	8b cb		 mov	 ecx, ebx
  00038	c7 44 24 34 05
	00 00 00	 mov	 DWORD PTR arr$[rsp+20], 5
  00040	48 83 ea 04	 sub	 rdx, 4

; 17   :   int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

  00044	bf ff ff ff ff	 mov	 edi, -1
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@quick_sort:

; 20   :   {
; 21   :     // If current element is smaller than the pivot
; 22   :     if (arr[j] < pivot)

  00050	44 8b 44 8c 20	 mov	 r8d, DWORD PTR arr$[rsp+rcx*4]
  00055	41 83 f8 05	 cmp	 r8d, 5
  00059	7d 16		 jge	 SHORT $LN7@quick_sort

; 9    :   int t = *a;

  0005b	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]

; 24   :       i++; // increment index of smaller element

  0005e	ff c7		 inc	 edi
  00060	48 83 c2 04	 add	 rdx, 4

; 25   :       
; 26   :       int* a = nullptr;
; 27   :       *a = 42; //TEST crash: write access violation

  00064	c7 03 2a 00 00
	00		 mov	 DWORD PTR [rbx], 42	; 0000002aH

; 10   :   *a = *b;

  0006a	44 89 02	 mov	 DWORD PTR [rdx], r8d

; 11   :   *b = t;

  0006d	89 44 8c 20	 mov	 DWORD PTR arr$[rsp+rcx*4], eax
$LN7@quick_sort:

; 19   :   for (int j = low; j <= high - 1; j++)

  00071	48 ff c1	 inc	 rcx
  00074	48 83 f9 04	 cmp	 rcx, 4
  00078	7e d6		 jle	 SHORT $LL9@quick_sort

; 28   :   
; 29   :       swap(&arr[i], &arr[j]);
; 30   :     }
; 31   :   }
; 32   :   swap(&arr[i + 1], &arr[high]);

  0007a	48 63 c7	 movsxd	 rax, edi
  0007d	48 8d 4c 24 24	 lea	 rcx, QWORD PTR arr$[rsp+4]

; 9    :   int t = *a;

  00082	8b 14 81	 mov	 edx, DWORD PTR [rcx+rax*4]

; 32   :   swap(&arr[i + 1], &arr[high]);

  00085	48 8d 0c 81	 lea	 rcx, QWORD PTR [rcx+rax*4]

; 10   :   *a = *b;

  00089	8b 44 24 34	 mov	 eax, DWORD PTR arr$[rsp+20]

; 46   :     quickSort(arr, low, pi - 1);

  0008d	44 8b c7	 mov	 r8d, edi

; 10   :   *a = *b;

  00090	89 01		 mov	 DWORD PTR [rcx], eax

; 46   :     quickSort(arr, low, pi - 1);

  00092	48 8d 4c 24 20	 lea	 rcx, QWORD PTR arr$[rsp]

; 11   :   *b = t;

  00097	89 54 24 34	 mov	 DWORD PTR arr$[rsp+20], edx

; 46   :     quickSort(arr, low, pi - 1);

  0009b	33 d2		 xor	 edx, edx
  0009d	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort

; 47   :     quickSort(arr, pi + 1, high);

  000a2	8d 57 02	 lea	 edx, DWORD PTR [rdi+2]
  000a5	41 b8 05 00 00
	00		 mov	 r8d, 5
  000ab	48 8d 4c 24 20	 lea	 rcx, QWORD PTR arr$[rsp]
  000b0	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort

; 63   :   int n = sizeof(arr) / sizeof(arr[0]);
; 64   :   quickSort(arr, 0, n - 1);
; 65   :   std::cout << "Sorted array: \n";

  000b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DOEKPICM@Sorted?5array?3?5?6@
  000c3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000c8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL19@quick_sort:

; 56   :     std::cout << arr[i] << " ";

  000d0	8b 54 9c 20	 mov	 edx, DWORD PTR arr$[rsp+rbx*4]
  000d4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01CLKCMJKC@?5@
  000eb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000f0	48 ff c3	 inc	 rbx
  000f3	48 83 fb 06	 cmp	 rbx, 6
  000f7	7c d7		 jl	 SHORT $LL19@quick_sort

; 57   :   std::cout << std::endl;

  000f9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 66   :   printArray(arr, n);
; 67   : }

  0010d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00112	48 33 cc	 xor	 rcx, rsp
  00115	e8 00 00 00 00	 call	 __security_check_cookie
  0011a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0011f	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
?quick_sort@@YAXXZ ENDP					; quick_sort
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT

; 956  :     {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	53		 push	 rbx
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0001b	48 8b f9	 mov	 rdi, rcx

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  0001e	48 8d 74 24 58	 lea	 rsi, QWORD PTR _Format$[rsp+8]

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002e	48 8b d8	 mov	 rbx, rax

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00031	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00036	45 33 c9	 xor	 r9d, r9d
  00039	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0003e	4c 8b c7	 mov	 r8, rdi
  00041	48 8b d3	 mov	 rdx, rbx
  00044	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 961  :         __crt_va_end(_ArgList);
; 962  :         return _Result;
; 963  :     }

  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	5e		 pop	 rsi
  00053	5b		 pop	 rbx
  00054	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
