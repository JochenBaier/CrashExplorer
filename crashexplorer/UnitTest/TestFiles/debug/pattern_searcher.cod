; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30038.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG39746 DB	' to ', 00H
	ORG $+3
$SG39747 DB	' appears from ', 00H
	ORG $+1
$SG39748 DB	'Word ', 00H
	ORG $+2
$SG39757 DB	'he', 00H
	ORG $+1
$SG39758 DB	'she', 00H
$SG39759 DB	'hers', 00H
	ORG $+3
$SG39760 DB	'his', 00H
$SG48088 DB	'%s', 00H
	ORG $+1
$SG39761 DB	'ahishers', 00H
	ORG $+7
$SG48087 DB	'invalid argument', 00H
	ORG $+7
$SG48089 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30037\include\xmemory', 00H
	ORG $+8
$SG48090 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'0', 00H, '3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG48091 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG48092 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+10
$SG48272 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30037\include\xlocale', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked
PUBLIC	?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	?search@pattern_searcher_t@@QEAAHXZ		; pattern_searcher_t::search
PUBLIC	?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; pattern_searcher_t::buildMatchingMachine
PUBLIC	?findNextState@pattern_searcher_t@@AEAAHHD@Z	; pattern_searcher_t::findNextState
PUBLIC	?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z ; pattern_searcher_t::searchWords
PUBLIC	??0?$allocator@H@std@@QEAA@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z	; std::allocator<int>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
PUBLIC	?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z ; std::allocator<int *>::deallocate
PUBLIC	?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z	; std::allocator<int *>::allocate
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ ; std::_Deque_val<std::_Deque_simple_types<int> >::_Deque_val<std::_Deque_simple_types<int> >
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<int> >::_Getblock
PUBLIC	??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::deque<int,std::allocator<int> >::deque<int,std::allocator<int> >
PUBLIC	??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::deque<int,std::allocator<int> >::~deque<int,std::allocator<int> >
PUBLIC	?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Unchecked_begin
PUBLIC	?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::deque<int,std::allocator<int> >::size
PUBLIC	?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::deque<int,std::allocator<int> >::max_size
PUBLIC	?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ ; std::deque<int,std::allocator<int> >::empty
PUBLIC	?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ ; std::deque<int,std::allocator<int> >::front
PUBLIC	?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ ; std::deque<int,std::allocator<int> >::pop_front
PUBLIC	?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ; std::deque<int,std::allocator<int> >::push_back
PUBLIC	?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ ; std::deque<int,std::allocator<int> >::pop_back
PUBLIC	?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ ; std::deque<int,std::allocator<int> >::_Xlen
PUBLIC	?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z ; std::deque<int,std::allocator<int> >::_Growmap
PUBLIC	?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::deque<int,std::allocator<int> >::_Tidy
PUBLIC	?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z ; std::deque<int,std::allocator<int> >::_Orphan_off
PUBLIC	?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::deque<int,std::allocator<int> >::_Getblock
PUBLIC	?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::deque<int,std::allocator<int> >::_Orphan_all
PUBLIC	?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
PUBLIC	?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
PUBLIC	?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
PUBLIC	?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
PUBLIC	?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
PUBLIC	?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
PUBLIC	?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
PUBLIC	?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
PUBLIC	?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
PUBLIC	?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first
PUBLIC	??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ; std::queue<int,std::deque<int,std::allocator<int> > >::queue<int,std::deque<int,std::allocator<int> > >
PUBLIC	?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ ; std::queue<int,std::deque<int,std::allocator<int> > >::size
PUBLIC	?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ ; std::queue<int,std::deque<int,std::allocator<int> > >::front
PUBLIC	?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z ; std::queue<int,std::deque<int,std::allocator<int> > >::push
PUBLIC	?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ; std::queue<int,std::deque<int,std::allocator<int> > >::pop
PUBLIC	??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ; std::queue<int,std::deque<int,std::allocator<int> > >::~queue<int,std::deque<int,std::allocator<int> > >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<int *>::allocator<int *><int>
PUBLIC	??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z	; std::_Destroy_in_place<int *>
PUBLIC	??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z ; std::deque<int,std::allocator<int> >::_Emplace_back_internal<int const &>
PUBLIC	??$_Unfancy@H@std@@YAPEAHPEAH@Z			; std::_Unfancy<int>
PUBLIC	??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::destroy<int>
PUBLIC	??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >
PUBLIC	??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*
PUBLIC	??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*
PUBLIC	??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
PUBLIC	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z ; std::addressof<std::_Deque_val<std::_Deque_simple_types<int> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$forward@AEBH@std@@YAAEBHAEBH@Z		; std::forward<int const &>
PUBLIC	??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z	; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z ; std::uninitialized_copy<int * *,int * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z ; std::_Uninitialized_value_construct_n_unchecked1<int * *,unsigned __int64>
PUBLIC	??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z ; std::_Destroy_range<int * *,int * *>
PUBLIC	??$_Get_size_of_n@$03@std@@YA_K_K@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Get_size_of_n@$07@std@@YA_K_K@Z		; std::_Get_size_of_n<8>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z		; std::_Voidify_iter<int *>
PUBLIC	??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z ; std::_Adl_verify_range<int * *,int * *>
PUBLIC	??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z ; std::_Get_unwrapped<int * * const &>
PUBLIC	??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z ; std::_Idl_distance<int * *,int * *>
PUBLIC	??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z ; std::_Get_unwrapped_n<int * * &,__int64>
PUBLIC	??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z ; std::_Uninitialized_copy_unchecked<int * *,int * *>
PUBLIC	??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z ; std::_Seek_wrapped<int * *,int * *>
PUBLIC	??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z	; std::_Zero_range<int * *>
PUBLIC	??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z	; std::_Verify_range<int *>
PUBLIC	??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z ; std::_Copy_memmove<int * *,int * *>
PUBLIC	??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z ; std::_Uninitialized_backout<int * *>::_Uninitialized_backout<int * *>
PUBLIC	??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ ; std::_Uninitialized_backout<int * *>::~_Uninitialized_backout<int * *>
PUBLIC	?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ ; std::_Uninitialized_backout<int * *>::_Release
PUBLIC	??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z ; std::_Uninitialized_backout<int * *>::_Emplace_back<int * &>
PUBLIC	??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z ; std::forward<int * *>
PUBLIC	??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z	; std::_To_address<int * *>
PUBLIC	??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z	; std::forward<int * &>
PUBLIC	??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z ; std::_Construct_in_place<int *,int * &>
PUBLIC	??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z	; std::addressof<int *>
PUBLIC	??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z	; std::_Voidify_iter<int * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GI@FKEOHBGC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@LAIGCHJK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BH@EDKEEENI@deque?5empty?5before?5pop@	; `string'
PUBLIC	??_C@_0GG@FDHPMGE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MM@DPCANHAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1GM@CDKPHBPK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
PUBLIC	??_C@_1DC@NJAACHCD@?$AA?$CC?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAb?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PEOHNLIM@front?$CI?$CJ?5called?5on?5empty?5deque@ ; `string'
PUBLIC	??_C@_1GE@NOEMPIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
PUBLIC	??_C@_1EA@EELNAHHD@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_1GK@DKJEHNEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@	; `string'
PUBLIC	??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YAXPEAX_K1P6AX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+37
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+94
	DD	imagerel $unwind$?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+15
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+235
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+222
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD imagerel $LN6
	DD	imagerel $LN6+434
	DD	imagerel $unwind$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+178
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD imagerel $LN12
	DD	imagerel $LN12+174
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z DD imagerel $LN12
	DD	imagerel $LN12+174
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+189
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?search@pattern_searcher_t@@QEAAHXZ DD imagerel $LN10
	DD	imagerel $LN10+349
	DD	imagerel $unwind$?search@pattern_searcher_t@@QEAAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD imagerel ?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	imagerel ?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
$pdata$?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD imagerel ?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	imagerel ?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
$pdata$?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD imagerel ?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	imagerel ?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
$pdata$?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD imagerel ?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	imagerel ?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA+53
	DD	imagerel $unwind$?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
$pdata$?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD imagerel ?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	imagerel ?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD imagerel $LN27
	DD	imagerel $LN27+1401
	DD	imagerel $unwind$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA DD imagerel ?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA
	DD	imagerel ?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?findNextState@pattern_searcher_t@@AEAAHHD@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?findNextState@pattern_searcher_t@@AEAAHHD@Z
$pdata$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z DD imagerel $LN12
	DD	imagerel $LN12+453
	DD	imagerel $unwind$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA DD imagerel ?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA
	DD	imagerel ?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@H@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@H@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ DD imagerel $LN12
	DD	imagerel $LN12+175
	DD	imagerel $unwind$?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+395
	DD	imagerel $unwind$?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+381
	DD	imagerel $unwind$?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z DD imagerel $LN12
	DD	imagerel $LN12+1055
	DD	imagerel $unwind$?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+371
	DD	imagerel $unwind$?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z DD imagerel $LN11
	DD	imagerel $LN11+357
	DD	imagerel $unwind$?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1038
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+79
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+91
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+211
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z DD imagerel $LN5
	DD	imagerel $LN5+554
	DD	imagerel $unwind$??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+332
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD imagerel $LN26
	DD	imagerel $LN26+994
	DD	imagerel $unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+79
	DD	imagerel $unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBH@std@@YAAEBHAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBH@std@@YAAEBHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+216
	DD	imagerel $unwind$??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z DD imagerel $LN7
	DD	imagerel $LN7+181
	DD	imagerel $unwind$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z DD imagerel $LN12
	DD	imagerel $LN12+148
	DD	imagerel $unwind$??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ DB '"'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
CONST	SEGMENT
??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@ DB 'transposed pointer ran'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@DKJEHNEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1GK@DKJEHNEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'd', 00H, 'e', 00H
	DB	'q', 00H, 'u', 00H, 'e', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'p', 00H, 'o', 00H
	DB	'p', 00H, '_', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@EELNAHHD@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@
CONST	SEGMENT
??_C@_1EA@EELNAHHD@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@ DB '"'
	DB	00H, 'f', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 't', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H
	DB	'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'd', 00H, 'e'
	DB	00H, 'q', 00H, 'u', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@NOEMPIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1GE@NOEMPIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'd', 00H, 'e', 00H
	DB	'q', 00H, 'u', 00H, 'e', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'f', 00H, 'r', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PEOHNLIM@front?$CI?$CJ?5called?5on?5empty?5deque@
CONST	SEGMENT
??_C@_0BO@PEOHNLIM@front?$CI?$CJ?5called?5on?5empty?5deque@ DB 'front() c'
	DB	'alled on empty deque', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@NJAACHCD@?$AA?$CC?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAb?$AAe@
CONST	SEGMENT
??_C@_1DC@NJAACHCD@?$AA?$CC?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAb?$AAe@ DB '"'
	DB	00H, 'd', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'b'
	DB	00H, 'e', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'e', 00H, ' ', 00H
	DB	'p', 00H, 'o', 00H, 'p', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@CDKPHBPK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
CONST	SEGMENT
??_C@_1GM@CDKPHBPK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'd', 00H, 'e', 00H
	DB	'q', 00H, 'u', 00H, 'e', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 'i', 00H, 'n', 00H, 't', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'p', 00H, 'o', 00H
	DB	'p', 00H, '_', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@DPCANHAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MM@DPCANHAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	'q', 00H, 'u', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@FDHPMGE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GG@FDHPMGE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Prog'
	DB	'ram Files (x86)\Microsoft Visual Studio\2019\Community\VC\Too'
	DB	'ls\MSVC\14.29.30037\include\deque', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EDKEEENI@deque?5empty?5before?5pop@
CONST	SEGMENT
??_C@_0BH@EDKEEENI@deque?5empty?5before?5pop@ DB 'deque empty before pop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
CONST	SEGMENT
??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@LAIGCHJK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@LAIGCHJK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@FKEOHBGC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@FKEOHBGC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\xstring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ DB 'string subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z
	DD	imagerel $ip2state$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z DD 022a11H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z$rtcName$0 DB 05fH ; std::_Uninitialized_copy_unchecked<int * *,int * *>
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z$rtcVarDesc DD 028H ; std::_Uninitialized_copy_unchecked<int * *,int * *>
	DD	010H
	DQ	FLAT:??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z$rtcName$0
	ORG $+48
??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z$rtcFrameData DD 01H ; std::_Uninitialized_copy_unchecked<int * *,int * *>
	DD	00H
	DQ	FLAT:??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z DD 022d01H
	DD	07010d214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcName$0 DB 05fH ; std::uninitialized_copy<int * *,int * *>
	DB	055H
	DB	046H
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcName$1 DB 05fH ; std::uninitialized_copy<int * *,int * *>
	DB	055H
	DB	04cH
	DB	061H
	DB	073H
	DB	074H
	DB	00H
	ORG $+1
??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcVarDesc DD 048H ; std::uninitialized_copy<int * *,int * *>
	DD	08H
	DQ	FLAT:??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcName$0
	ORG $+96
??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcFrameData DD 02H ; std::uninitialized_copy<int * *,int * *>
	DD	00H
	DQ	FLAT:??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBH@std@@YAAEBHAEBH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	091H, 03H
	DB	02H
	DB	'B'
	DB	04H
	DB	0d1H, 09H
	DB	02H
	DB	'x'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 033019H
	DD	0160117H
	DD	07010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0 DB 05fH ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc DD 038H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	010H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0
	ORG $+48
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData DD 01H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD 022f01H
	DD	07015b219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc DD 048H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z DD 021201H
	DD	0700bf212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'>'
	DB	02H
	DB	0a5H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 020f11H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	0f9H, 03H
	DB	02H
	DB	'B'
	DB	04H
	DB	019H, 0aH
	DB	02H
	DB	'x'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 032b19H
	DD	01a0112H
	DD	0700bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 048H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006320aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z$rtcName$0 DB 05fH ; std::deque<int,std::allocator<int> >::_Orphan_off
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z$rtcVarDesc DD 034H ; std::deque<int,std::allocator<int> >::_Orphan_off
	DD	04H
	DQ	FLAT:?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z$rtcName$0
	ORG $+48
?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z$rtcFrameData DD 01H ; std::deque<int,std::allocator<int> >::_Orphan_off
	DD	00H
	DQ	FLAT:?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ DD 022019H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::deque<int,std::allocator<int> >::_Tidy
	DB	041H
	DB	06cH
	DB	06dH
	DB	061H
	DB	070H
	DB	00H
	ORG $+9
?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::deque<int,std::allocator<int> >::_Tidy
	DD	01H
	DQ	FLAT:?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ$rtcFrameData DD 01H ; std::deque<int,std::allocator<int> >::_Tidy
	DD	00H
	DQ	FLAT:?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z DD 032b01H
	DD	0160112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z$rtcName$0 DB 05fH ; std::deque<int,std::allocator<int> >::_Growmap
	DB	041H
	DB	06cH
	DB	06dH
	DB	061H
	DB	070H
	DB	00H
	ORG $+9
?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z$rtcVarDesc DD 024H ; std::deque<int,std::allocator<int> >::_Growmap
	DD	01H
	DQ	FLAT:?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z$rtcName$0
	ORG $+48
?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z$rtcFrameData DD 01H ; std::deque<int,std::allocator<int> >::_Growmap
	DD	00H
	DQ	FLAT:?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DB 060H
	DD	imagerel $ip2state$?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DD 020a19H
	DD	07006b20aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DB 060H
	DD	imagerel $ip2state$?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ DD 020a19H
	DD	07006b20aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0 DB 05fH ; std::deque<int,std::allocator<int> >::~deque<int,std::allocator<int> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	05fH
	DB	061H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+15
??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc DD 024H ; std::deque<int,std::allocator<int> >::~deque<int,std::allocator<int> >
	DD	01H
	DQ	FLAT:??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::deque<int,std::allocator<int> >::~deque<int,std::allocator<int> >
	DD	00H
	DQ	FLAT:??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@H@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DDSymXIndex: 	FLAT:?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA
	DD	00H
	DD	05H
_volmd	DDSymXIndex: 	FLAT:?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA
	DD	00H
	DD	05H
_volmd	DDSymXIndex: 	FLAT:?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DDSymXIndex: 	FLAT:?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DDSymXIndex: 	FLAT:?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DDSymXIndex: 	FLAT:?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DDSymXIndex: 	FLAT:?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
voltbl	SEGMENT
_volmd	DDSymXIndex: 	FLAT:?search@pattern_searcher_t@@QEAAHXZ
	DD	030H
	DD	0144H
voltbl	ENDS
xdata	SEGMENT
$unwind$?search@pattern_searcher_t@@QEAAHXZ DD 033819H
	DD	02e010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?search@pattern_searcher_t@@QEAAHXZ
	DD	0162H
$cppxdata$?search@pattern_searcher_t@@QEAAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?search@pattern_searcher_t@@QEAAHXZ
	DD	imagerel $ip2state$?search@pattern_searcher_t@@QEAAHXZ
$stateUnwindMap$?search@pattern_searcher_t@@QEAAHXZ DB 0aH
	DB	0eH
	DD	imagerel ?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DB	086H
	DD	imagerel ?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA
$ip2state$?search@pattern_searcher_t@@QEAAHXZ DB 010H
	DB	00H
	DB	00H
	DB	094H
	DB	02H
	DB	'$'
	DB	04H
	DB	'*'
	DB	06H
	DB	'*'
	DB	08H
	DB	'*'
	DB	0aH
	DB	0caH
	DB	08H
	DB	01cH
	DB	00H
$unwind$?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 033011H
	DD	0140117H
	DD	07010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
$cppxdata$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DB 028H
	DD	imagerel $stateUnwindMap$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	DD	imagerel $ip2state$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
$stateUnwindMap$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA
$ip2state$?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DB 06H
	DB	00H
	DB	00H
	DB	01dH, 0aH
	DB	02H
	DB	015H, 0bH
	DB	00H
$unwind$?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?findNextState@pattern_searcher_t@@AEAAHHD@Z DD 021301H
	DD	0700f1213H
$unwind$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z DD 021911H
	DD	070159219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z
$cppxdata$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z DB 028H
	DD	imagerel $stateUnwindMap$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z
	DD	imagerel $ip2state$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z
$stateUnwindMap$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA
$ip2state$?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z DB 06H
	DB	00H
	DB	00H
	DB	'2'
	DB	02H
	DB	'q', 06H
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
CONST	SEGMENT
?search@pattern_searcher_t@@QEAAHXZ$rtcName$0 DB 061H	; pattern_searcher_t::search
	DB	072H
	DB	072H
	DB	00H
?search@pattern_searcher_t@@QEAAHXZ$rtcName$1 DB 074H	; pattern_searcher_t::search
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+15
?search@pattern_searcher_t@@QEAAHXZ$rtcVarDesc DD 0e8H	; pattern_searcher_t::search
	DD	028H
	DQ	FLAT:?search@pattern_searcher_t@@QEAAHXZ$rtcName$1
	DD	030H
	DD	0a0H
	DQ	FLAT:?search@pattern_searcher_t@@QEAAHXZ$rtcName$0
	ORG $+96
?search@pattern_searcher_t@@QEAAHXZ$rtcFrameData DD 02H	; pattern_searcher_t::search
	DD	00H
	DQ	FLAT:?search@pattern_searcher_t@@QEAAHXZ$rtcVarDesc
?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$rtcName$0 DB 071H ; pattern_searcher_t::buildMatchingMachine
	DB	00H
	ORG $+6
?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$rtcFrameData DD 01H ; pattern_searcher_t::buildMatchingMachine
	DD	00H
	DQ	FLAT:?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$rtcVarDesc
	ORG $+8
?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$rtcVarDesc DD 048H ; pattern_searcher_t::buildMatchingMachine
	DD	028H
	DQ	FLAT:?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 020a19H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 022001H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	038H
	DB	00H
	ORG $+12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	01H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD 032b01H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+5
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z$rtcVarDesc DD 068H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
	DD	08H
	DQ	FLAT:?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z$rtcName$0
	ORG $+48
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
	DD	00H
	DQ	FLAT:?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	082H
	DB	02H
	DB	'~'
	DB	04H
	DB	'Z'
	DB	02H
	DB	016H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 022b11H
	DD	0700bf212H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	031H
	DB	030H
	DB	00H
	ORG $+3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcVarDesc DD 058H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	010H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcName$0
	ORG $+96
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DB 0aH
	DB	00H
	DB	00H
	DB	0b6H
	DB	02H
	DB	'~'
	DB	04H
	DB	'@'
	DB	02H
	DB	016H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 022b11H
	DD	0700bf212H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	031H
	DB	032H
	DB	00H
	ORG $+3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcVarDesc DD 058H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	010H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcName$0
	ORG $+96
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked
	DD	04H
	DQ	FLAT:?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked
	DD	00H
	DQ	FLAT:?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z PROC	; std::_Voidify_iter<int * *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _It$[rsp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z ENDP	; std::_Voidify_iter<int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z PROC		; std::addressof<int *>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 275  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z ENDP		; std::addressof<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z PROC ; std::_Construct_in_place<int *,int * &>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0000f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00014	e8 00 00 00 00	 call	 ??$addressof@PEAH@std@@YAPEAPEAHAEAPEAH@Z ; std::addressof<int *>
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAPEAH@std@@YAPEAXPEAPEAH@Z ; std::_Voidify_iter<int * *>
  00021	48 8b d0	 mov	 rdx, rax
  00024	b9 08 00 00 00	 mov	 ecx, 8
  00029	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002e	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00033	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00038	e8 00 00 00 00	 call	 ??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z ; std::forward<int * &>
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax

; 159  :     }
; 160  : }

  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z ENDP ; std::_Construct_in_place<int *,int * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z PROC		; std::forward<int * &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z ENDP		; std::forward<int * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z PROC	; std::_To_address<int * *>, COMDAT

; 4074 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 4075 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4076 :     return _Val;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 4077 : }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z ENDP	; std::_To_address<int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z PROC	; std::forward<int * *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z ENDP	; std::forward<int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z
_TEXT	SEGMENT
this$ = 48
<_Vals_0>$ = 56
??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z PROC ; std::_Uninitialized_backout<int * *>::_Emplace_back<int * &>, COMDAT

; 1472 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1473 :         // construct a new element at *_Last and increment
; 1474 :         _Construct_in_place(*_Last, _STD forward<_Types>(_Vals)...);

  0000f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR <_Vals_0>$[rsp]
  00014	e8 00 00 00 00	 call	 ??$forward@AEAPEAH@std@@YAAEAPEAHAEAPEAH@Z ; std::forward<int * &>
  00019	48 8b d0	 mov	 rdx, rax
  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00025	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEAHAEAPEAH@std@@YAXAEAPEAH0@Z ; std::_Construct_in_place<int *,int * &>

; 1475 :         ++_Last;

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	48 83 c0 08	 add	 rax, 8
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1476 :     }

  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z ENDP ; std::_Uninitialized_backout<int * *>::_Emplace_back<int * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ PROC ; std::_Uninitialized_backout<int * *>::_Release, COMDAT

; 1478 :     constexpr _NoThrowFwdIt _Release() { // suppress any exception handling backout and return _Last

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1479 :         _First = _Last;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00010	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1480 :         return _Last;

  00017	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 1481 :     }

  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ ENDP ; std::_Uninitialized_backout<int * *>::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ PROC	; std::_Uninitialized_backout<int * *>::~_Uninitialized_backout<int * *>, COMDAT

; 1467 :     _CONSTEXPR20_DYNALLOC ~_Uninitialized_backout() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1468 :         _Destroy_range(_First, _Last);

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z ; std::_Destroy_range<int * *,int * *>

; 1469 :     }

  00020	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00024	5f		 pop	 rdi
  00025	c3		 ret	 0
??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ ENDP	; std::_Uninitialized_backout<int * *>::~_Uninitialized_backout<int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z PROC ; std::_Uninitialized_backout<int * *>::_Uninitialized_backout<int * *>, COMDAT

; 1460 :     constexpr explicit _Uninitialized_backout(_NoThrowFwdIt _Dest) : _First(_Dest), _Last(_Dest) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00022	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00026	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z ENDP ; std::_Uninitialized_backout<int * *>::_Uninitialized_backout<int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z PROC ; std::_Copy_memmove<int * *,int * *>, COMDAT

; 4153 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 4154 :     auto _FirstPtr              = _To_address(_First);

  00014	48 8d 4c 24 70	 lea	 rcx, QWORD PTR _First$[rsp]
  00019	e8 00 00 00 00	 call	 ??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z ; std::_To_address<int * *>
  0001e	48 89 44 24 20	 mov	 QWORD PTR _FirstPtr$[rsp], rax

; 4155 :     auto _LastPtr               = _To_address(_Last);

  00023	48 8d 4c 24 78	 lea	 rcx, QWORD PTR _Last$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z ; std::_To_address<int * *>
  0002d	48 89 44 24 28	 mov	 QWORD PTR _LastPtr$[rsp], rax

; 4156 :     auto _DestPtr               = _To_address(_Dest);

  00032	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _Dest$[rsp]
  0003a	e8 00 00 00 00	 call	 ??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z ; std::_To_address<int * *>
  0003f	48 89 44 24 30	 mov	 QWORD PTR _DestPtr$[rsp], rax

; 4157 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR _FirstPtr$[rsp]
  00049	48 89 44 24 38	 mov	 QWORD PTR _First_ch$[rsp], rax

; 4158 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

  0004e	48 8b 44 24 28	 mov	 rax, QWORD PTR _LastPtr$[rsp]
  00053	48 89 44 24 40	 mov	 QWORD PTR _Last_ch$[rsp], rax

; 4159 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR _DestPtr$[rsp]
  0005d	48 89 44 24 48	 mov	 QWORD PTR _Dest_ch$[rsp], rax

; 4160 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00062	48 8b 44 24 38	 mov	 rax, QWORD PTR _First_ch$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Last_ch$[rsp]
  0006c	48 2b c8	 sub	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 44 24 50	 mov	 QWORD PTR _Count$[rsp], rax

; 4161 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00077	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  0007c	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First_ch$[rsp]
  00081	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00086	e8 00 00 00 00	 call	 memmove

; 4162 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4163 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0008b	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00090	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00095	48 03 c8	 add	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx

; 4164 :     } else {
; 4165 :         return _Dest + (_LastPtr - _FirstPtr);
; 4166 :     }
; 4167 : }

  0009b	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z ENDP ; std::_Copy_memmove<int * *,int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z
_TEXT	SEGMENT
_First$ = 64
_Last$ = 72
??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z PROC		; std::_Verify_range<int *>, COMDAT

; 1285 : constexpr void _Verify_range(const _Ty* const _First, const _Ty* const _Last) noexcept {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
$LN4@Verify_ran:

; 1286 :     // special case range verification for pointers
; 1287 :     _STL_VERIFY(_First <= _Last, "transposed pointer range");

  0000f	48 8b 44 24 48	 mov	 rax, QWORD PTR _Last$[rsp]
  00014	48 39 44 24 40	 cmp	 QWORD PTR _First$[rsp], rax
  00019	77 02		 ja	 SHORT $LN7@Verify_ran
  0001b	eb 6b		 jmp	 SHORT $LN9@Verify_ran
$LN7@Verify_ran:
  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  00024	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00030	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00035	45 33 c9	 xor	 r9d, r9d
  00038	41 b8 07 05 00
	00		 mov	 r8d, 1287		; 00000507H
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00045	b9 02 00 00 00	 mov	 ecx, 2
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00050	83 f8 01	 cmp	 eax, 1
  00053	75 03		 jne	 SHORT $LN11@Verify_ran
  00055	cc		 int	 3
  00056	33 c0		 xor	 eax, eax
$LN11@Verify_ran:
  00058	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00061	41 b9 07 05 00
	00		 mov	 r9d, 1287		; 00000507H
  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 95		 jne	 SHORT $LN7@Verify_ran
$LN9@Verify_ran:
  00088	33 c0		 xor	 eax, eax
  0008a	85 c0		 test	 eax, eax
  0008c	75 81		 jne	 SHORT $LN4@Verify_ran

; 1288 : }

  0008e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00092	5f		 pop	 rdi
  00093	c3		 ret	 0
??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z ENDP		; std::_Verify_range<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z PROC	; std::_Zero_range<int * *>, COMDAT

; 1786 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1787 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

  0000f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _First$[rsp]
  00014	e8 00 00 00 00	 call	 ??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z ; std::_To_address<int * *>
  00019	48 89 44 24 20	 mov	 QWORD PTR _First_ch$[rsp], rax

; 1788 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

  0001e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Last$[rsp]
  00023	e8 00 00 00 00	 call	 ??$_To_address@PEAPEAH@std@@YA?A_PAEBQEAPEAH@Z ; std::_To_address<int * *>
  00028	48 89 44 24 28	 mov	 QWORD PTR _Last_ch$[rsp], rax

; 1789 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR _First_ch$[rsp]
  00032	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Last_ch$[rsp]
  00037	48 2b c8	 sub	 rcx, rax
  0003a	48 8b c1	 mov	 rax, rcx
  0003d	4c 8b c0	 mov	 r8, rax
  00040	33 d2		 xor	 edx, edx
  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _First_ch$[rsp]
  00047	e8 00 00 00 00	 call	 memset

; 1790 :     return _Last;

  0004c	48 8b 44 24 48	 mov	 rax, QWORD PTR _Last$[rsp]

; 1791 : }

  00051	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00055	5f		 pop	 rdi
  00056	c3		 ret	 0
??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z ENDP	; std::_Zero_range<int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z
_TEXT	SEGMENT
_It$ = 48
_UIt$ = 56
??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z PROC ; std::_Seek_wrapped<int * *,int * *>, COMDAT

; 1427 : constexpr void _Seek_wrapped(_Iter& _It, _UIter&& _UIt) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1428 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1429 :         _It._Seek_to(_STD forward<_UIter>(_UIt));
; 1430 :     } else {
; 1431 :         _It = _STD forward<_UIter>(_UIt);

  0000f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _UIt$[rsp]
  00014	e8 00 00 00 00	 call	 ??$forward@PEAPEAH@std@@YA$$QEAPEAPEAHAEAPEAPEAH@Z ; std::forward<int * *>
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _It$[rsp]
  0001e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00021	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1432 :     }
; 1433 : }

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
  00029	c3		 ret	 0
??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z ENDP ; std::_Seek_wrapped<int * *,int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z
_TEXT	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Last$ = 104
_Dest$ = 112
??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z PROC ; std::_Uninitialized_copy_unchecked<int * *,int * *>, COMDAT

; 1660 :     _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00019	b9 0c 00 00 00	 mov	 ecx, 12
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 1661 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1662 :     if constexpr (_Ptr_copy_cat<_InIt, _NoThrowFwdIt>::_Really_trivial) {
; 1663 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1664 :         if (!_STD is_constant_evaluated())
; 1665 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1666 :         {
; 1667 :             return _Copy_memmove(_First, _Last, _Dest);

  0002a	4c 8b 44 24 70	 mov	 r8, QWORD PTR _Dest$[rsp]
  0002f	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Last$[rsp]
  00034	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _First$[rsp]
  00039	e8 00 00 00 00	 call	 ??$_Copy_memmove@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAH00@Z ; std::_Copy_memmove<int * *,int * *>
  0003e	eb 5a		 jmp	 SHORT $LN1@Uninitiali

; 1668 :         }
; 1669 :     }
; 1670 : 
; 1671 :     _Uninitialized_backout<_NoThrowFwdIt> _Backout{_Dest};

  00040	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Dest$[rsp]
  00045	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Backout$[rsp]
  0004a	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout@PEAPEAH@std@@QEAA@PEAPEAH@Z ; std::_Uninitialized_backout<int * *>::_Uninitialized_backout<int * *>

; 1672 :     for (; _First != _Last; ++_First) {

  0004f	eb 0e		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR _First$[rsp]
  00056	48 83 c0 08	 add	 rax, 8
  0005a	48 89 44 24 60	 mov	 QWORD PTR _First$[rsp], rax
$LN4@Uninitiali:
  0005f	48 8b 44 24 68	 mov	 rax, QWORD PTR _Last$[rsp]
  00064	48 39 44 24 60	 cmp	 QWORD PTR _First$[rsp], rax
  00069	74 11		 je	 SHORT $LN3@Uninitiali

; 1673 :         _Backout._Emplace_back(*_First);

  0006b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _First$[rsp]
  00070	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Backout$[rsp]
  00075	e8 00 00 00 00	 call	 ??$_Emplace_back@AEAPEAH@?$_Uninitialized_backout@PEAPEAH@std@@QEAAXAEAPEAH@Z ; std::_Uninitialized_backout<int * *>::_Emplace_back<int * &>

; 1674 :     }

  0007a	eb d5		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1675 : 
; 1676 :     return _Backout._Release();

  0007c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Backout$[rsp]
  00081	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout@PEAPEAH@std@@QEAAPEAPEAHXZ ; std::_Uninitialized_backout<int * *>::_Release
  00086	48 89 44 24 48	 mov	 QWORD PTR $T4[rsp], rax
  0008b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Backout$[rsp]
  00090	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ ; std::_Uninitialized_backout<int * *>::~_Uninitialized_backout<int * *>
  00095	48 8b 44 24 48	 mov	 rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1677 : }

  0009a	48 8b f8	 mov	 rdi, rax
  0009d	48 8b cc	 mov	 rcx, rsp
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z$rtcFrameData
  000a7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ac	48 8b c7	 mov	 rax, rdi
  000af	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000b3	5f		 pop	 rdi
  000b4	c3		 ret	 0
??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z ENDP ; std::_Uninitialized_copy_unchecked<int * *,int * *>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Last$ = 104
_Dest$ = 112
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA PROC ; `std::_Uninitialized_copy_unchecked<int * *,int * *>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR _Backout$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ ; std::_Uninitialized_backout<int * *>::~_Uninitialized_backout<int * *>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA ENDP ; `std::_Uninitialized_copy_unchecked<int * *,int * *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Last$ = 104
_Dest$ = 112
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA PROC ; `std::_Uninitialized_copy_unchecked<int * *,int * *>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 28	 lea	 rcx, QWORD PTR _Backout$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout@PEAPEAH@std@@QEAA@XZ ; std::_Uninitialized_backout<int * *>::~_Uninitialized_backout<int * *>
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z@4HA ENDP ; `std::_Uninitialized_copy_unchecked<int * *,int * *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z
_TEXT	SEGMENT
_It$ = 16
_Off$ = 24
??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z PROC ; std::_Get_unwrapped_n<int * * &,__int64>, COMDAT

; 1392 : _NODISCARD constexpr decltype(auto) _Get_unwrapped_n(_Iter&& _It, const _Diff _Off) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 1393 :     if constexpr (is_pointer_v<decay_t<_Iter>>) {
; 1394 :         return _It + 0;

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR _It$[rsp]
  00010	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1395 :     } else if constexpr (_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>) {
; 1396 :         // ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap
; 1397 :         using _IDiff     = _Iter_diff_t<_Remove_cvref_t<_Iter>>;
; 1398 :         using _CDiff     = common_type_t<_Diff, _IDiff>;
; 1399 :         const auto _COff = static_cast<_CDiff>(_Off);
; 1400 : 
; 1401 :         _STL_ASSERT(_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>)
; 1402 :                         && (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff),
; 1403 :             "integer overflow");
; 1404 :         (void) _COff;
; 1405 : 
; 1406 :         _It._Verify_offset(static_cast<_IDiff>(_Off));
; 1407 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1408 :     } else if constexpr (_Unwrappable_for_unverified_v<_Iter>) {
; 1409 :         // iterator doesn't support offset-based asserts, or offset unknown; defer to unverified unwrap
; 1410 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1411 :     } else {
; 1412 :         // pass through iterator that doesn't participate in checking
; 1413 :         return static_cast<_Iter&&>(_It);
; 1414 :     }
; 1415 : }

  00013	5f		 pop	 rdi
  00014	c3		 ret	 0
??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z ENDP ; std::_Get_unwrapped_n<int * * &,__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z PROC ; std::_Idl_distance<int * *,int * *>, COMDAT

; 1476 : _NODISCARD constexpr auto _Idl_distance(const _Iter& _First, const _Iter& _Last) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 1477 :     // tries to get the distance between _First and _Last if they are random-access iterators
; 1478 :     if constexpr (_Is_random_iter_v<_Iter>) {
; 1479 :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

  0000b	48 8b 44 24 18	 mov	 rax, QWORD PTR _Last$[rsp]
  00010	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _First$[rsp]
  00015	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 2b c1	 sub	 rax, rcx
  0001e	48 c1 f8 03	 sar	 rax, 3

; 1480 :     } else {
; 1481 :         return _Distance_unknown{};
; 1482 :     }
; 1483 : }

  00022	5f		 pop	 rdi
  00023	c3		 ret	 0
??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z ENDP ; std::_Idl_distance<int * *,int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z PROC ; std::_Get_unwrapped<int * * const &>, COMDAT

; 1324 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1325 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1326 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1327 :         return _It + 0;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _It$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1328 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1329 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1330 :     } else {
; 1331 :         return static_cast<_Iter&&>(_It);
; 1332 :     }
; 1333 : }

  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z ENDP ; std::_Get_unwrapped<int * * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z PROC ; std::_Adl_verify_range<int * *,int * *>, COMDAT

; 1307 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1308 :     // check that [_First, _Last) forms an iterator range
; 1309 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1310 :         _Verify_range(_First, _Last);

  0000f	48 8b 44 24 38	 mov	 rax, QWORD PTR _Last$[rsp]
  00014	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR _First$[rsp]
  0001c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001f	e8 00 00 00 00	 call	 ??$_Verify_range@PEAH@std@@YAXQEBQEAH0@Z ; std::_Verify_range<int *>

; 1311 :     }
; 1312 : }

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5f		 pop	 rdi
  00029	c3		 ret	 0
??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z ENDP ; std::_Adl_verify_range<int * *,int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z PROC		; std::_Voidify_iter<int *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _It$[rsp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z ENDP		; std::_Voidify_iter<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 693  :     static _CONSTEXPR20_DYNALLOC void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 694  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 695  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 696  :         if (_STD is_constant_evaluated()) {
; 697  :             _Al.deallocate(_Ptr, _Count);
; 698  :         } else
; 699  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 700  :         {
; 701  :             (void) _Al;
; 702  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00014	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR _Count$[rsp], 16
  0001a	48 8b d0	 mov	 rdx, rax
  0001d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00022	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 703  :         }
; 704  :     }

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$07@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<8>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0000a	c6 44 24 20 01	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000f	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  00019	48 89 44 24 28	 mov	 QWORD PTR _Max_possible$1[rsp], rax

; 64   :         if (_Count > _Max_possible) {

  0001e	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  00028	48 39 44 24 40	 cmp	 QWORD PTR _Count$[rsp], rax
  0002d	76 05		 jbe	 SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  0002f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR _Count$[rsp]
  00039	48 c1 e0 03	 shl	 rax, 3
$LN3@Get_size_o:

; 70   : }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$03@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<4>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0000a	c6 44 24 20 01	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000f	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  00019	48 89 44 24 28	 mov	 QWORD PTR _Max_possible$1[rsp], rax

; 64   :         if (_Count > _Max_possible) {

  0001e	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH
  00028	48 39 44 24 40	 cmp	 QWORD PTR _Count$[rsp], rax
  0002d	76 05		 jbe	 SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  0002f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR _Count$[rsp]
  00039	48 c1 e0 02	 shl	 rax, 2
$LN3@Get_size_o:

; 70   : }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z PROC ; std::_Destroy_range<int * *,int * *>, COMDAT

; 957  : _CONSTEXPR20_DYNALLOC void _Destroy_range(_NoThrowFwdIt _First, const _NoThrowSentinel _Last) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 958  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 959  :     if constexpr (!is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 960  :         for (; _First != _Last; ++_First) {
; 961  :             _Destroy_in_place(*_First);
; 962  :         }
; 963  :     }
; 964  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z ENDP ; std::_Destroy_range<int * *,int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z
_TEXT	SEGMENT
_UFirst$ = 48
_Count$ = 56
??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<int * *,unsigned __int64>, COMDAT

; 1818 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1819 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1820 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1821 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1822 :         return _Zero_range(_UFirst, _UFirst + _Count);

  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR _UFirst$[rsp]
  00014	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00019	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  0001d	48 8b d0	 mov	 rdx, rax
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _UFirst$[rsp]
  00025	e8 00 00 00 00	 call	 ??$_Zero_range@PEAPEAH@std@@YAPEAPEAHQEAPEAH0@Z ; std::_Zero_range<int * *>

; 1823 :     } else {
; 1824 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1825 :         for (; 0 < _Count; --_Count) {
; 1826 :             _Backout._Emplace_back();
; 1827 :         }
; 1828 : 
; 1829 :         return _Backout._Release();
; 1830 :     }
; 1831 : }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<int * *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z
_TEXT	SEGMENT
_UFirst$ = 40
_ULast$ = 72
_UDest$ = 88
$T5 = 96
_First$ = 128
_Last$ = 136
_Dest$ = 144
??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z PROC ; std::uninitialized_copy<int * *,int * *>, COMDAT

; 1680 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00014	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00019	b9 14 00 00 00	 mov	 ecx, 20
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 1681 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1682 :     _Adl_verify_range(_First, _Last);

  0002d	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR _Last$[rsp]
  00035	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _First$[rsp]
  0003d	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PEAPEAHPEAPEAH@std@@YAXAEBQEAPEAH0@Z ; std::_Adl_verify_range<int * *,int * *>

; 1683 :     auto _UFirst      = _Get_unwrapped(_First);

  00042	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _First$[rsp]
  0004a	e8 00 00 00 00	 call	 ??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z ; std::_Get_unwrapped<int * * const &>
  0004f	48 89 44 24 28	 mov	 QWORD PTR _UFirst$[rsp], rax

; 1684 :     const auto _ULast = _Get_unwrapped(_Last);

  00054	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Last$[rsp]
  0005c	e8 00 00 00 00	 call	 ??$_Get_unwrapped@AEBQEAPEAH@std@@YA?A_TAEBQEAPEAH@Z ; std::_Get_unwrapped<int * * const &>
  00061	48 89 44 24 48	 mov	 QWORD PTR _ULast$[rsp], rax

; 1685 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00066	48 8d 54 24 48	 lea	 rdx, QWORD PTR _ULast$[rsp]
  0006b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _UFirst$[rsp]
  00070	e8 00 00 00 00	 call	 ??$_Idl_distance@PEAPEAHPEAPEAH@std@@YA?A_PAEBQEAPEAH0@Z ; std::_Idl_distance<int * *,int * *>
  00075	48 8b d0	 mov	 rdx, rax
  00078	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Dest$[rsp]
  00080	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@AEAPEAPEAH_J@std@@YA?A_TAEAPEAPEAH_J@Z ; std::_Get_unwrapped_n<int * * &,__int64>
  00085	48 89 44 24 58	 mov	 QWORD PTR _UDest$[rsp], rax

; 1686 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));

  0008a	4c 8b 44 24 58	 mov	 r8, QWORD PTR _UDest$[rsp]
  0008f	48 8b 54 24 48	 mov	 rdx, QWORD PTR _ULast$[rsp]
  00094	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _UFirst$[rsp]
  00099	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_unchecked@PEAPEAHPEAPEAH@std@@YAPEAPEAHPEAPEAHQEAPEAH0@Z ; std::_Uninitialized_copy_unchecked<int * *,int * *>
  0009e	48 89 44 24 60	 mov	 QWORD PTR $T5[rsp], rax
  000a3	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T5[rsp]
  000a8	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Dest$[rsp]
  000b0	e8 00 00 00 00	 call	 ??$_Seek_wrapped@PEAPEAHPEAPEAH@std@@YAXAEAPEAPEAH$$QEAPEAPEAH@Z ; std::_Seek_wrapped<int * *,int * *>

; 1687 :     return _Dest;

  000b5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Dest$[rsp]

; 1688 : }

  000bd	48 8b f8	 mov	 rdi, rax
  000c0	48 8b cc	 mov	 rcx, rsp
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z$rtcFrameData
  000ca	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000cf	48 8b c7	 mov	 rax, rdi
  000d2	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z ENDP ; std::uninitialized_copy<int * *,int * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0000a	48 8b 44 24 60	 mov	 rax, QWORD PTR _Bytes$[rsp]
  0000f	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00013	48 89 44 24 30	 mov	 QWORD PTR _Block_size$[rsp], rax

; 137  :     if (_Block_size <= _Bytes) {

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _Bytes$[rsp]
  0001d	48 39 44 24 30	 cmp	 QWORD PTR _Block_size$[rsp], rax
  00022	77 05		 ja	 SHORT $LN8@Allocate_m

; 138  :         _Throw_bad_array_new_length(); // add overflow

  00024	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Block_size$[rsp]
  0002e	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00033	48 89 44 24 38	 mov	 QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00038	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Ptr_container$[rsp], 0
  0003e	74 02		 je	 SHORT $LN9@Allocate_m
  00040	eb 6b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG48087
  00049	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG48088
  00055	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005a	45 33 c9	 xor	 r9d, r9d
  0005d	41 b8 8e 00 00
	00		 mov	 r8d, 142		; 0000008eH
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG48089
  0006a	b9 02 00 00 00	 mov	 ecx, 2
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00075	83 f8 01	 cmp	 eax, 1
  00078	75 03		 jne	 SHORT $LN12@Allocate_m
  0007a	cc		 int	 3
  0007b	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  0007d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00086	41 b9 8e 00 00
	00		 mov	 r9d, 142		; 0000008eH
  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG48090
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG48091
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG48092
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000a7	33 c0		 xor	 eax, eax
  000a9	85 c0		 test	 eax, eax
  000ab	75 95		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000ad	33 c0		 xor	 eax, eax
  000af	85 c0		 test	 eax, eax
  000b1	75 85		 jne	 SHORT $LN4@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000b3	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr_container$[rsp]
  000b8	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000bc	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000c0	48 89 44 24 40	 mov	 QWORD PTR _Ptr$[rsp], rax

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000c5	b8 08 00 00 00	 mov	 eax, 8
  000ca	48 6b c0 ff	 imul	 rax, rax, -1
  000ce	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000d3	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr_container$[rsp]
  000d8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000dc	b8 08 00 00 00	 mov	 eax, 8
  000e1	48 6b c0 fe	 imul	 rax, rax, -2
  000e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000ea	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  000f4	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 148  : #endif // _DEBUG
; 149  :     return _Ptr;

  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 150  : }

  000fd	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00101	5f		 pop	 rdi
  00102	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z PROC	; std::_Voidify_iter<char * *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _It$[rsp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ENDP	; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 275  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 708  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 709  :         if (_STD is_constant_evaluated()) {
; 710  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 711  :         } else
; 712  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 713  :         {
; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00014	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00019	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z ; std::_Voidify_iter<int *>
  0001e	48 8b d0	 mov	 rdx, rax
  00021	b9 04 00 00 00	 mov	 ecx, 4
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002b	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00030	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00035	e8 00 00 00 00	 call	 ??$forward@AEBH@std@@YAAEBHAEBH@Z ; std::forward<int const &>
  0003a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003f	8b 00		 mov	 eax, DWORD PTR [rax]
  00041	89 01		 mov	 DWORD PTR [rcx], eax

; 715  :         }
; 716  :     }

  00043	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@AEBH@std@@YAAEBHAEBH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBH@std@@YAAEBHAEBH@Z PROC			; std::forward<int const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@AEBH@std@@YAAEBHAEBH@Z ENDP			; std::forward<int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _It$[rsp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 275  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 985  : _CONSTEXPR20_DYNALLOC void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 986  :     // deallocate a plain pointer using an allocator
; 987  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 988  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 989  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  0000f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00015	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0001f	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  00024	90		 npad	 1

; 990  :     } else {
; 991  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 992  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 993  :     }
; 994  : }

  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
_TEXT	SEGMENT
_State$ = 32
_Pad$ = 40
_Ok$ = 56
$T4 = 84
$T5 = 88
$T6 = 92
$T7 = 96
$T8 = 104
tv136 = 112
tv290 = 116
tv291 = 120
tv292 = 128
tv293 = 136
tv294 = 144
tv295 = 152
tv296 = 160
tv297 = 168
_Ostr$ = 192
_Data$ = 200
_Size$ = 208
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>, COMDAT

; 501  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]

; 502  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 503  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 504  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  00030	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 505  : 
; 506  :     _SizeT _Pad;
; 507  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  00038	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00040	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00043	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00047	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0004f	48 03 c8	 add	 rcx, rax
  00052	48 8b c1	 mov	 rax, rcx
  00055	48 8b c8	 mov	 rcx, rax
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0005e	48 85 c0	 test	 rax, rax
  00061	7e 30		 jle	 SHORT $LN10@Insert_str
  00063	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0006b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00072	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0007a	48 03 c8	 add	 rcx, rax
  0007d	48 8b c1	 mov	 rax, rcx
  00080	48 8b c8	 mov	 rcx, rax
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00089	48 3b 84 24 d0
	00 00 00	 cmp	 rax, QWORD PTR _Size$[rsp]
  00091	77 0b		 ja	 SHORT $LN8@Insert_str
$LN10@Insert_str:

; 508  :         _Pad = 0;

  00093	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _Pad$[rsp], 0

; 509  :     } else {

  0009c	eb 33		 jmp	 SHORT $LN9@Insert_str
$LN8@Insert_str:

; 510  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  0009e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ad	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000b5	48 03 c8	 add	 rcx, rax
  000b8	48 8b c1	 mov	 rax, rcx
  000bb	48 8b c8	 mov	 rcx, rax
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000c4	48 2b 84 24 d0
	00 00 00	 sub	 rax, QWORD PTR _Size$[rsp]
  000cc	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN9@Insert_str:

; 511  :     }
; 512  : 
; 513  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  000d1	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  000d9	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000de	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000e3	90		 npad	 1

; 514  : 
; 515  :     if (!_Ok) {

  000e4	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000e9	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000ee	0f b6 c0	 movzx	 eax, al
  000f1	85 c0		 test	 eax, eax
  000f3	75 10		 jne	 SHORT $LN11@Insert_str

; 516  :         _State |= _Ostr_t::badbit;

  000f5	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  000f9	83 c8 04	 or	 eax, 4
  000fc	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 517  :     } else { // state okay, insert characters

  00100	e9 76 02 00 00	 jmp	 $LN12@Insert_str
$LN11@Insert_str:

; 518  :         _TRY_IO_BEGIN
; 519  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00105	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0010d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00110	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00114	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0011c	48 03 c8	 add	 rcx, rax
  0011f	48 8b c1	 mov	 rax, rcx
  00122	48 8b c8	 mov	 rcx, rax
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0012b	89 44 24 70	 mov	 DWORD PTR tv136[rsp], eax
  0012f	8b 44 24 70	 mov	 eax, DWORD PTR tv136[rsp]
  00133	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00138	83 f8 40	 cmp	 eax, 64			; 00000040H
  0013b	0f 84 c3 00 00
	00		 je	 $LN14@Insert_str

; 520  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00141	eb 0d		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  00143	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  00148	48 ff c8	 dec	 rax
  0014b	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN4@Insert_str:
  00150	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00156	0f 86 a8 00 00
	00		 jbe	 $LN14@Insert_str

; 521  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0015c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00164	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00167	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0016b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00173	48 03 c8	 add	 rcx, rax
  00176	48 8b c1	 mov	 rax, rcx
  00179	48 8b c8	 mov	 rcx, rax
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00182	88 44 24 74	 mov	 BYTE PTR tv290[rsp], al
  00186	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0018e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00191	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00195	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0019d	48 03 c8	 add	 rcx, rax
  001a0	48 8b c1	 mov	 rax, rcx
  001a3	48 8b c8	 mov	 rcx, rax
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001ac	48 89 44 24 78	 mov	 QWORD PTR tv291[rsp], rax
  001b1	0f b6 54 24 74	 movzx	 edx, BYTE PTR tv290[rsp]
  001b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv291[rsp]
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001c1	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv292[rsp], eax
  001c8	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv292[rsp]
  001cf	89 44 24 54	 mov	 DWORD PTR $T4[rsp], eax
  001d3	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001d8	89 44 24 58	 mov	 DWORD PTR $T5[rsp], eax
  001dc	48 8d 54 24 54	 lea	 rdx, QWORD PTR $T4[rsp]
  001e1	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  001e6	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001eb	0f b6 c0	 movzx	 eax, al
  001ee	85 c0		 test	 eax, eax
  001f0	74 0d		 je	 SHORT $LN15@Insert_str

; 522  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  001f2	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  001f6	83 c8 04	 or	 eax, 4
  001f9	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 523  :                     break;

  001fd	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 524  :                 }
; 525  :             }

  001ff	e9 3f ff ff ff	 jmp	 $LN2@Insert_str
$LN14@Insert_str:

; 526  :         }
; 527  : 
; 528  :         if (_State == _Ostr_t::goodbit
; 529  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00204	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00209	75 76		 jne	 SHORT $LN16@Insert_str
  0020b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00213	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00216	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0021a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00222	48 03 c8	 add	 rcx, rax
  00225	48 8b c1	 mov	 rax, rcx
  00228	48 8b c8	 mov	 rcx, rax
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00231	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
  00239	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR _Size$[rsp]
  00241	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR _Data$[rsp]
  00249	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv293[rsp]
  00251	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00257	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv294[rsp], rax
  0025f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR _Size$[rsp]
  00267	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR tv294[rsp], rax
  0026f	74 10		 je	 SHORT $LN16@Insert_str

; 530  :             _State |= _Ostr_t::badbit;

  00271	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00275	83 c8 04	 or	 eax, 4
  00278	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 531  :         } else {

  0027c	e9 cf 00 00 00	 jmp	 $LN17@Insert_str
$LN16@Insert_str:

; 532  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00281	eb 0d		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  00283	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  00288	48 ff c8	 dec	 rax
  0028b	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN7@Insert_str:
  00290	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00296	0f 86 b4 00 00
	00		 jbe	 $LN17@Insert_str

; 533  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0029c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a7	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002ab	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002b3	48 03 c8	 add	 rcx, rax
  002b6	48 8b c1	 mov	 rax, rcx
  002b9	48 8b c8	 mov	 rcx, rax
  002bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002c2	88 84 24 98 00
	00 00		 mov	 BYTE PTR tv295[rsp], al
  002c9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002d1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d8	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002e0	48 03 c8	 add	 rcx, rax
  002e3	48 8b c1	 mov	 rax, rcx
  002e6	48 8b c8	 mov	 rcx, rax
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002ef	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv296[rsp], rax
  002f7	0f b6 94 24 98
	00 00 00	 movzx	 edx, BYTE PTR tv295[rsp]
  002ff	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv296[rsp]
  00307	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0030d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv297[rsp], eax
  00314	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv297[rsp]
  0031b	89 44 24 5c	 mov	 DWORD PTR $T6[rsp], eax
  0031f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00324	89 44 24 60	 mov	 DWORD PTR $T7[rsp], eax
  00328	48 8d 54 24 5c	 lea	 rdx, QWORD PTR $T6[rsp]
  0032d	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T7[rsp]
  00332	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00337	0f b6 c0	 movzx	 eax, al
  0033a	85 c0		 test	 eax, eax
  0033c	74 0d		 je	 SHORT $LN18@Insert_str

; 534  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  0033e	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00342	83 c8 04	 or	 eax, 4
  00345	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 535  :                     break;

  00349	eb 05		 jmp	 SHORT $LN17@Insert_str
$LN18@Insert_str:

; 536  :                 }
; 537  :             }

  0034b	e9 33 ff ff ff	 jmp	 $LN5@Insert_str
$LN17@Insert_str:

; 538  :         }
; 539  : 
; 540  :         _Ostr.width(0);

  00350	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00358	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0035b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0035f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00367	48 03 c8	 add	 rcx, rax
  0036a	48 8b c1	 mov	 rax, rcx
  0036d	33 d2		 xor	 edx, edx
  0036f	48 8b c8	 mov	 rcx, rax
  00372	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00378	90		 npad	 1
  00379	eb 00		 jmp	 SHORT $LN12@Insert_str
$LN24@Insert_str:
$LN12@Insert_str:

; 541  :         _CATCH_IO_(_Ostr_t, _Ostr)
; 542  :     }
; 543  : 
; 544  :     _Ostr.setstate(_State);

  0037b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00383	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00386	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0038a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	45 33 c0	 xor	 r8d, r8d
  0039b	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  0039f	48 8b c8	 mov	 rcx, rax
  003a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 545  :     return _Ostr;

  003a8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  003b0	48 89 44 24 68	 mov	 QWORD PTR $T8[rsp], rax
  003b5	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Ok$[rsp]
  003ba	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003bf	48 8b 44 24 68	 mov	 rax, QWORD PTR $T8[rsp]

; 546  : }

  003c4	48 8b f8	 mov	 rdi, rax
  003c7	48 8b cc	 mov	 rcx, rsp
  003ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData
  003d1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003d6	48 8b c7	 mov	 rax, rdi
  003d9	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  003e0	5f		 pop	 rdi
  003e1	c3		 ret	 0
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Pad$ = 40
_Ok$ = 56
$T4 = 84
$T5 = 88
$T6 = 92
$T7 = 96
$T8 = 104
tv136 = 112
tv290 = 116
tv291 = 120
tv292 = 128
tv293 = 136
tv294 = 144
tv295 = 152
tv296 = 160
tv297 = 168
_Ostr$ = 192
_Data$ = 200
_Size$ = 208
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00017	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Pad$ = 40
_Ok$ = 56
$T4 = 84
$T5 = 88
$T6 = 92
$T7 = 96
$T8 = 104
tv136 = 112
tv290 = 116
tv291 = 120
tv292 = 128
tv293 = 136
tv294 = 144
tv295 = 152
tv296 = 160
tv297 = 168
_Ostr$ = 192
_Data$ = 200
_Size$ = 208
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 541  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00013	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00021	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	41 b0 01	 mov	 r8b, 1
  00031	ba 04 00 00 00	 mov	 edx, 4
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0003f	90		 npad	 1
  00040	48 8d 05 00 00
	00 00		 lea	 rax, $LN24@catch$1
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
  0004e	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Pad$ = 40
_Ok$ = 56
$T4 = 84
$T5 = 88
$T6 = 92
$T7 = 96
$T8 = 104
tv136 = 112
tv290 = 116
tv291 = 120
tv292 = 128
tv293 = 136
tv294 = 144
tv295 = 152
tv296 = 160
tv297 = 168
_Ostr$ = 192
_Data$ = 200
_Size$ = 208
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 38	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00017	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Pad$ = 40
_Ok$ = 56
$T4 = 84
$T5 = 88
$T6 = 92
$T7 = 96
$T8 = 104
tv136 = 112
tv290 = 116
tv291 = 120
tv292 = 128
tv293 = 136
tv294 = 144
tv295 = 152
tv296 = 160
tv297 = 168
_Ostr$ = 192
_Data$ = 200
_Size$ = 208
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 541  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00013	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00021	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	41 b0 01	 mov	 r8b, 1
  00031	ba 04 00 00 00	 mov	 edx, 4
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0003f	90		 npad	 1
  00040	48 8d 05 00 00
	00 00		 lea	 rax, $LN24@catch$1
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
  0004e	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 0
_Count$ = 32
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0000a	c6 04 24 00	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 0

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 64   :         if (_Count > _Max_possible) {
; 65   :             _Throw_bad_array_new_length(); // multiply overflow
; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Count$[rsp]

; 70   : }

  00013	48 83 c4 10	 add	 rsp, 16
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 251  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {
; 255  :         ::operator delete(_Ptr);
; 256  :     } else
; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	48 81 7c 24 38
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  00018	72 0f		 jb	 SHORT $LN2@Deallocate

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0001a	48 8d 54 24 38	 lea	 rdx, QWORD PTR _Bytes$[rsp]
  0001f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Ptr$[rsp]
  00024	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

  00029	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Bytes$[rsp]
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00033	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00038	90		 npad	 1

; 265  :     }
; 266  : }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_Deque_val<std::_Deque_simple_types<int> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 275  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_Deque_val<std::_Deque_simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 230  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())
; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000a	48 81 7c 24 30
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  00013	72 0c		 jb	 SHORT $LN2@Allocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0001a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0001f	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00021	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Bytes$[rsp], 0
  00027	74 0c		 je	 SHORT $LN3@Allocate

; 244  :         return _Traits::_Allocate(_Bytes);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0002e	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00033	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00035	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 248  : }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0000a	c6 44 24 20 01	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000f	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00019	48 89 44 24 28	 mov	 QWORD PTR _Max_possible$1[rsp], rax

; 64   :         if (_Count > _Max_possible) {

  0001e	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00028	48 39 44 24 40	 cmp	 QWORD PTR _Count$[rsp], rax
  0002d	76 05		 jbe	 SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  0002f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00034	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 70   : }

  0003a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 42   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 43   :     // return larger of _Left and _Right
; 44   :     return _Left < _Right ? _Right : _Left;

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00014	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00019	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0001f	73 0c		 jae	 SHORT $LN3@max
  00021	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00026	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
  0002b	eb 0a		 jmp	 SHORT $LN4@max
$LN3@max:
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00032	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
$LN4@max:
  00037	48 8b 44 24 08	 mov	 rax, QWORD PTR tv65[rsp]
  0003c	48 89 04 24	 mov	 QWORD PTR $T1[rsp], rax
  00040	48 8b 04 24	 mov	 rax, QWORD PTR $T1[rsp]

; 45   : }

  00044	48 83 c4 10	 add	 rsp, 16
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 289  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 290  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0000f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00014	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ; std::_Voidify_iter<char * *>
  00021	48 8b d0	 mov	 rdx, rax
  00024	b9 08 00 00 00	 mov	 ecx, 8
  00029	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002e	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00033	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00038	e8 00 00 00 00	 call	 ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ; std::forward<char * const &>
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax

; 159  :     }
; 160  : }

  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
_TEXT	SEGMENT
_Old_capacity$ = 32
_New_capacity$ = 40
_Al$ = 48
_New_ptr$ = 72
this$ = 112
_New_size$ = 120
_Fn$ = 128
<_Args_0>$ = 136
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>, COMDAT

; 4505 :     _CONSTEXPR20_CONTAINER basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001e	b9 10 00 00 00	 mov	 ecx, 16
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 4506 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4507 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4508 :         if (_New_size > max_size()) {

  0002f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00034	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00039	48 39 44 24 78	 cmp	 QWORD PTR _New_size$[rsp], rax
  0003e	76 05		 jbe	 SHORT $LN2@Reallocate

; 4509 :             _Xlen_string(); // result too long

  00040	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4510 :         }
; 4511 : 
; 4512 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00045	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0004a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004e	48 89 44 24 20	 mov	 QWORD PTR _Old_capacity$[rsp], rax

; 4513 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00053	48 8b 54 24 78	 mov	 rdx, QWORD PTR _New_size$[rsp]
  00058	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0005d	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00062	48 89 44 24 28	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 4514 :         auto& _Al                     = _Getal();

  00067	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00071	48 89 44 24 30	 mov	 QWORD PTR _Al$[rsp], rax

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00076	48 8b 44 24 28	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  0007b	48 ff c0	 inc	 rax
  0007e	48 8b d0	 mov	 rdx, rax
  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00086	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  0008b	48 89 44 24 48	 mov	 QWORD PTR _New_ptr$[rsp], rax

; 4516 : 
; 4517 : #ifdef __cpp_lib_constexpr_string
; 4518 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4519 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4520 :         }
; 4521 : #endif // __cpp_lib_constexpr_string
; 4522 :         _Mypair._Myval2._Orphan_all();

  00090	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00095	48 8b c8	 mov	 rcx, rax
  00098	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  0009d	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000a2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _New_size$[rsp]
  000a7	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ab	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000b0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  000b5	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 4525 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000be	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000c3	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR <_Args_0>$[rsp]
  000cb	4c 8b 44 24 78	 mov	 r8, QWORD PTR _New_size$[rsp]
  000d0	48 8b d0	 mov	 rdx, rax
  000d3	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _Fn$[rsp]
  000db	e8 00 00 00 00	 call	 ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000e0	48 83 7c 24 20
	10		 cmp	 QWORD PTR _Old_capacity$[rsp], 16
  000e6	72 2e		 jb	 SHORT $LN3@Reallocate

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e8	48 8b 44 24 20	 mov	 rax, QWORD PTR _Old_capacity$[rsp]
  000ed	48 ff c0	 inc	 rax
  000f0	4c 8b c0	 mov	 r8, rax
  000f3	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000f8	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000fc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00101	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4528 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00106	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0010b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00110	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 4529 :         } else {

  00114	eb 16		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4530 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00116	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0011b	48 83 c0 08	 add	 rax, 8
  0011f	48 8d 54 24 48	 lea	 rdx, QWORD PTR _New_ptr$[rsp]
  00124	48 8b c8	 mov	 rcx, rax
  00127	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4531 :         }
; 4532 : 
; 4533 :         return *this;

  0012c	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4534 :     }

  00131	48 8b f8	 mov	 rdi, rax
  00134	48 8b cc	 mov	 rcx, rsp
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData
  0013e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00143	48 8b c7	 mov	 rax, rdi
  00146	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0014a	5f		 pop	 rdi
  0014b	c3		 ret	 0
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Count$ = 80
_Ptr$ = 88
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z PROC ; <lambda_66f57f934f28d61049862f64df852ff0>::operator(), COMDAT

; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3257 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  00019	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  0001e	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00028	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0002d	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00037	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  0003c	48 03 c8	 add	 rcx, rax
  0003f	48 8b c1	 mov	 rax, rcx
  00042	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3259 :             },

  0004f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ENDP ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 16
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 307  : _CONSTEXPR20_DYNALLOC void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 48
__param0$ = 56
__param1$ = 64
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >, COMDAT
$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	4c 8b 44 24 40	 mov	 r8, QWORD PTR __param1$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR __param0$[rsp]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ
_TEXT	SEGMENT
this$ = 48
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*, COMDAT

; 168  :     _NODISCARD reference operator*() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 169  :         return const_cast<reference>(_Mybase::operator*());

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*

; 170  :     }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ
_TEXT	SEGMENT
_Block$ = 32
_Off$ = 40
this$ = 64
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*, COMDAT

; 46   :     _NODISCARD reference operator*() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 47   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001b	e8 00 00 00 00	 call	 ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<int> >::_Getblock
  00020	48 89 44 24 20	 mov	 QWORD PTR _Block$[rsp], rax

; 48   :         _Size_type _Off   = _Myoff % _Block_size;

  00025	33 d2		 xor	 edx, edx
  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	48 f7 f1	 div	 rcx
  00038	48 8b c2	 mov	 rax, rdx
  0003b	48 89 44 24 28	 mov	 QWORD PTR _Off$[rsp], rax

; 49   :         return _Mycont->_Map[_Block][_Off];

  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00048	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Block$[rsp]
  00051	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00055	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Off$[rsp]
  0005a	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]

; 50   :     }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEBHXZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Off$ = 24
_Pdeque$ = 32
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >, COMDAT

; 44   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pdeque$[rsp]
  0001a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Off$[rsp]
  00027	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0002b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
_TEXT	SEGMENT
__formal$ = 16
_Ptr$ = 24
??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::destroy<int>, COMDAT

; 719  :     static _CONSTEXPR20_DYNALLOC void destroy(_Alloc&, _Uty* const _Ptr) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 720  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 721  :         _STD destroy_at(_Ptr);
; 722  : #else // __cpp_lib_constexpr_dynamic_alloc
; 723  :         _Ptr->~_Uty();
; 724  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 725  :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::destroy<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$_Unfancy@H@std@@YAPEAHPEAH@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@H@std@@YAPEAHPEAH@Z PROC			; std::_Unfancy<int>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 289  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 290  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Unfancy@H@std@@YAPEAHPEAH@Z ENDP			; std::_Unfancy<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z
_TEXT	SEGMENT
_Newoff$ = 32
_Block$ = 40
tv65 = 48
tv72 = 56
tv86 = 64
tv89 = 72
tv137 = 80
tv145 = 88
tv167 = 96
tv148 = 104
tv163 = 112
this$ = 144
<_Vals_0>$ = 152
??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z PROC ; std::deque<int,std::allocator<int> >::_Emplace_back_internal<int const &>, COMDAT

; 1112 :     void _Emplace_back_internal(_Tys&&... _Vals) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H

; 1113 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00012	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0001a	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  0001f	48 89 44 24 30	 mov	 QWORD PTR tv65[rsp], rax
  00024	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  00031	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv65[rsp]
  00036	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00039	48 03 08	 add	 rcx, QWORD PTR [rax]
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	33 d2		 xor	 edx, edx
  00041	b9 04 00 00 00	 mov	 ecx, 4
  00046	48 f7 f1	 div	 rcx
  00049	48 8b c2	 mov	 rax, rdx
  0004c	48 85 c0	 test	 rax, rax
  0004f	75 4c		 jne	 SHORT $LN2@Emplace_ba
  00051	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00059	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  0005e	48 89 44 24 38	 mov	 QWORD PTR tv72[rsp], rax
  00063	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  00070	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00073	48 83 c0 04	 add	 rax, 4
  00077	33 d2		 xor	 edx, edx
  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	48 f7 f1	 div	 rcx
  00081	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv72[rsp]
  00086	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00089	77 12		 ja	 SHORT $LN2@Emplace_ba

; 1114 :             _Growmap(1);

  0008b	ba 01 00 00 00	 mov	 edx, 1
  00090	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00098	e8 00 00 00 00	 call	 ?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z ; std::deque<int,std::allocator<int> >::_Growmap
$LN2@Emplace_ba:

; 1115 :         }
; 1116 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  0009d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a5	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  000aa	48 89 44 24 40	 mov	 QWORD PTR tv86[rsp], rax
  000af	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b7	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  000bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bf	48 8d 04 85 ff
	ff ff ff	 lea	 rax, QWORD PTR [rax*4-1]
  000c7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv86[rsp]
  000cc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000cf	48 23 c8	 and	 rcx, rax
  000d2	48 8b c1	 mov	 rax, rcx
  000d5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv86[rsp]
  000da	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1117 :         size_type _Newoff = _Myoff() + _Mysize();

  000dd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e5	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  000ea	48 89 44 24 48	 mov	 QWORD PTR tv89[rsp], rax
  000ef	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f7	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  000fc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv89[rsp]
  00101	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00104	48 03 08	 add	 rcx, QWORD PTR [rax]
  00107	48 8b c1	 mov	 rax, rcx
  0010a	48 89 44 24 20	 mov	 QWORD PTR _Newoff$[rsp], rax

; 1118 :         size_type _Block  = _Getblock(_Newoff);

  0010f	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Newoff$[rsp]
  00114	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0011c	e8 00 00 00 00	 call	 ?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::deque<int,std::allocator<int> >::_Getblock
  00121	48 89 44 24 28	 mov	 QWORD PTR _Block$[rsp], rax

; 1119 :         if (_Map()[_Block] == nullptr) {

  00126	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012e	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00133	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00136	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Block$[rsp]
  0013b	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  00140	75 3d		 jne	 SHORT $LN3@Emplace_ba

; 1120 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00142	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0014a	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  0014f	ba 04 00 00 00	 mov	 edx, 4
  00154	48 8b c8	 mov	 rcx, rax
  00157	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ; std::allocator<int>::allocate
  0015c	48 89 44 24 50	 mov	 QWORD PTR tv137[rsp], rax
  00161	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00169	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  0016e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00171	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Block$[rsp]
  00176	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv137[rsp]
  0017b	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
$LN3@Emplace_ba:

; 1121 :         }
; 1122 : 
; 1123 :         _Alty_traits::construct(

  0017f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR <_Vals_0>$[rsp]
  00187	e8 00 00 00 00	 call	 ??$forward@AEBH@std@@YAAEBHAEBH@Z ; std::forward<int const &>
  0018c	48 89 44 24 58	 mov	 QWORD PTR tv145[rsp], rax
  00191	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00199	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  0019e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a1	48 89 44 24 60	 mov	 QWORD PTR tv167[rsp], rax
  001a6	33 d2		 xor	 edx, edx
  001a8	48 8b 44 24 20	 mov	 rax, QWORD PTR _Newoff$[rsp]
  001ad	b9 04 00 00 00	 mov	 ecx, 4
  001b2	48 f7 f1	 div	 rcx
  001b5	48 8b c2	 mov	 rax, rdx
  001b8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Block$[rsp]
  001bd	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv167[rsp]
  001c2	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  001c6	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  001ca	48 8b c8	 mov	 rcx, rax
  001cd	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  001d2	48 89 44 24 68	 mov	 QWORD PTR tv148[rsp], rax
  001d7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001df	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  001e4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv145[rsp]
  001e9	4c 8b c1	 mov	 r8, rcx
  001ec	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv148[rsp]
  001f1	48 8b d1	 mov	 rdx, rcx
  001f4	48 8b c8	 mov	 rcx, rax
  001f7	e8 00 00 00 00	 call	 ??$construct@HAEBH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAHAEBH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int const &>

; 1124 :             _Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size), _STD forward<_Tys>(_Vals)...);
; 1125 : 
; 1126 :         ++_Mysize();

  001fc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00204	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  00209	48 89 44 24 70	 mov	 QWORD PTR tv163[rsp], rax
  0020e	48 8b 44 24 70	 mov	 rax, QWORD PTR tv163[rsp]
  00213	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00216	48 ff c0	 inc	 rax
  00219	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv163[rsp]
  0021e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1127 :     }

  00221	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00228	5f		 pop	 rdi
  00229	c3		 ret	 0
??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z ENDP ; std::deque<int,std::allocator<int> >::_Emplace_back_internal<int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z
_TEXT	SEGMENT
_Obj$ = 16
??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z PROC	; std::_Destroy_in_place<int *>, COMDAT

; 307  : _CONSTEXPR20_DYNALLOC void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z ENDP	; std::_Destroy_in_place<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z PROC ; std::allocator<int *>::allocator<int *><int>, COMDAT

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z ENDP ; std::allocator<int *>::allocator<int *><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0000f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00014	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
  00021	48 8b d0	 mov	 rdx, rax
  00024	b9 10 00 00 00	 mov	 ecx, 16
  00029	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002e	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00033	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00038	e8 00 00 00 00	 call	 ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
  0003d	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00045	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 159  :     }
; 160  : }

  0004a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 275  :     return __builtin_addressof(_Val);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 289  :     return _Ptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 290  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val1$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1333 :     _CONSTEXPR20_CONTAINER ~_Container_proxy_ptr12() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1334 :         if (_Ptr) {

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00013	74 16		 je	 SHORT $LN2@Container_

; 1335 :             _Delete_plain_internal(_Al, _Ptr);

  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00026	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1336 :         }
; 1337 :     }

  0002b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002f	5f		 pop	 rdi
  00030	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1319 :     _CONSTEXPR20_CONTAINER _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00019	e8 00 00 00 00	 call	 ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00028	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1320 :         // create a new _Container_proxy pointing at _Mycont
; 1321 :         _Ptr = _Unfancy(_Al_.allocate(1));

  0002c	ba 01 00 00 00	 mov	 edx, 1
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al_$[rsp]
  00036	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00048	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1322 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Mycont$[rsp]
  00050	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
  00055	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0005a	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00064	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00067	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1323 :         _Mycont._Myproxy = _Ptr;

  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR _Mycont$[rsp]
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00076	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00079	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1324 :     }

  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00081	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00085	5f		 pop	 rdi
  00086	c3		 ret	 0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

  0000f	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00014	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Left$[rsp]
  00019	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0001f	73 0c		 jae	 SHORT $LN3@min
  00021	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00026	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
  0002b	eb 0a		 jmp	 SHORT $LN4@min
$LN3@min:
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00032	48 89 44 24 08	 mov	 QWORD PTR tv65[rsp], rax
$LN4@min:
  00037	48 8b 44 24 08	 mov	 rax, QWORD PTR tv65[rsp]
  0003c	48 89 04 24	 mov	 QWORD PTR $T1[rsp], rax
  00040	48 8b 04 24	 mov	 rax, QWORD PTR $T1[rsp]

; 69   : }

  00044	48 83 c4 10	 add	 rsp, 16
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 16
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 125  :             return _Ok;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 126  :         }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 32
tv72 = 33
this$ = 64
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0000a	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0000f	0f b6 c0	 movzx	 eax, al
  00012	85 c0		 test	 eax, eax
  00014	75 07		 jne	 SHORT $LN4@sentry
  00016	c6 44 24 21 01	 mov	 BYTE PTR tv72[rsp], 1
  0001b	eb 05		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0001d	c6 44 24 21 00	 mov	 BYTE PTR tv72[rsp], 0
$LN5@sentry:
  00022	0f b6 44 24 21	 movzx	 eax, BYTE PTR tv72[rsp]
  00027	88 44 24 20	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rsp], al

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0002b	0f b6 44 24 20	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rsp]
  00030	85 c0		 test	 eax, eax
  00032	74 0e		 je	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 120  :             }
; 121  :         }

  00042	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0004c	90		 npad	 1
  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  00014	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00019	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0001e	90		 npad	 1

; 93   :             if (!_Ostr.good()) {

  0001f	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00024	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00027	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0002b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00030	48 03 c8	 add	 rcx, rax
  00033	48 8b c1	 mov	 rax, rcx
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0003f	0f b6 c0	 movzx	 eax, al
  00042	85 c0		 test	 eax, eax
  00044	75 0b		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004b	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 95   :                 return;

  0004f	eb 77		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00051	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00062	48 03 c8	 add	 rcx, rax
  00065	48 8b c1	 mov	 rax, rcx
  00068	48 8b c8	 mov	 rcx, rax
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00071	48 89 44 24 20	 mov	 QWORD PTR _Tied$[rsp], rax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  00076	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Tied$[rsp], 0
  0007c	74 0c		 je	 SHORT $LN4@sentry
  0007e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00083	48 39 44 24 20	 cmp	 QWORD PTR _Tied$[rsp], rax
  00088	75 0b		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  0008a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008f	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 101  :                 return;

  00093	eb 33		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Tied$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000a0	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ac	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000b1	48 03 c8	 add	 rcx, rax
  000b4	48 8b c1	 mov	 rax, rcx
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c5	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  000c8	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000cd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 32
tv72 = 40
this$ = 64
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	48 89 44 24 28	 mov	 QWORD PTR tv72[rsp], rax
  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR tv72[rsp]
  0001c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00023	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv72[rsp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	48 8b c8	 mov	 rcx, rax
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00037	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 80   :             if (_Rdbuf) {

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00042	74 11		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  00051	ff 50 10	 call	 QWORD PTR [rax+16]
  00054	90		 npad	 1
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  00055	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 32
tv73 = 40
this$ = 64
_Ostr$ = 72
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00019	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00024	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  00029	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0002e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00031	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00035	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv73[rsp]
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	48 8b c8	 mov	 rcx, rax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00049	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 73   :             if (_Rdbuf) {

  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00054	74 10		 je	 SHORT $LN2@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  0005b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  00063	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 75   :             }
; 76   :         }

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  0000f	ba 01 00 00 00	 mov	 edx, 1
  00014	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al$[rsp]
  00019	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00026	48 89 44 24 20	 mov	 QWORD PTR _New_proxy$[rsp], rax

; 1075 :         _Construct_in_place(*_New_proxy, this);

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  00035	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T1[rsp]
  0003a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _New_proxy$[rsp]
  0003f	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1076 :         _Myproxy            = _New_proxy;

  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _New_proxy$[rsp]
  0004e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1077 :         _New_proxy->_Mycont = this;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR _New_proxy$[rsp]
  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1078 :     }

  0005e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00062	5f		 pop	 rdi
  00063	c3		 ret	 0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QEAA@XZ ; std::allocator<int>::allocator<int>
  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ ; std::_Deque_val<std::_Deque_simple_types<int> >::_Deque_val<std::_Deque_simple_types<int> >
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : _CONSTEXPR20_DYNALLOC void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 999  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1000 :     using _Ty = typename _Alloc::value_type;
; 1001 :     _Ptr->~_Ty();
; 1002 :     _Deallocate_plain(_Al, _Ptr);

  0000f	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00019	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 1003 : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5f		 pop	 rdi
  00023	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 614  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) /* strengthened */ {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 615  :     // assign _New_val to _Val, return previous _Val
; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 89 04 24	 mov	 QWORD PTR _Old_val$[rsp], rax

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0001b	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00020	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_val$[rsp]
  00025	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00028	48 89 08	 mov	 QWORD PTR [rax], rcx

; 618  :     return _Old_val;

  0002b	48 8b 04 24	 mov	 rax, QWORD PTR _Old_val$[rsp]

; 619  : }

  0002f	48 83 c4 10	 add	 rsp, 16
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>, COMDAT

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00014	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 48
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0001b	48 03 c8	 add	 rcx, rax
  0001e	48 8b c1	 mov	 rax, rcx
  00021	b2 0a		 mov	 dl, 10
  00023	48 8b c8	 mov	 rcx, rax
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  0002c	0f b6 d0	 movzx	 edx, al
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 980  :     _Ostr.flush();

  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 981  :     return _Ostr;

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]

; 982  : }

  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv66 = 32
_Ostr$ = 64
_Str$ = 72
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4982 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 4983 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  0000f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Str$[rsp]
  00014	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00019	48 89 44 24 20	 mov	 QWORD PTR tv66[rsp], rax
  0001e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Str$[rsp]
  00023	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv66[rsp]
  0002d	4c 8b c1	 mov	 r8, rcx
  00030	48 8b d0	 mov	 rdx, rax
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00038	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>

; 4984 : }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0002b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00033	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  0003b	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00040	48 89 44 24 28	 mov	 QWORD PTR _Count$[rsp], rax

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00045	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0005c	48 03 c8	 add	 rcx, rax
  0005f	48 8b c1	 mov	 rax, rcx
  00062	48 8b c8	 mov	 rcx, rax
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0006b	48 85 c0	 test	 rax, rax
  0006e	7e 62		 jle	 SHORT $LN17@operator
  00070	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0007f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00087	48 03 c8	 add	 rcx, rax
  0008a	48 8b c1	 mov	 rax, rcx
  0008d	48 8b c8	 mov	 rcx, rax
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00096	48 3b 44 24 28	 cmp	 rax, QWORD PTR _Count$[rsp]
  0009b	7e 35		 jle	 SHORT $LN17@operator
  0009d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ac	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000b4	48 03 c8	 add	 rcx, rax
  000b7	48 8b c1	 mov	 rax, rcx
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000c3	48 2b 44 24 28	 sub	 rax, QWORD PTR _Count$[rsp]
  000c8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv137[rsp], rax
  000d0	eb 0c		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000d2	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv137[rsp], 0
$LN18@operator:
  000de	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv137[rsp]
  000e6	48 89 44 24 30	 mov	 QWORD PTR _Pad$[rsp], rax

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000eb	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  000f3	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000f8	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000fd	90		 npad	 1

; 742  : 
; 743  :     if (!_Ok) {

  000fe	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00103	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00108	0f b6 c0	 movzx	 eax, al
  0010b	85 c0		 test	 eax, eax
  0010d	75 10		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  0010f	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00113	83 c8 04	 or	 eax, 4
  00116	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 745  :     } else { // state okay, insert

  0011a	e9 88 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN
; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0011f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00127	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0012e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00136	48 03 c8	 add	 rcx, rax
  00139	48 8b c1	 mov	 rax, rcx
  0013c	48 8b c8	 mov	 rcx, rax
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00145	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  0014c	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv139[rsp]
  00153	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00158	83 f8 40	 cmp	 eax, 64			; 00000040H
  0015b	0f 84 cf 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00161	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pad$[rsp]
  00168	48 ff c8	 dec	 rax
  0016b	48 89 44 24 30	 mov	 QWORD PTR _Pad$[rsp], rax
$LN4@operator:
  00170	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00176	0f 8e b4 00 00
	00		 jle	 $LN11@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0017c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00184	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00187	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0018b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00193	48 03 c8	 add	 rcx, rax
  00196	48 8b c1	 mov	 rax, rcx
  00199	48 8b c8	 mov	 rcx, rax
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001a2	88 84 24 8c 00
	00 00		 mov	 BYTE PTR tv294[rsp], al
  001a9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  001b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001b8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  001c0	48 03 c8	 add	 rcx, rax
  001c3	48 8b c1	 mov	 rax, rcx
  001c6	48 8b c8	 mov	 rcx, rax
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001cf	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
  001d7	0f b6 94 24 8c
	00 00 00	 movzx	 edx, BYTE PTR tv294[rsp]
  001df	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv295[rsp]
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001ed	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv296[rsp], eax
  001f4	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv296[rsp]
  001fb	89 44 24 64	 mov	 DWORD PTR $T4[rsp], eax
  001ff	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00204	89 44 24 68	 mov	 DWORD PTR $T5[rsp], eax
  00208	48 8d 54 24 64	 lea	 rdx, QWORD PTR $T4[rsp]
  0020d	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  00212	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00217	0f b6 c0	 movzx	 eax, al
  0021a	85 c0		 test	 eax, eax
  0021c	74 0d		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  0021e	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00222	83 c8 04	 or	 eax, 4
  00225	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 751  :                     break;

  00229	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  0022b	e9 33 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00230	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00235	75 6b		 jne	 SHORT $LN13@operator
  00237	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0023f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00242	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00246	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0024e	48 03 c8	 add	 rcx, rax
  00251	48 8b c1	 mov	 rax, rcx
  00254	48 8b c8	 mov	 rcx, rax
  00257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0025d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv297[rsp], rax
  00265	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Count$[rsp]
  0026a	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR _Val$[rsp]
  00272	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv297[rsp]
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00280	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv298[rsp], rax
  00288	48 8b 44 24 28	 mov	 rax, QWORD PTR _Count$[rsp]
  0028d	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR tv298[rsp], rax
  00295	74 0b		 je	 SHORT $LN13@operator

; 757  :             _State |= ios_base::badbit;

  00297	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0029b	83 c8 04	 or	 eax, 4
  0029e	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  002a2	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  002a7	0f 85 cf 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ad	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002af	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pad$[rsp]
  002b4	48 ff c8	 dec	 rax
  002b7	48 89 44 24 30	 mov	 QWORD PTR _Pad$[rsp], rax
$LN7@operator:
  002bc	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  002c2	0f 8e b4 00 00
	00		 jle	 $LN14@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002c8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002d0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002df	48 03 c8	 add	 rcx, rax
  002e2	48 8b c1	 mov	 rax, rcx
  002e5	48 8b c8	 mov	 rcx, rax
  002e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002ee	88 84 24 b0 00
	00 00		 mov	 BYTE PTR tv299[rsp], al
  002f5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00300	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00304	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0030c	48 03 c8	 add	 rcx, rax
  0030f	48 8b c1	 mov	 rax, rcx
  00312	48 8b c8	 mov	 rcx, rax
  00315	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0031b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv300[rsp], rax
  00323	0f b6 94 24 b0
	00 00 00	 movzx	 edx, BYTE PTR tv299[rsp]
  0032b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv300[rsp]
  00333	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00339	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv301[rsp], eax
  00340	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv301[rsp]
  00347	89 44 24 6c	 mov	 DWORD PTR $T6[rsp], eax
  0034b	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00350	89 44 24 70	 mov	 DWORD PTR $T7[rsp], eax
  00354	48 8d 54 24 6c	 lea	 rdx, QWORD PTR $T6[rsp]
  00359	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T7[rsp]
  0035e	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00363	0f b6 c0	 movzx	 eax, al
  00366	85 c0		 test	 eax, eax
  00368	74 0d		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  0036a	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0036e	83 c8 04	 or	 eax, 4
  00371	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 764  :                     break;

  00375	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  00377	e9 33 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  0037c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00384	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00387	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0038b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00393	48 03 c8	 add	 rcx, rax
  00396	48 8b c1	 mov	 rax, rcx
  00399	33 d2		 xor	 edx, edx
  0039b	48 8b c8	 mov	 rcx, rax
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  003a4	90		 npad	 1
  003a5	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 770  :         _CATCH_IO_(ios_base, _Ostr)
; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  003a7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  003af	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003b6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  003be	48 03 c8	 add	 rcx, rax
  003c1	48 8b c1	 mov	 rax, rcx
  003c4	45 33 c0	 xor	 r8d, r8d
  003c7	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  003cb	48 8b c8	 mov	 rcx, rax
  003ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 774  :     return _Ostr;

  003d4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  003dc	48 89 44 24 78	 mov	 QWORD PTR $T8[rsp], rax
  003e1	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  003e6	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003eb	48 8b 44 24 78	 mov	 rax, QWORD PTR $T8[rsp]

; 775  : }

  003f0	48 8b f8	 mov	 rdi, rax
  003f3	48 8b cc	 mov	 rcx, rsp
  003f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  003fd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00402	48 8b c7	 mov	 rax, rdi
  00405	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0040c	5f		 pop	 rdi
  0040d	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00017	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00021	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	41 b0 01	 mov	 r8b, 1
  00031	ba 04 00 00 00	 mov	 edx, 4
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0003f	90		 npad	 1
  00040	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
  0004e	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00017	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00021	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	41 b0 01	 mov	 r8b, 1
  00031	ba 04 00 00 00	 mov	 edx, 4
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0003f	90		 npad	 1
  00040	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
  0004e	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ PROC ; std::queue<int,std::deque<int,std::allocator<int> > >::~queue<int,std::deque<int,std::allocator<int> > >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::deque<int,std::allocator<int> >::~deque<int,std::allocator<int> >
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ENDP ; std::queue<int,std::deque<int,std::allocator<int> > >::~queue<int,std::deque<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\queue
;	COMDAT ?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ PROC ; std::queue<int,std::deque<int,std::allocator<int> > >::pop, COMDAT

; 103  :     void pop() noexcept(noexcept(c.pop_front())) /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 104  :         c.pop_front();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ ; std::deque<int,std::allocator<int> >::pop_front

; 105  :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ENDP ; std::queue<int,std::deque<int,std::allocator<int> > >::pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\queue
;	COMDAT ?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z PROC ; std::queue<int,std::deque<int,std::allocator<int> > >::push, COMDAT

; 86   :     void push(const value_type& _Val) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 87   :         c.push_back(_Val);

  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Val$[rsp]
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ; std::deque<int,std::allocator<int> >::push_back

; 88   :     }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z ENDP ; std::queue<int,std::deque<int,std::allocator<int> > >::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\queue
;	COMDAT ?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ
_TEXT	SEGMENT
this$ = 48
?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ PROC ; std::queue<int,std::deque<int,std::allocator<int> > >::front, COMDAT

; 70   :     _NODISCARD reference front() noexcept(noexcept(c.front())) /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 71   :         return c.front();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ ; std::deque<int,std::allocator<int> >::front

; 72   :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ ENDP ; std::queue<int,std::deque<int,std::allocator<int> > >::front
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\queue
;	COMDAT ?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 48
?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ PROC ; std::queue<int,std::deque<int,std::allocator<int> > >::size, COMDAT

; 66   :     _NODISCARD size_type size() const noexcept(noexcept(c.size())) /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 67   :         return c.size();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::deque<int,std::allocator<int> >::size

; 68   :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ ENDP ; std::queue<int,std::deque<int,std::allocator<int> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\queue
;	COMDAT ??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ PROC ; std::queue<int,std::deque<int,std::allocator<int> > >::queue<int,std::deque<int,std::allocator<int> > >, COMDAT

; 35   :     queue() = default;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 36   : 
; 37   :     explicit queue(const _Container& _Cont) : c(_Cont) {}
; 38   : 
; 39   :     explicit queue(_Container&& _Cont) noexcept(is_nothrow_move_constructible_v<_Container>) // strengthened
; 40   :         : c(_STD move(_Cont)) {}
; 41   : 
; 42   :     template <class _Alloc, enable_if_t<uses_allocator_v<_Container, _Alloc>, int> = 0>
; 43   :     explicit queue(const _Alloc& _Al) noexcept(is_nothrow_constructible_v<_Container, const _Alloc&>) // strengthened
; 44   :         : c(_Al) {}
; 45   : 
; 46   :     template <class _Alloc, enable_if_t<uses_allocator_v<_Container, _Alloc>, int> = 0>
; 47   :     queue(const _Container& _Cont, const _Alloc& _Al) : c(_Cont, _Al) {}
; 48   : 
; 49   :     template <class _Alloc, enable_if_t<uses_allocator_v<_Container, _Alloc>, int> = 0>
; 50   :     queue(_Container&& _Cont, const _Alloc& _Al) noexcept(
; 51   :         is_nothrow_constructible_v<_Container, _Container, const _Alloc&>) // strengthened
; 52   :         : c(_STD move(_Cont), _Al) {}
; 53   : 
; 54   :     template <class _Alloc, enable_if_t<uses_allocator_v<_Container, _Alloc>, int> = 0>
; 55   :     queue(const queue& _Right, const _Alloc& _Al) : c(_Right.c, _Al) {}
; 56   : 
; 57   :     template <class _Alloc, enable_if_t<uses_allocator_v<_Container, _Alloc>, int> = 0>
; 58   :     queue(queue&& _Right, const _Alloc& _Al) noexcept(
; 59   :         is_nothrow_constructible_v<_Container, _Container, const _Alloc&>) // strengthened
; 60   :         : c(_STD move(_Right.c), _Al) {}
; 61   : 
; 62   :     _NODISCARD bool empty() const noexcept(noexcept(c.empty())) /* strengthened */ {
; 63   :         return c.empty();
; 64   :     }
; 65   : 
; 66   :     _NODISCARD size_type size() const noexcept(noexcept(c.size())) /* strengthened */ {
; 67   :         return c.size();
; 68   :     }
; 69   : 
; 70   :     _NODISCARD reference front() noexcept(noexcept(c.front())) /* strengthened */ {
; 71   :         return c.front();
; 72   :     }
; 73   : 
; 74   :     _NODISCARD const_reference front() const noexcept(noexcept(c.front())) /* strengthened */ {
; 75   :         return c.front();
; 76   :     }
; 77   : 
; 78   :     _NODISCARD reference back() noexcept(noexcept(c.back())) /* strengthened */ {
; 79   :         return c.back();
; 80   :     }
; 81   : 
; 82   :     _NODISCARD const_reference back() const noexcept(noexcept(c.back())) /* strengthened */ {
; 83   :         return c.back();
; 84   :     }
; 85   : 
; 86   :     void push(const value_type& _Val) {
; 87   :         c.push_back(_Val);
; 88   :     }
; 89   : 
; 90   :     void push(value_type&& _Val) {
; 91   :         c.push_back(_STD move(_Val));
; 92   :     }
; 93   : 
; 94   :     template <class... _Valty>
; 95   :     decltype(auto) emplace(_Valty&&... _Val) {
; 96   : #if _HAS_CXX17
; 97   :         return c.emplace_back(_STD forward<_Valty>(_Val)...);
; 98   : #else // ^^^ C++17 or newer / C++14 vvv
; 99   :         c.emplace_back(_STD forward<_Valty>(_Val)...);
; 100  : #endif // _HAS_CXX17
; 101  :     }
; 102  : 
; 103  :     void pop() noexcept(noexcept(c.pop_front())) /* strengthened */ {
; 104  :         c.pop_front();
; 105  :     }
; 106  : 
; 107  :     void swap(queue& _Right) noexcept(_Is_nothrow_swappable<_Container>::value) {
; 108  :         _Swap_adl(c, _Right.c);
; 109  :     }
; 110  : 
; 111  :     _NODISCARD const _Container& _Get_container() const noexcept { // TRANSITION, VSO-1307828
; 112  :         return c;
; 113  :     }
; 114  : 
; 115  : protected:
; 116  :     _Container c{};

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::deque<int,std::allocator<int> >::deque<int,std::allocator<int> >

; 35   :     queue() = default;

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ENDP ; std::queue<int,std::deque<int,std::allocator<int> > >::queue<int,std::deque<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1382 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1383 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1378 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1379 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ
_TEXT	SEGMENT
this$ = 48
?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ PROC ; std::deque<int,std::allocator<int> >::_Mysize, COMDAT

; 1574 :     const size_type& _Mysize() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1575 :         return _Get_data()._Mysize;

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00014	48 83 c0 20	 add	 rax, 32			; 00000020H

; 1576 :     }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5f		 pop	 rdi
  0001d	c3		 ret	 0
?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ENDP ; std::deque<int,std::allocator<int> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 48
?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ PROC ; std::deque<int,std::allocator<int> >::_Mysize, COMDAT

; 1570 :     size_type& _Mysize() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1571 :         return _Get_data()._Mysize;

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00014	48 83 c0 20	 add	 rax, 32			; 00000020H

; 1572 :     }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5f		 pop	 rdi
  0001d	c3		 ret	 0
?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ENDP ; std::deque<int,std::allocator<int> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ
_TEXT	SEGMENT
this$ = 48
?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ PROC ; std::deque<int,std::allocator<int> >::_Myoff, COMDAT

; 1566 :     const size_type& _Myoff() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1567 :         return _Get_data()._Myoff;

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00014	48 83 c0 18	 add	 rax, 24

; 1568 :     }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5f		 pop	 rdi
  0001d	c3		 ret	 0
?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ENDP ; std::deque<int,std::allocator<int> >::_Myoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 48
?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ PROC ; std::deque<int,std::allocator<int> >::_Myoff, COMDAT

; 1562 :     size_type& _Myoff() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1563 :         return _Get_data()._Myoff;

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00014	48 83 c0 18	 add	 rax, 24

; 1564 :     }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5f		 pop	 rdi
  0001d	c3		 ret	 0
?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ENDP ; std::deque<int,std::allocator<int> >::_Myoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 48
?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ PROC ; std::deque<int,std::allocator<int> >::_Mapsize, COMDAT

; 1554 :     size_type& _Mapsize() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1555 :         return _Get_data()._Mapsize;

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00014	48 83 c0 10	 add	 rax, 16

; 1556 :     }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5f		 pop	 rdi
  0001d	c3		 ret	 0
?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ENDP ; std::deque<int,std::allocator<int> >::_Mapsize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ
_TEXT	SEGMENT
this$ = 48
?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ PROC ; std::deque<int,std::allocator<int> >::_Map, COMDAT

; 1546 :     _Mapptr& _Map() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1547 :         return _Get_data()._Map;

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00014	48 83 c0 08	 add	 rax, 8

; 1548 :     }

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5f		 pop	 rdi
  0001d	c3		 ret	 0
?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ENDP ; std::deque<int,std::allocator<int> >::_Map
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ PROC ; std::deque<int,std::allocator<int> >::_Get_data, COMDAT

; 1542 :     const _Scary_val& _Get_data() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1543 :         return _Mypair._Myval2;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1544 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ENDP ; std::deque<int,std::allocator<int> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ PROC ; std::deque<int,std::allocator<int> >::_Get_data, COMDAT

; 1538 :     _Scary_val& _Get_data() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1539 :         return _Mypair._Myval2;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1540 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ENDP ; std::deque<int,std::allocator<int> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ PROC ; std::deque<int,std::allocator<int> >::_Getal, COMDAT

; 1534 :     const _Alty& _Getal() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1535 :         return _Mypair._Get_first();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first

; 1536 :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ENDP ; std::deque<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ PROC ; std::deque<int,std::allocator<int> >::_Getal, COMDAT

; 1530 :     _Alty& _Getal() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1531 :         return _Mypair._Get_first();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Get_first

; 1532 :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ENDP ; std::deque<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ PROC ; std::deque<int,std::allocator<int> >::_Orphan_all, COMDAT

; 1526 :     void _Orphan_all() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1527 :         _Get_data()._Orphan_all();

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1528 :     }

  0001c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ ENDP ; std::deque<int,std::allocator<int> >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z PROC ; std::deque<int,std::allocator<int> >::_Getblock, COMDAT

; 1522 :     size_type _Getblock(size_type _Off) const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1523 :         return _Get_data()._Getblock(_Off);

  0000f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00014	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Off$[rsp]
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<int> >::_Getblock

; 1524 :     }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ENDP ; std::deque<int,std::allocator<int> >::_Getblock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z
_TEXT	SEGMENT
_Offhigh$ = 32
_Lock$ = 52
_Pnext$ = 72
_Pnextoff$4 = 80
tv65 = 88
tv71 = 96
this$ = 128
_Offlo$ = 136
?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z PROC ; std::deque<int,std::allocator<int> >::_Orphan_off, COMDAT

; 1502 :     void _Orphan_off(size_type _Offlo) const noexcept { // orphan iterators with specified offset(s)

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 14 00 00 00	 mov	 ecx, 20
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 1503 :         size_type _Offhigh = _Myoff() + _Mysize() <= _Offlo + 1 ? static_cast<size_type>(-1) : _Offlo;

  00028	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00030	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  00035	48 89 44 24 58	 mov	 QWORD PTR tv65[rsp], rax
  0003a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00042	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  00047	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv65[rsp]
  0004c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0004f	48 03 08	 add	 rcx, QWORD PTR [rax]
  00052	48 8b c1	 mov	 rax, rcx
  00055	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Offlo$[rsp]
  0005d	48 ff c1	 inc	 rcx
  00060	48 3b c1	 cmp	 rax, rcx
  00063	77 0b		 ja	 SHORT $LN9@Orphan_off
  00065	48 c7 44 24 60
	ff ff ff ff	 mov	 QWORD PTR tv71[rsp], -1
  0006e	eb 0d		 jmp	 SHORT $LN10@Orphan_off
$LN9@Orphan_off:
  00070	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _Offlo$[rsp]
  00078	48 89 44 24 60	 mov	 QWORD PTR tv71[rsp], rax
$LN10@Orphan_off:
  0007d	48 8b 44 24 60	 mov	 rax, QWORD PTR tv71[rsp]
  00082	48 89 44 24 20	 mov	 QWORD PTR _Offhigh$[rsp], rax

; 1504 :         if (_Offlo == _Myoff()) {

  00087	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008f	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR _Offlo$[rsp], rax
  0009f	75 0c		 jne	 SHORT $LN4@Orphan_off

; 1505 :             _Offlo = 0;

  000a1	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR _Offlo$[rsp], 0
$LN4@Orphan_off:

; 1506 :         }
; 1507 : 
; 1508 :         _Lockit _Lock(_LOCK_DEBUG);

  000ad	ba 03 00 00 00	 mov	 edx, 3
  000b2	48 8d 4c 24 34	 lea	 rcx, QWORD PTR _Lock$[rsp]
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1509 :         _Iterator_base12** _Pnext = &_Get_data()._Myproxy->_Myfirstiter;

  000bd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c5	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  000ca	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cd	48 83 c0 08	 add	 rax, 8
  000d1	48 89 44 24 48	 mov	 QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_off:

; 1510 :         while (*_Pnext) {

  000d6	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnext$[rsp]
  000db	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000df	74 64		 je	 SHORT $LN3@Orphan_off

; 1511 :             const auto _Pnextoff = static_cast<const_iterator&>(**_Pnext)._Myoff;

  000e1	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnext$[rsp]
  000e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000ed	48 89 44 24 50	 mov	 QWORD PTR _Pnextoff$4[rsp], rax

; 1512 :             if (_Pnextoff < _Offlo || _Offhigh < _Pnextoff) {

  000f2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _Offlo$[rsp]
  000fa	48 39 44 24 50	 cmp	 QWORD PTR _Pnextoff$4[rsp], rax
  000ff	72 0c		 jb	 SHORT $LN7@Orphan_off
  00101	48 8b 44 24 50	 mov	 rax, QWORD PTR _Pnextoff$4[rsp]
  00106	48 39 44 24 20	 cmp	 QWORD PTR _Offhigh$[rsp], rax
  0010b	73 13		 jae	 SHORT $LN5@Orphan_off
$LN7@Orphan_off:

; 1513 :                 _Pnext = &(*_Pnext)->_Mynextiter;

  0010d	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00112	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00115	48 83 c0 08	 add	 rax, 8
  00119	48 89 44 24 48	 mov	 QWORD PTR _Pnext$[rsp], rax

; 1514 :             } else { // orphan the iterator

  0011e	eb 23		 jmp	 SHORT $LN6@Orphan_off
$LN5@Orphan_off:

; 1515 :                 (*_Pnext)->_Myproxy = nullptr;

  00120	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00125	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00128	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1516 :                 *_Pnext             = (*_Pnext)->_Mynextiter;

  0012f	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pnext$[rsp]
  00134	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00137	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pnext$[rsp]
  0013c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00140	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN6@Orphan_off:

; 1517 :             }
; 1518 :         }

  00143	eb 91		 jmp	 SHORT $LN2@Orphan_off
$LN3@Orphan_off:

; 1519 :     }

  00145	48 8d 4c 24 34	 lea	 rcx, QWORD PTR _Lock$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00150	48 8b cc	 mov	 rcx, rsp
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z$rtcFrameData
  0015a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0015f	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00163	5f		 pop	 rdi
  00164	c3		 ret	 0
?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z ENDP ; std::deque<int,std::allocator<int> >::_Orphan_off
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Almap$ = 36
_Block$4 = 56
tv144 = 64
tv134 = 72
this$ = 96
?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ PROC	; std::deque<int,std::allocator<int> >::_Tidy, COMDAT

; 1478 :     void _Tidy() noexcept { // free all storage

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000f	b9 0c 00 00 00	 mov	 ecx, 12
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 1479 :         _Orphan_all();

  00020	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::deque<int,std::allocator<int> >::_Orphan_all

; 1480 : 
; 1481 :         _Alpty _Almap(_Getal());

  0002a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002f	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Almap$[rsp]
  0003c	e8 00 00 00 00	 call	 ??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<int *>::allocator<int *><int>
$LN2@Tidy:

; 1482 :         while (!empty()) {

  00041	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ ; std::deque<int,std::allocator<int> >::empty
  0004b	0f b6 c0	 movzx	 eax, al
  0004e	85 c0		 test	 eax, eax
  00050	75 0c		 jne	 SHORT $LN3@Tidy

; 1483 :             pop_back();

  00052	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00057	e8 00 00 00 00	 call	 ?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ ; std::deque<int,std::allocator<int> >::pop_back

; 1484 :         }

  0005c	eb e3		 jmp	 SHORT $LN2@Tidy
$LN3@Tidy:

; 1485 : 
; 1486 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  0005e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  00068	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006b	48 89 44 24 38	 mov	 QWORD PTR _Block$4[rsp], rax
$LN4@Tidy:
  00070	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Block$4[rsp], 0
  00076	0f 86 81 00 00
	00		 jbe	 $LN5@Tidy

; 1487 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  0007c	48 8b 44 24 38	 mov	 rax, QWORD PTR _Block$4[rsp]
  00081	48 ff c8	 dec	 rax
  00084	48 89 44 24 38	 mov	 QWORD PTR _Block$4[rsp], rax
  00089	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0008e	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Block$4[rsp]
  0009b	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  000a0	74 56		 je	 SHORT $LN7@Tidy

; 1488 :                 _Getal().deallocate(_Map()[_Block], _Block_size);

  000a2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000a7	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  000ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000af	48 89 44 24 40	 mov	 QWORD PTR tv144[rsp], rax
  000b4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000b9	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  000be	41 b8 04 00 00
	00		 mov	 r8d, 4
  000c4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Block$4[rsp]
  000c9	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv144[rsp]
  000ce	48 8b 14 ca	 mov	 rdx, QWORD PTR [rdx+rcx*8]
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate

; 1489 :                 _Destroy_in_place(_Map()[_Block]);

  000da	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000df	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  000e4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Block$4[rsp]
  000ec	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAH@std@@YAXAEAPEAH@Z ; std::_Destroy_in_place<int *>
$LN7@Tidy:

; 1490 :             }
; 1491 :         }

  000f8	e9 73 ff ff ff	 jmp	 $LN4@Tidy
$LN5@Tidy:

; 1492 : 
; 1493 :         if (_Map() != _Mapptr()) {

  000fd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00102	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00107	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0010b	74 2e		 je	 SHORT $LN8@Tidy

; 1494 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for map

  0010d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00112	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  00117	48 89 44 24 48	 mov	 QWORD PTR tv134[rsp], rax
  0011c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00121	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00126	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv134[rsp]
  0012b	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  0012e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00131	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Almap$[rsp]
  00136	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z ; std::allocator<int *>::deallocate
$LN8@Tidy:

; 1495 :         }
; 1496 : 
; 1497 :         _Mapsize() = 0;

  0013b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00140	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  00145	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1498 :         _Map()     = _Mapptr();

  0014c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00151	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00156	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1499 :     }

  0015d	48 8b cc	 mov	 rcx, rsp
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ$rtcFrameData
  00167	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0016c	90		 npad	 1
  0016d	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00171	5f		 pop	 rdi
  00172	c3		 ret	 0
?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ ENDP	; std::deque<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_Almap$ = 36
_Newsize$ = 56
_Myboff$ = 64
_Newmap$ = 72
_Myptr$ = 80
tv73 = 88
tv138 = 96
tv142 = 104
tv155 = 112
tv170 = 120
tv179 = 128
tv189 = 136
tv193 = 144
tv205 = 152
tv214 = 160
this$ = 192
_Count$ = 200
?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z PROC ; std::deque<int,std::allocator<int> >::_Growmap, COMDAT

; 1439 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]

; 1440 :         static_assert(1 < _Minimum_map_size, "The _Xlen() test should always be performed.");
; 1441 : 
; 1442 :         _Alpty _Almap(_Getal());

  0002b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  00038	48 8b d0	 mov	 rdx, rax
  0003b	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Almap$[rsp]
  00040	e8 00 00 00 00	 call	 ??$?0H@?$allocator@PEAH@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<int *>::allocator<int *><int>

; 1443 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  00045	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0004d	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  00052	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00056	76 17		 jbe	 SHORT $LN10@Growmap
  00058	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00060	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  00065	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00068	48 89 44 24 58	 mov	 QWORD PTR tv73[rsp], rax
  0006d	eb 09		 jmp	 SHORT $LN11@Growmap
$LN10@Growmap:
  0006f	48 c7 44 24 58
	01 00 00 00	 mov	 QWORD PTR tv73[rsp], 1
$LN11@Growmap:
  00078	48 8b 44 24 58	 mov	 rax, QWORD PTR tv73[rsp]
  0007d	48 89 44 24 38	 mov	 QWORD PTR _Newsize$[rsp], rax
$LN2@Growmap:

; 1444 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00082	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  0008f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00092	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  00097	48 2b c8	 sub	 rcx, rax
  0009a	48 8b c1	 mov	 rax, rcx
  0009d	48 3b 84 24 c8
	00 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  000a5	72 08		 jb	 SHORT $LN4@Growmap
  000a7	48 83 7c 24 38
	08		 cmp	 QWORD PTR _Newsize$[rsp], 8
  000ad	73 3f		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1445 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1446 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  000af	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b7	e8 00 00 00 00	 call	 ?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::deque<int,std::allocator<int> >::max_size
  000bc	33 d2		 xor	 edx, edx
  000be	b9 04 00 00 00	 mov	 ecx, 4
  000c3	48 f7 f1	 div	 rcx
  000c6	48 2b 44 24 38	 sub	 rax, QWORD PTR _Newsize$[rsp]
  000cb	48 3b 44 24 38	 cmp	 rax, QWORD PTR _Newsize$[rsp]
  000d0	73 0d		 jae	 SHORT $LN5@Growmap

; 1447 :                 _Xlen(); // result too long

  000d2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000da	e8 00 00 00 00	 call	 ?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ ; std::deque<int,std::allocator<int> >::_Xlen
$LN5@Growmap:

; 1448 :             }
; 1449 : 
; 1450 :             _Newsize *= 2;

  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR _Newsize$[rsp]
  000e4	48 d1 e0	 shl	 rax, 1
  000e7	48 89 44 24 38	 mov	 QWORD PTR _Newsize$[rsp], rax

; 1451 :         }

  000ec	eb 94		 jmp	 SHORT $LN2@Growmap
$LN3@Growmap:

; 1452 :         _Count = _Newsize - _Mapsize();

  000ee	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f6	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  000fb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  00103	48 2b c8	 sub	 rcx, rax
  00106	48 8b c1	 mov	 rax, rcx
  00109	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1453 : 
; 1454 :         size_type _Myboff = _Myoff() / _Block_size;

  00111	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00119	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  0011e	33 d2		 xor	 edx, edx
  00120	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00123	b9 04 00 00 00	 mov	 ecx, 4
  00128	48 f7 f1	 div	 rcx
  0012b	48 89 44 24 40	 mov	 QWORD PTR _Myboff$[rsp], rax

; 1455 :         _Mapptr _Newmap   = _Almap.allocate(_Mapsize() + _Count);

  00130	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00138	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  0013d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00140	48 03 84 24 c8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  00148	48 8b d0	 mov	 rdx, rax
  0014b	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Almap$[rsp]
  00150	e8 00 00 00 00	 call	 ?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z ; std::allocator<int *>::allocate
  00155	48 89 44 24 48	 mov	 QWORD PTR _Newmap$[rsp], rax

; 1456 :         _Mapptr _Myptr    = _Newmap + _Myboff;

  0015a	48 8b 44 24 48	 mov	 rax, QWORD PTR _Newmap$[rsp]
  0015f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Myboff$[rsp]
  00164	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00168	48 89 44 24 50	 mov	 QWORD PTR _Myptr$[rsp], rax

; 1457 : 
; 1458 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0016d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00175	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  0017a	48 89 44 24 60	 mov	 QWORD PTR tv138[rsp], rax
  0017f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00187	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  0018c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv138[rsp]
  00194	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00197	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0019b	48 89 44 24 68	 mov	 QWORD PTR tv142[rsp], rax
  001a0	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001a8	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  001ad	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Myboff$[rsp]
  001b5	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  001b9	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Myptr$[rsp]
  001be	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv142[rsp]
  001c3	48 8b d1	 mov	 rdx, rcx
  001c6	48 8b c8	 mov	 rcx, rax
  001c9	e8 00 00 00 00	 call	 ??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z ; std::uninitialized_copy<int * *,int * *>
  001ce	48 89 44 24 50	 mov	 QWORD PTR _Myptr$[rsp], rax

; 1459 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  001d3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR _Count$[rsp]
  001db	48 39 44 24 40	 cmp	 QWORD PTR _Myboff$[rsp], rax
  001e0	77 79		 ja	 SHORT $LN6@Growmap

; 1460 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  001e2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ea	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  001ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Myboff$[rsp]
  001f7	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  001fb	48 89 44 24 70	 mov	 QWORD PTR tv155[rsp], rax
  00200	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00208	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  0020d	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Myptr$[rsp]
  00212	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv155[rsp]
  00217	48 8b d1	 mov	 rdx, rcx
  0021a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0021d	e8 00 00 00 00	 call	 ??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z ; std::uninitialized_copy<int * *,int * *>
  00222	48 89 44 24 50	 mov	 QWORD PTR _Myptr$[rsp], rax

; 1461 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  00227	48 8b 44 24 40	 mov	 rax, QWORD PTR _Myboff$[rsp]
  0022c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  00234	48 2b c8	 sub	 rcx, rax
  00237	48 8b c1	 mov	 rax, rcx
  0023a	48 8b d0	 mov	 rdx, rax
  0023d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Myptr$[rsp]
  00242	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z ; std::_Uninitialized_value_construct_n_unchecked1<int * *,unsigned __int64>

; 1462 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  00247	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Myboff$[rsp]
  0024c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newmap$[rsp]
  00251	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z ; std::_Uninitialized_value_construct_n_unchecked1<int * *,unsigned __int64>

; 1463 :         } else { // increment not greater than offset of initial block

  00256	e9 af 00 00 00	 jmp	 $LN7@Growmap
$LN6@Growmap:

; 1464 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  0025b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00263	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00268	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0026b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  00273	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00277	48 89 44 24 78	 mov	 QWORD PTR tv170[rsp], rax
  0027c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00284	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00289	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Myptr$[rsp]
  0028e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv170[rsp]
  00293	48 8b d1	 mov	 rdx, rcx
  00296	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00299	e8 00 00 00 00	 call	 ??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z ; std::uninitialized_copy<int * *,int * *>

; 1465 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  0029e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002a6	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  002ab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Myboff$[rsp]
  002b3	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  002b7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
  002bf	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002c7	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  002cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002cf	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  002d7	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  002db	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Newmap$[rsp]
  002e0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  002e8	48 8b d1	 mov	 rdx, rcx
  002eb	48 8b c8	 mov	 rcx, rax
  002ee	e8 00 00 00 00	 call	 ??$uninitialized_copy@PEAPEAHPEAPEAH@std@@YAPEAPEAHQEAPEAH0PEAPEAH@Z ; std::uninitialized_copy<int * *,int * *>
  002f3	48 89 44 24 50	 mov	 QWORD PTR _Myptr$[rsp], rax

; 1466 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  002f8	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  00300	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Myptr$[rsp]
  00305	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PEAPEAH_K@std@@YAPEAPEAHPEAPEAH_K@Z ; std::_Uninitialized_value_construct_n_unchecked1<int * *,unsigned __int64>
$LN7@Growmap:

; 1467 :         }
; 1468 : 
; 1469 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());

  0030a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00312	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00317	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv189[rsp], rax
  0031f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00327	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  0032c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  00337	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0033a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0033e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv193[rsp], rax
  00346	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0034e	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  00353	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00356	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Myboff$[rsp]
  0035b	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  0035f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv193[rsp]
  00367	48 8b d1	 mov	 rdx, rcx
  0036a	48 8b c8	 mov	 rcx, rax
  0036d	e8 00 00 00 00	 call	 ??$_Destroy_range@PEAPEAHPEAPEAH@std@@YAXPEAPEAHQEAPEAH@Z ; std::_Destroy_range<int * *,int * *>

; 1470 :         if (_Map() != _Mapptr()) {

  00372	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0037a	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  0037f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00383	74 3a		 je	 SHORT $LN8@Growmap

; 1471 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for old

  00385	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0038d	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  00392	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv205[rsp], rax
  0039a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003a2	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  003a7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv205[rsp]
  003af	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  003b2	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  003b5	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Almap$[rsp]
  003ba	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z ; std::allocator<int *>::deallocate
$LN8@Growmap:

; 1472 :         }
; 1473 : 
; 1474 :         _Map() = _Newmap; // point at new

  003bf	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003c7	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  003cc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newmap$[rsp]
  003d1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1475 :         _Mapsize() += _Count;

  003d4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003dc	e8 00 00 00 00	 call	 ?_Mapsize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mapsize
  003e1	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv214[rsp], rax
  003e9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv214[rsp]
  003f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003f4	48 03 84 24 c8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  003fc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv214[rsp]
  00404	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN9@Growmap:

; 1476 :     }

  00407	48 8b cc	 mov	 rcx, rsp
  0040a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z$rtcFrameData
  00411	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00416	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  0041d	5f		 pop	 rdi
  0041e	c3		 ret	 0
?_Growmap@?$deque@HV?$allocator@H@std@@@std@@AEAAX_K@Z ENDP ; std::deque<int,std::allocator<int> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ
_TEXT	SEGMENT
this$ = 48
?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ PROC	; std::deque<int,std::allocator<int> >::_Xlen, COMDAT

; 1431 :     [[noreturn]] void _Xlen() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1432 :         _Xlength_error("deque<T> too long");

  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00011	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1433 :     }

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5f		 pop	 rdi
  0001b	c3		 ret	 0
?_Xlen@?$deque@HV?$allocator@H@std@@@std@@AEBAXXZ ENDP	; std::deque<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Newoff$1 = 48
_Block$2 = 56
tv84 = 64
tv148 = 72
tv94 = 80
tv141 = 88
this$ = 112
?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ PROC ; std::deque<int,std::allocator<int> >::pop_back, COMDAT

; 1135 :     void pop_back() noexcept /* strengthened */ {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 1136 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1137 :         if (empty()) {

  0000a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ ; std::deque<int,std::allocator<int> >::empty
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	74 70		 je	 SHORT $LN5@pop_back
$LN4@pop_back:

; 1138 :             _STL_REPORT_ERROR("deque empty before pop");

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BH@EDKEEENI@deque?5empty?5before?5pop@
  00022	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	45 33 c9	 xor	 r9d, r9d
  00036	41 b8 72 04 00
	00		 mov	 r8d, 1138		; 00000472H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GG@FDHPMGE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00043	b9 02 00 00 00	 mov	 ecx, 2
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 03		 jne	 SHORT $LN9@pop_back
  00053	cc		 int	 3
  00054	33 c0		 xor	 eax, eax
$LN9@pop_back:
  00056	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0005f	41 b9 72 04 00
	00		 mov	 r9d, 1138		; 00000472H
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MM@DPCANHAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GK@DKJEHNEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@NJAACHCD@?$AA?$CC?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAb?$AAe@
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00080	33 c0		 xor	 eax, eax
  00082	85 c0		 test	 eax, eax
  00084	75 95		 jne	 SHORT $LN4@pop_back

; 1139 :         } else { // something to erase, do it

  00086	e9 ec 00 00 00	 jmp	 $LN6@pop_back
$LN5@pop_back:

; 1140 :             size_type _Newoff = _Myoff() + _Mysize() - 1;

  0008b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00090	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  00095	48 89 44 24 40	 mov	 QWORD PTR tv84[rsp], rax
  0009a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0009f	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv84[rsp]
  000a9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000af	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  000b4	48 89 44 24 30	 mov	 QWORD PTR _Newoff$1[rsp], rax

; 1141 :             _Orphan_off(_Newoff);

  000b9	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Newoff$1[rsp]
  000be	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z ; std::deque<int,std::allocator<int> >::_Orphan_off

; 1142 :             size_type _Block = _Getblock(_Newoff);

  000c8	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Newoff$1[rsp]
  000cd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000d2	e8 00 00 00 00	 call	 ?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::deque<int,std::allocator<int> >::_Getblock
  000d7	48 89 44 24 38	 mov	 QWORD PTR _Block$2[rsp], rax

; 1143 :             _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size));

  000dc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000e1	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  000e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e9	48 89 44 24 48	 mov	 QWORD PTR tv148[rsp], rax
  000ee	33 d2		 xor	 edx, edx
  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR _Newoff$1[rsp]
  000f5	b9 04 00 00 00	 mov	 ecx, 4
  000fa	48 f7 f1	 div	 rcx
  000fd	48 8b c2	 mov	 rax, rdx
  00100	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Block$2[rsp]
  00105	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv148[rsp]
  0010a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0010e	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00112	48 8b c8	 mov	 rcx, rax
  00115	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  0011a	48 89 44 24 50	 mov	 QWORD PTR tv94[rsp], rax
  0011f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00124	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  00129	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv94[rsp]
  0012e	48 8b d1	 mov	 rdx, rcx
  00131	48 8b c8	 mov	 rcx, rax
  00134	e8 00 00 00 00	 call	 ??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::destroy<int>

; 1144 :             if (--_Mysize() == 0) {

  00139	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0013e	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  00143	48 89 44 24 58	 mov	 QWORD PTR tv141[rsp], rax
  00148	48 8b 44 24 58	 mov	 rax, QWORD PTR tv141[rsp]
  0014d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00150	48 ff c8	 dec	 rax
  00153	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv141[rsp]
  00158	48 89 01	 mov	 QWORD PTR [rcx], rax
  0015b	48 8b 44 24 58	 mov	 rax, QWORD PTR tv141[rsp]
  00160	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00164	75 11		 jne	 SHORT $LN6@pop_back

; 1145 :                 _Myoff() = 0;

  00166	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0016b	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  00170	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN6@pop_back:

; 1146 :             }
; 1147 :         }
; 1148 : 
; 1149 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1150 :         size_type _Newoff = _Myoff() + _Mysize() - 1;
; 1151 :         size_type _Block  = _Getblock(_Newoff);
; 1152 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size));
; 1153 :         if (--_Mysize() == 0) {
; 1154 :             _Myoff() = 0;
; 1155 :         }
; 1156 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1157 :     }

  00177	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0017b	5f		 pop	 rdi
  0017c	c3		 ret	 0
?pop_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ ENDP ; std::deque<int,std::allocator<int> >::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z PROC ; std::deque<int,std::allocator<int> >::push_back, COMDAT

; 1130 :     void push_back(const _Ty& _Val) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1131 :         _Orphan_all();

  0000f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00014	e8 00 00 00 00	 call	 ?_Orphan_all@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::deque<int,std::allocator<int> >::_Orphan_all

; 1132 :         _Emplace_back_internal(_Val);

  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Val$[rsp]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??$_Emplace_back_internal@AEBH@?$deque@HV?$allocator@H@std@@@std@@AEAAXAEBH@Z ; std::deque<int,std::allocator<int> >::_Emplace_back_internal<int const &>

; 1133 :     }

  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
?push_back@?$deque@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ENDP ; std::deque<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
_Block$1 = 48
tv153 = 56
tv92 = 64
tv141 = 72
tv148 = 80
this$ = 112
?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ PROC ; std::deque<int,std::allocator<int> >::pop_front, COMDAT

; 1084 :     void pop_front() noexcept /* strengthened */ {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 1085 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1086 :         if (empty()) {

  0000a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ ; std::deque<int,std::allocator<int> >::empty
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	74 70		 je	 SHORT $LN5@pop_front
$LN4@pop_front:

; 1087 :             _STL_REPORT_ERROR("deque empty before pop");

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BH@EDKEEENI@deque?5empty?5before?5pop@
  00022	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	45 33 c9	 xor	 r9d, r9d
  00036	41 b8 3f 04 00
	00		 mov	 r8d, 1087		; 0000043fH
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GG@FDHPMGE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00043	b9 02 00 00 00	 mov	 ecx, 2
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 03		 jne	 SHORT $LN10@pop_front
  00053	cc		 int	 3
  00054	33 c0		 xor	 eax, eax
$LN10@pop_front:
  00056	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0005f	41 b9 3f 04 00
	00		 mov	 r9d, 1087		; 0000043fH
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MM@DPCANHAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GM@CDKPHBPK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@NJAACHCD@?$AA?$CC?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?5?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?5?$AAb?$AAe@
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00080	33 c0		 xor	 eax, eax
  00082	85 c0		 test	 eax, eax
  00084	75 95		 jne	 SHORT $LN4@pop_front

; 1088 :         } else { // something to erase, do it

  00086	e9 fa 00 00 00	 jmp	 $LN6@pop_front
$LN5@pop_front:

; 1089 :             _Orphan_off(_Myoff());

  0008b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00090	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  00095	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00098	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0009d	e8 00 00 00 00	 call	 ?_Orphan_off@?$deque@HV?$allocator@H@std@@@std@@AEBAX_K@Z ; std::deque<int,std::allocator<int> >::_Orphan_off

; 1090 :             size_type _Block = _Getblock(_Myoff());

  000a2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000a7	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  000ac	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000af	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000b4	e8 00 00 00 00	 call	 ?_Getblock@?$deque@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::deque<int,std::allocator<int> >::_Getblock
  000b9	48 89 44 24 30	 mov	 QWORD PTR _Block$1[rsp], rax

; 1091 :             _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Myoff() % _Block_size));

  000be	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Map@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAPEAPEAHXZ ; std::deque<int,std::allocator<int> >::_Map
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 89 44 24 38	 mov	 QWORD PTR tv153[rsp], rax
  000d0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000d5	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  000da	33 d2		 xor	 edx, edx
  000dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000df	b9 04 00 00 00	 mov	 ecx, 4
  000e4	48 f7 f1	 div	 rcx
  000e7	48 8b c2	 mov	 rax, rdx
  000ea	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Block$1[rsp]
  000ef	48 8b 54 24 38	 mov	 rdx, QWORD PTR tv153[rsp]
  000f4	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000f8	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  000fc	48 8b c8	 mov	 rcx, rax
  000ff	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  00104	48 89 44 24 40	 mov	 QWORD PTR tv92[rsp], rax
  00109	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0010e	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  00113	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv92[rsp]
  00118	48 8b d1	 mov	 rdx, rcx
  0011b	48 8b c8	 mov	 rcx, rax
  0011e	e8 00 00 00 00	 call	 ??$destroy@H@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::destroy<int>

; 1092 :             if (--_Mysize() == 0) {

  00123	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00128	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  0012d	48 89 44 24 48	 mov	 QWORD PTR tv141[rsp], rax
  00132	48 8b 44 24 48	 mov	 rax, QWORD PTR tv141[rsp]
  00137	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0013a	48 ff c8	 dec	 rax
  0013d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv141[rsp]
  00142	48 89 01	 mov	 QWORD PTR [rcx], rax
  00145	48 8b 44 24 48	 mov	 rax, QWORD PTR tv141[rsp]
  0014a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0014e	75 13		 jne	 SHORT $LN7@pop_front

; 1093 :                 _Myoff() = 0;

  00150	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00155	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  0015a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1094 :             } else {

  00161	eb 22		 jmp	 SHORT $LN6@pop_front
$LN7@pop_front:

; 1095 :                 ++_Myoff();

  00163	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00168	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  0016d	48 89 44 24 50	 mov	 QWORD PTR tv148[rsp], rax
  00172	48 8b 44 24 50	 mov	 rax, QWORD PTR tv148[rsp]
  00177	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0017a	48 ff c0	 inc	 rax
  0017d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv148[rsp]
  00182	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN6@pop_front:

; 1096 :             }
; 1097 :         }
; 1098 : 
; 1099 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1100 :         size_type _Block = _Getblock(_Myoff());
; 1101 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Myoff() % _Block_size));
; 1102 :         if (--_Mysize() == 0) {
; 1103 :             _Myoff() = 0;
; 1104 :         } else {
; 1105 :             ++_Myoff();
; 1106 :         }
; 1107 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1108 :     }

  00185	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00189	5f		 pop	 rdi
  0018a	c3		 ret	 0
?pop_front@?$deque@HV?$allocator@H@std@@@std@@QEAAXXZ ENDP ; std::deque<int,std::allocator<int> >::pop_front
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ
_TEXT	SEGMENT
$T1 = 48
this$ = 80
?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ PROC ; std::deque<int,std::allocator<int> >::front, COMDAT

; 1048 :     _NODISCARD reference front() noexcept /* strengthened */ {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
$LN4@front:

; 1049 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1050 :         _STL_VERIFY(!empty(), "front() called on empty deque");

  0000a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ ; std::deque<int,std::allocator<int> >::empty
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	75 02		 jne	 SHORT $LN7@front
  0001b	eb 6b		 jmp	 SHORT $LN9@front
$LN7@front:
  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@PEOHNLIM@front?$CI?$CJ?5called?5on?5empty?5deque@
  00024	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00030	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00035	45 33 c9	 xor	 r9d, r9d
  00038	41 b8 1a 04 00
	00		 mov	 r8d, 1050		; 0000041aH
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GG@FDHPMGE@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00045	b9 02 00 00 00	 mov	 ecx, 2
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00050	83 f8 01	 cmp	 eax, 1
  00053	75 03		 jne	 SHORT $LN11@front
  00055	cc		 int	 3
  00056	33 c0		 xor	 eax, eax
$LN11@front:
  00058	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00061	41 b9 1a 04 00
	00		 mov	 r9d, 1050		; 0000041aH
  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MM@DPCANHAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GE@NOEMPIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAd?$AAe?$AAq?$AAu?$AAe?$AA?$DM?$AAi?$AAn?$AAt?$AA?0@
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@EELNAHHD@?$AA?$CC?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd@
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 95		 jne	 SHORT $LN7@front
$LN9@front:
  00088	33 c0		 xor	 eax, eax
  0008a	85 c0		 test	 eax, eax
  0008c	0f 85 78 ff ff
	ff		 jne	 $LN4@front

; 1051 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1052 : 
; 1053 :         return *_Unchecked_begin();

  00092	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T1[rsp]
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	e8 00 00 00 00	 call	 ?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Unchecked_begin
  000a1	48 8b c8	 mov	 rcx, rax
  000a4	e8 00 00 00 00	 call	 ??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEBAAEAHXZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<int> > >::operator*

; 1054 :     }

  000a9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
?front@?$deque@HV?$allocator@H@std@@@std@@QEAAAEAHXZ ENDP ; std::deque<int,std::allocator<int> >::front
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv67 = 32
this$ = 64
?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ PROC	; std::deque<int,std::allocator<int> >::empty, COMDAT

; 1008 :     _NODISCARD bool empty() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1009 :         return _Mysize() == 0;

  0000a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  00014	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00018	75 0a		 jne	 SHORT $LN3@empty
  0001a	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00022	eb 08		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00024	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN4@empty:
  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv67[rsp]

; 1010 :     }

  00031	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
?empty@?$deque@HV?$allocator@H@std@@@std@@QEBA_NXZ ENDP	; std::deque<int,std::allocator<int> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::deque<int,std::allocator<int> >::max_size, COMDAT

; 1003 :     _NODISCARD size_type max_size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1004 :         return (_STD min)(

  0000a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
  0001c	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00021	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00026	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  0002b	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00030	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00035	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1005 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1006 :     }

  0003d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
?max_size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::deque<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 48
?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC	; std::deque<int,std::allocator<int> >::size, COMDAT

; 999  :     _NODISCARD size_type size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1000 :         return _Mysize();

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ?_Mysize@?$deque@HV?$allocator@H@std@@@std@@AEBAAEB_KXZ ; std::deque<int,std::allocator<int> >::_Mysize
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1001 :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?size@?$deque@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP	; std::deque<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
__$ReturnUdt$ = 72
?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ PROC ; std::deque<int,std::allocator<int> >::_Unchecked_begin, COMDAT

; 911  :     _Unchecked_iterator _Unchecked_begin() noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 912  :         return _Unchecked_iterator(_Myoff(), _STD addressof(_Get_data()));

  0000f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00014	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$addressof@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@YAPEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@0@AEAV10@@Z ; std::addressof<std::_Deque_val<std::_Deque_simple_types<int> > >
  00021	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002b	e8 00 00 00 00	 call	 ?_Myoff@?$deque@HV?$allocator@H@std@@@std@@AEAAAEA_KXZ ; std::deque<int,std::allocator<int> >::_Myoff
  00030	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  00035	4c 8b c1	 mov	 r8, rcx
  00038	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0003b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00040	e8 00 00 00 00	 call	 ??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
  00045	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 913  :     }

  0004a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
?_Unchecked_begin@?$deque@HV?$allocator@H@std@@@std@@QEAA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@@2@XZ ENDP ; std::deque<int,std::allocator<int> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Proxy_allocator$ = 36
$T4 = 52
this$ = 80
??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::deque<int,std::allocator<int> >::~deque<int,std::allocator<int> >, COMDAT

; 867  :     ~deque() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 868  :         _Tidy();

  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?_Tidy@?$deque@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::deque<int,std::allocator<int> >::_Tidy

; 869  :         _Alproxy_ty _Proxy_allocator(_Getal());

  0002a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002f	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Proxy_allocator$[rsp]
  0003c	e8 00 00 00 00	 call	 ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>

; 870  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  00041	48 c7 44 24 34
	00 00 00 00	 mov	 QWORD PTR $T4[rsp], 0
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00054	48 8d 54 24 34	 lea	 rdx, QWORD PTR $T4[rsp]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
  00061	48 8b d0	 mov	 rdx, rax
  00064	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Proxy_allocator$[rsp]
  00069	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 871  :     }

  0006e	48 8b cc	 mov	 rcx, rsp
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData
  00078	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0007d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
??1?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::deque<int,std::allocator<int> >::~deque<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
tv75 = 40
this$ = 64
??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::deque<int,std::allocator<int> >::deque<int,std::allocator<int> >, COMDAT

; 616  :     deque() : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000f	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Deque_val<std::_Deque_simple_types<int> >,1><>

; 617  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::deque<int,std::allocator<int> >::_Getal
  00026	48 8b d0	 mov	 rdx, rax
  00029	48 8d 4c 24 21	 lea	 rcx, QWORD PTR $T2[rsp]
  0002e	e8 00 00 00 00	 call	 ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
  00033	48 89 44 24 28	 mov	 QWORD PTR tv75[rsp], rax
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	e8 00 00 00 00	 call	 ?_Get_data@?$deque@HV?$allocator@H@std@@@std@@AEAAAEAV?$_Deque_val@U?$_Deque_simple_types@H@std@@@2@XZ ; std::deque<int,std::allocator<int> >::_Get_data
  00042	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv75[rsp]
  00047	48 8b d1	 mov	 rdx, rcx
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 618  :     }

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005b	5f		 pop	 rdi
  0005c	c3		 ret	 0
??0?$deque@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::deque<int,std::allocator<int> >::deque<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z
_TEXT	SEGMENT
this$ = 16
_Off$ = 24
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z PROC ; std::_Deque_val<std::_Deque_simple_types<int> >::_Getblock, COMDAT

; 563  :     size_type _Getblock(size_type _Off) const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 564  :         // NB: _Mapsize and _Block_size are guaranteed to be powers of 2
; 565  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0000b	33 d2		 xor	 edx, edx
  0000d	48 8b 44 24 18	 mov	 rax, QWORD PTR _Off$[rsp]
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	48 f7 f1	 div	 rcx
  0001a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00023	48 ff c9	 dec	 rcx
  00026	48 23 c1	 and	 rax, rcx

; 566  :     }

  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEBA_K_K@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<int> >::_Getblock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<int> >::_Deque_val<std::_Deque_simple_types<int> >, COMDAT

; 561  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00040	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@H@std@@@std@@QEAA@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<int> >::_Deque_val<std::_Deque_simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z PROC	; std::allocator<int *>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00014	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$07@std@@YA_K_K@Z ; std::_Get_size_of_n<8>
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
?allocate@?$allocator@PEAH@std@@QEAAPEAPEAH_K@Z ENDP	; std::allocator<int *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z PROC	; std::allocator<int *>::deallocate, COMDAT

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR _Count$[rsp]
  00019	48 c1 e0 03	 shl	 rax, 3
  0001d	48 8b d0	 mov	 rdx, rax
  00020	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00025	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 836  :     }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
?deallocate@?$allocator@PEAH@std@@QEAAXQEAPEAH_K@Z ENDP	; std::allocator<int *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00006	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH

; 729  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z PROC		; std::allocator<int>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00014	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$03@std@@YA_K_K@Z ; std::_Get_size_of_n<4>
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z PROC	; std::allocator<int>::deallocate, COMDAT

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR _Count$[rsp]
  00019	48 c1 e0 02	 shl	 rax, 2
  0001d	48 8b d0	 mov	 rdx, rax
  00020	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00025	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 836  :     }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ENDP	; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@H@std@@QEAA@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT

; 825  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??0?$allocator@H@std@@QEAA@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\pattern_searcher.cpp
_TEXT	SEGMENT
currentState$ = 32
i$1 = 36
j$2 = 40
tv69 = 48
tv143 = 56
tv150 = 64
tv134 = 72
this$ = 96
arr$ = 104
k$ = 112
text$ = 120
?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z PROC ; pattern_searcher_t::searchWords

; 138  : {

$LN12:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 139  : 	// Preprocess patterns.
; 140  : 	// Build machine with goto, failure and output functions
; 141  : 	buildMatchingMachine(arr, k);

  00019	44 8b 44 24 70	 mov	 r8d, DWORD PTR k$[rsp]
  0001e	48 8b 54 24 68	 mov	 rdx, QWORD PTR arr$[rsp]
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00028	e8 00 00 00 00	 call	 ?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; pattern_searcher_t::buildMatchingMachine

; 142  : 
; 143  : 	// Initialize current state
; 144  : 	int currentState = 0;

  0002d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR currentState$[rsp], 0

; 145  : 
; 146  : 	// Traverse the text through the nuilt machine to find
; 147  : 	// all occurrences of words in arr[]
; 148  : 	for (int i = 0; i < text.size(); ++i)

  00035	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  0003d	eb 0a		 jmp	 SHORT $LN4@searchWord
$LN2@searchWord:
  0003f	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00043	ff c0		 inc	 eax
  00045	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@searchWord:
  00049	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  0004e	48 89 44 24 30	 mov	 QWORD PTR tv69[rsp], rax
  00053	48 8b 4c 24 78	 mov	 rcx, QWORD PTR text$[rsp]
  00058	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0005d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv69[rsp]
  00062	48 3b c8	 cmp	 rcx, rax
  00065	0f 83 4a 01 00
	00		 jae	 $LN3@searchWord

; 149  : 	{
; 150  : 		currentState = findNextState(currentState, text[i]);

  0006b	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00070	48 8b d0	 mov	 rdx, rax
  00073	48 8b 4c 24 78	 mov	 rcx, QWORD PTR text$[rsp]
  00078	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0007d	44 0f b6 00	 movzx	 r8d, BYTE PTR [rax]
  00081	8b 54 24 20	 mov	 edx, DWORD PTR currentState$[rsp]
  00085	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	e8 00 00 00 00	 call	 ?findNextState@pattern_searcher_t@@AEAAHHD@Z ; pattern_searcher_t::findNextState
  0008f	89 44 24 20	 mov	 DWORD PTR currentState$[rsp], eax

; 151  : 
; 152  : 		// If match not found, move to next state
; 153  : 		if (out[currentState] == 0)

  00093	48 63 44 24 20	 movsxd	 rax, DWORD PTR currentState$[rsp]
  00098	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0009d	83 7c 81 08 00	 cmp	 DWORD PTR [rcx+rax*4+8], 0
  000a2	75 02		 jne	 SHORT $LN8@searchWord

; 154  : 			continue;

  000a4	eb 99		 jmp	 SHORT $LN2@searchWord
$LN8@searchWord:

; 155  : 
; 156  : 		// Match found, print all matching words of arr[]
; 157  : 		// using output function.
; 158  : 		for (int j = 0; j < k; ++j)

  000a6	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR j$2[rsp], 0
  000ae	eb 0a		 jmp	 SHORT $LN7@searchWord
$LN5@searchWord:
  000b0	8b 44 24 28	 mov	 eax, DWORD PTR j$2[rsp]
  000b4	ff c0		 inc	 eax
  000b6	89 44 24 28	 mov	 DWORD PTR j$2[rsp], eax
$LN7@searchWord:
  000ba	8b 44 24 70	 mov	 eax, DWORD PTR k$[rsp]
  000be	39 44 24 28	 cmp	 DWORD PTR j$2[rsp], eax
  000c2	0f 8d e8 00 00
	00		 jge	 $LN6@searchWord

; 159  : 		{
; 160  : 			if (out[currentState] & (1 << j))

  000c8	48 63 44 24 20	 movsxd	 rax, DWORD PTR currentState$[rsp]
  000cd	8b 4c 24 28	 mov	 ecx, DWORD PTR j$2[rsp]
  000d1	ba 01 00 00 00	 mov	 edx, 1
  000d6	d3 e2		 shl	 edx, cl
  000d8	8b ca		 mov	 ecx, edx
  000da	48 8b 54 24 60	 mov	 rdx, QWORD PTR this$[rsp]
  000df	8b 44 82 08	 mov	 eax, DWORD PTR [rdx+rax*4+8]
  000e3	23 c1		 and	 eax, ecx
  000e5	85 c0		 test	 eax, eax
  000e7	0f 84 be 00 00
	00		 je	 $LN9@searchWord

; 161  : 			{
; 162  : 				std::cout << "Word " << arr[j] << " appears from "

  000ed	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  000f2	48 89 44 24 38	 mov	 QWORD PTR tv143[rsp], rax
  000f7	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR j$2[rsp]
  000fc	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00100	48 8b 54 24 68	 mov	 rdx, QWORD PTR arr$[rsp]
  00105	48 03 d1	 add	 rdx, rcx
  00108	48 8b ca	 mov	 rcx, rdx
  0010b	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00110	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv143[rsp]
  00115	48 2b c8	 sub	 rcx, rax
  00118	48 8b c1	 mov	 rax, rcx
  0011b	48 ff c0	 inc	 rax
  0011e	48 89 44 24 40	 mov	 QWORD PTR tv150[rsp], rax
  00123	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR j$2[rsp]
  00128	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  0012c	48 8b 54 24 68	 mov	 rdx, QWORD PTR arr$[rsp]
  00131	48 03 d1	 add	 rdx, rcx
  00134	48 8b ca	 mov	 rcx, rdx
  00137	48 89 4c 24 48	 mov	 QWORD PTR tv134[rsp], rcx
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39748
  00143	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0014a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0014f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv134[rsp]
  00154	48 8b d1	 mov	 rdx, rcx
  00157	48 8b c8	 mov	 rcx, rax
  0015a	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39747
  00166	48 8b c8	 mov	 rcx, rax
  00169	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0016e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv150[rsp]
  00173	48 8b d1	 mov	 rdx, rcx
  00176	48 8b c8	 mov	 rcx, rax
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z
  0017f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39746
  00186	48 8b c8	 mov	 rcx, rax
  00189	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0018e	8b 54 24 24	 mov	 edx, DWORD PTR i$1[rsp]
  00192	48 8b c8	 mov	 rcx, rax
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  001a2	48 8b c8	 mov	 rcx, rax
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
$LN9@searchWord:

; 163  : 					<< i - arr[j].size() + 1 << " to " << i << std::endl;
; 164  : 			}
; 165  : 		}

  001ab	e9 00 ff ff ff	 jmp	 $LN5@searchWord
$LN6@searchWord:

; 166  : 	}

  001b0	e9 8a fe ff ff	 jmp	 $LN2@searchWord
$LN3@searchWord:

; 167  : }

  001b5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR text$[rsp]
  001ba	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001bf	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001c3	5f		 pop	 rdi
  001c4	c3		 ret	 0
?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z ENDP ; pattern_searcher_t::searchWords
_TEXT	ENDS
text$x	SEGMENT
currentState$ = 32
i$1 = 36
j$2 = 40
tv69 = 48
tv143 = 56
tv150 = 64
tv134 = 72
this$ = 96
arr$ = 104
k$ = 112
text$ = 120
?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA PROC ; `pattern_searcher_t::searchWords'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR text$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA ENDP ; `pattern_searcher_t::searchWords'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
currentState$ = 32
i$1 = 36
j$2 = 40
tv69 = 48
tv143 = 56
tv150 = 64
tv134 = 72
this$ = 96
arr$ = 104
k$ = 112
text$ = 120
?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA PROC ; `pattern_searcher_t::searchWords'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 78	 mov	 rcx, QWORD PTR text$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z@4HA ENDP ; `pattern_searcher_t::searchWords'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\pattern_searcher.cpp
_TEXT	SEGMENT
answer$ = 0
ch$ = 4
this$ = 32
currentState$ = 40
nextInput$ = 48
?findNextState@pattern_searcher_t@@AEAAHHD@Z PROC	; pattern_searcher_t::findNextState

; 124  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 10	 sub	 rsp, 16

; 125  : 	int answer = currentState;

  00013	8b 44 24 28	 mov	 eax, DWORD PTR currentState$[rsp]
  00017	89 04 24	 mov	 DWORD PTR answer$[rsp], eax

; 126  : 	int ch = nextInput - 'a';

  0001a	0f be 44 24 30	 movsx	 eax, BYTE PTR nextInput$[rsp]
  0001f	83 e8 61	 sub	 eax, 97			; 00000061H
  00022	89 44 24 04	 mov	 DWORD PTR ch$[rsp], eax
$LN2@findNextSt:

; 127  : 
; 128  : 	// If goto is not defined, use failure function
; 129  : 	while (g[answer][ch] == -1)

  00026	48 63 04 24	 movsxd	 rax, DWORD PTR answer$[rsp]
  0002a	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  00031	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00036	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  0003e	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR ch$[rsp]
  00043	83 3c 88 ff	 cmp	 DWORD PTR [rax+rcx*4], -1
  00047	75 15		 jne	 SHORT $LN3@findNextSt

; 130  : 		answer = f[answer];

  00049	48 63 04 24	 movsxd	 rax, DWORD PTR answer$[rsp]
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00052	8b 84 81 d8 07
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2008]
  00059	89 04 24	 mov	 DWORD PTR answer$[rsp], eax
  0005c	eb c8		 jmp	 SHORT $LN2@findNextSt
$LN3@findNextSt:

; 131  : 
; 132  : 	return g[answer][ch];

  0005e	48 63 04 24	 movsxd	 rax, DWORD PTR answer$[rsp]
  00062	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0006e	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  00076	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR ch$[rsp]
  0007b	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]

; 133  : }

  0007e	48 83 c4 10	 add	 rsp, 16
  00082	5f		 pop	 rdi
  00083	c3		 ret	 0
?findNextState@pattern_searcher_t@@AEAAHHD@Z ENDP	; pattern_searcher_t::findNextState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\pattern_searcher.cpp
_TEXT	SEGMENT
states$ = 32
i$4 = 36
word$5 = 40
currentState$6 = 48
j$7 = 52
ch$8 = 56
ch$9 = 60
q$ = 72
ch$10 = 116
state$11 = 120
ch$12 = 124
failure$13 = 128
$T14 = 132
tv78 = 136
tv86 = 144
this$ = 176
arr$ = 184
k$ = 192
?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; pattern_searcher_t::buildMatchingMachine

; 15   : {

$LN27:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]

; 16   : 	// Initialize all values in output function as 0.
; 17   : 	memset(out, 0, sizeof out);

  00030	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 d0 07 00
	00		 mov	 r8d, 2000		; 000007d0H
  00042	33 d2		 xor	 edx, edx
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 memset

; 18   : 
; 19   : 	// Initialize all values in goto function as -1.
; 20   : 	memset(g, -1, sizeof g);

  0004c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00054	48 05 a8 0f 00
	00		 add	 rax, 4008		; 00000fa8H
  0005a	41 b8 40 42 0f
	00		 mov	 r8d, 1000000		; 000f4240H
  00060	ba ff ff ff ff	 mov	 edx, -1
  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 memset

; 21   : 
; 22   : 	// Initially, we just have the 0 state
; 23   : 	int states = 1;

  0006d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR states$[rsp], 1

; 24   : 
; 25   : 	// Construct values for goto function, i.e., fill g[][]
; 26   : 	// This is same as building a Trie for arr[]
; 27   : 	for (int i = 0; i < k; ++i)

  00075	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$4[rsp], 0
  0007d	eb 0a		 jmp	 SHORT $LN4@buildMatch
$LN2@buildMatch:
  0007f	8b 44 24 24	 mov	 eax, DWORD PTR i$4[rsp]
  00083	ff c0		 inc	 eax
  00085	89 44 24 24	 mov	 DWORD PTR i$4[rsp], eax
$LN4@buildMatch:
  00089	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR k$[rsp]
  00090	39 44 24 24	 cmp	 DWORD PTR i$4[rsp], eax
  00094	0f 8d 51 01 00
	00		 jge	 $LN3@buildMatch

; 28   : 	{
; 29   : 		const std::string& word = arr[i];

  0009a	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$4[rsp]
  0009f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000a3	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR arr$[rsp]
  000ab	48 03 c8	 add	 rcx, rax
  000ae	48 8b c1	 mov	 rax, rcx
  000b1	48 89 44 24 28	 mov	 QWORD PTR word$5[rsp], rax

; 30   : 		int currentState = 0;

  000b6	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR currentState$6[rsp], 0

; 31   : 
; 32   : 		// Insert all characters of current word in arr[]
; 33   : 		for (int j = 0; j < word.size(); ++j)

  000be	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR j$7[rsp], 0
  000c6	eb 0a		 jmp	 SHORT $LN7@buildMatch
$LN5@buildMatch:
  000c8	8b 44 24 34	 mov	 eax, DWORD PTR j$7[rsp]
  000cc	ff c0		 inc	 eax
  000ce	89 44 24 34	 mov	 DWORD PTR j$7[rsp], eax
$LN7@buildMatch:
  000d2	48 63 44 24 34	 movsxd	 rax, DWORD PTR j$7[rsp]
  000d7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv78[rsp], rax
  000df	48 8b 4c 24 28	 mov	 rcx, QWORD PTR word$5[rsp]
  000e4	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  000e9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv78[rsp]
  000f1	48 3b c8	 cmp	 rcx, rax
  000f4	0f 83 bb 00 00
	00		 jae	 $LN6@buildMatch

; 34   : 		{
; 35   : 			int ch = word[j] - 'a' /j; //TEST crash: integer divide by 0

  000fa	48 63 44 24 34	 movsxd	 rax, DWORD PTR j$7[rsp]
  000ff	48 8b d0	 mov	 rdx, rax
  00102	48 8b 4c 24 28	 mov	 rcx, QWORD PTR word$5[rsp]
  00107	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0010c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0010f	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv86[rsp], eax
  00116	b8 61 00 00 00	 mov	 eax, 97			; 00000061H
  0011b	99		 cdq
  0011c	f7 7c 24 34	 idiv	 DWORD PTR j$7[rsp]
  00120	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv86[rsp]
  00127	2b c8		 sub	 ecx, eax
  00129	8b c1		 mov	 eax, ecx
  0012b	89 44 24 38	 mov	 DWORD PTR ch$8[rsp], eax

; 36   : 
; 37   : 			// Allocate a new node (create a new state) if a
; 38   : 			// node for ch doesn't exist.
; 39   : 			if (g[currentState][ch] == -1)

  0012f	48 63 44 24 30	 movsxd	 rax, DWORD PTR currentState$6[rsp]
  00134	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  0013b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00143	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  0014b	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR ch$8[rsp]
  00150	83 3c 88 ff	 cmp	 DWORD PTR [rax+rcx*4], -1
  00154	75 32		 jne	 SHORT $LN21@buildMatch

; 40   : 				g[currentState][ch] = states++;

  00156	48 63 44 24 30	 movsxd	 rax, DWORD PTR currentState$6[rsp]
  0015b	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  00162	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0016a	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  00172	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR ch$8[rsp]
  00177	8b 54 24 20	 mov	 edx, DWORD PTR states$[rsp]
  0017b	89 14 88	 mov	 DWORD PTR [rax+rcx*4], edx
  0017e	8b 44 24 20	 mov	 eax, DWORD PTR states$[rsp]
  00182	ff c0		 inc	 eax
  00184	89 44 24 20	 mov	 DWORD PTR states$[rsp], eax
$LN21@buildMatch:

; 41   : 
; 42   : 			currentState = g[currentState][ch];

  00188	48 63 44 24 30	 movsxd	 rax, DWORD PTR currentState$6[rsp]
  0018d	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  00194	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0019c	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  001a4	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR ch$8[rsp]
  001a9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  001ac	89 44 24 30	 mov	 DWORD PTR currentState$6[rsp], eax

; 43   : 		}

  001b0	e9 13 ff ff ff	 jmp	 $LN5@buildMatch
$LN6@buildMatch:

; 44   : 
; 45   : 		// Add current word in output function
; 46   : 		out[currentState] |= (1 << i);

  001b5	48 63 44 24 30	 movsxd	 rax, DWORD PTR currentState$6[rsp]
  001ba	8b 4c 24 24	 mov	 ecx, DWORD PTR i$4[rsp]
  001be	ba 01 00 00 00	 mov	 edx, 1
  001c3	d3 e2		 shl	 edx, cl
  001c5	8b ca		 mov	 ecx, edx
  001c7	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  001cf	8b 44 82 08	 mov	 eax, DWORD PTR [rdx+rax*4+8]
  001d3	0b c1		 or	 eax, ecx
  001d5	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR currentState$6[rsp]
  001da	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  001e2	89 44 8a 08	 mov	 DWORD PTR [rdx+rcx*4+8], eax

; 47   : 	}

  001e6	e9 94 fe ff ff	 jmp	 $LN2@buildMatch
$LN3@buildMatch:

; 48   : 
; 49   : 	// For all characters which don't have an edge from
; 50   : 	// root (or state 0) in Trie, add a goto edge to state
; 51   : 	// 0 itself
; 52   : 	for (int ch = 0; ch < MAXC; ++ch)

  001eb	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR ch$9[rsp], 0
  001f3	eb 0a		 jmp	 SHORT $LN10@buildMatch
$LN8@buildMatch:
  001f5	8b 44 24 3c	 mov	 eax, DWORD PTR ch$9[rsp]
  001f9	ff c0		 inc	 eax
  001fb	89 44 24 3c	 mov	 DWORD PTR ch$9[rsp], eax
$LN10@buildMatch:
  001ff	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00207	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0020a	39 44 24 3c	 cmp	 DWORD PTR ch$9[rsp], eax
  0020e	7d 4b		 jge	 SHORT $LN9@buildMatch

; 53   : 		if (g[0][ch] == -1)

  00210	b8 d0 07 00 00	 mov	 eax, 2000		; 000007d0H
  00215	48 6b c0 00	 imul	 rax, rax, 0
  00219	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00221	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  00229	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR ch$9[rsp]
  0022e	83 3c 88 ff	 cmp	 DWORD PTR [rax+rcx*4], -1
  00232	75 25		 jne	 SHORT $LN22@buildMatch

; 54   : 			g[0][ch] = 0;

  00234	b8 d0 07 00 00	 mov	 eax, 2000		; 000007d0H
  00239	48 6b c0 00	 imul	 rax, rax, 0
  0023d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00245	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  0024d	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR ch$9[rsp]
  00252	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [rax+rcx*4], 0
$LN22@buildMatch:
  00259	eb 9a		 jmp	 SHORT $LN8@buildMatch
$LN9@buildMatch:

; 55   : 
; 56   : 	// Now, let's build the failure function
; 57   : 
; 58   : 	// Initialize values in fail function
; 59   : 	memset(f, -1, sizeof f);

  0025b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00263	48 05 d8 07 00
	00		 add	 rax, 2008		; 000007d8H
  00269	41 b8 d0 07 00
	00		 mov	 r8d, 2000		; 000007d0H
  0026f	ba ff ff ff ff	 mov	 edx, -1
  00274	48 8b c8	 mov	 rcx, rax
  00277	e8 00 00 00 00	 call	 memset

; 60   : 
; 61   : 	// Failure function is computed in breadth first order
; 62   : 	// using a queue
; 63   : 	std::queue<int> q;

  0027c	48 8d 4c 24 48	 lea	 rcx, QWORD PTR q$[rsp]
  00281	e8 00 00 00 00	 call	 ??0?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ; std::queue<int,std::deque<int,std::allocator<int> > >::queue<int,std::deque<int,std::allocator<int> > >
  00286	90		 npad	 1

; 64   : 
; 65   : 	// Iterate over every possible input
; 66   : 	for (int ch = 0; ch < MAXC; ++ch)

  00287	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR ch$10[rsp], 0
  0028f	eb 0a		 jmp	 SHORT $LN13@buildMatch
$LN11@buildMatch:
  00291	8b 44 24 74	 mov	 eax, DWORD PTR ch$10[rsp]
  00295	ff c0		 inc	 eax
  00297	89 44 24 74	 mov	 DWORD PTR ch$10[rsp], eax
$LN13@buildMatch:
  0029b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002a3	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  002a6	39 44 24 74	 cmp	 DWORD PTR ch$10[rsp], eax
  002aa	0f 8d 8d 00 00
	00		 jge	 $LN14@buildMatch

; 67   : 	{
; 68   : 		// All nodes of depth 1 have failure function value
; 69   : 		// as 0. For example, in above diagram we move to 0
; 70   : 		// from states 1 and 3.
; 71   : 		if (g[0][ch] != 0)

  002b0	b8 d0 07 00 00	 mov	 eax, 2000		; 000007d0H
  002b5	48 6b c0 00	 imul	 rax, rax, 0
  002b9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002c1	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  002c9	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR ch$10[rsp]
  002ce	83 3c 88 00	 cmp	 DWORD PTR [rax+rcx*4], 0
  002d2	74 64		 je	 SHORT $LN23@buildMatch

; 72   : 		{
; 73   : 			f[g[0][ch]] = 0;

  002d4	b8 d0 07 00 00	 mov	 eax, 2000		; 000007d0H
  002d9	48 6b c0 00	 imul	 rax, rax, 0
  002dd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002e5	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  002ed	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR ch$10[rsp]
  002f2	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  002f6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002fe	c7 84 81 d8 07
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+2008], 0

; 74   : 			q.push(g[0][ch]);

  00309	b8 d0 07 00 00	 mov	 eax, 2000		; 000007d0H
  0030e	48 6b c0 00	 imul	 rax, rax, 0
  00312	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0031a	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  00322	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR ch$10[rsp]
  00327	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0032b	48 8b d0	 mov	 rdx, rax
  0032e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR q$[rsp]
  00333	e8 00 00 00 00	 call	 ?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z ; std::queue<int,std::deque<int,std::allocator<int> > >::push
$LN23@buildMatch:

; 75   : 		}
; 76   : 	}

  00338	e9 54 ff ff ff	 jmp	 $LN11@buildMatch
$LN14@buildMatch:

; 77   : 
; 78   : 	// Now queue has states 1 and 3
; 79   : 	while (q.size())

  0033d	48 8d 4c 24 48	 lea	 rcx, QWORD PTR q$[rsp]
  00342	e8 00 00 00 00	 call	 ?size@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEBA_KXZ ; std::queue<int,std::deque<int,std::allocator<int> > >::size
  00347	48 85 c0	 test	 rax, rax
  0034a	0f 84 f1 01 00
	00		 je	 $LN15@buildMatch

; 80   : 	{
; 81   : 		// Remove the front state from queue
; 82   : 		int state = q.front();

  00350	48 8d 4c 24 48	 lea	 rcx, QWORD PTR q$[rsp]
  00355	e8 00 00 00 00	 call	 ?front@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAAEAHXZ ; std::queue<int,std::deque<int,std::allocator<int> > >::front
  0035a	8b 00		 mov	 eax, DWORD PTR [rax]
  0035c	89 44 24 78	 mov	 DWORD PTR state$11[rsp], eax

; 83   : 		q.pop();

  00360	48 8d 4c 24 48	 lea	 rcx, QWORD PTR q$[rsp]
  00365	e8 00 00 00 00	 call	 ?pop@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ; std::queue<int,std::deque<int,std::allocator<int> > >::pop

; 84   : 
; 85   : 		// For the removed state, find failure function for
; 86   : 		// all those characters for which goto function is
; 87   : 		// not defined.
; 88   : 		for (int ch = 0; ch <= MAXC; ++ch)

  0036a	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR ch$12[rsp], 0
  00372	eb 0a		 jmp	 SHORT $LN18@buildMatch
$LN16@buildMatch:
  00374	8b 44 24 7c	 mov	 eax, DWORD PTR ch$12[rsp]
  00378	ff c0		 inc	 eax
  0037a	89 44 24 7c	 mov	 DWORD PTR ch$12[rsp], eax
$LN18@buildMatch:
  0037e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00386	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00389	39 44 24 7c	 cmp	 DWORD PTR ch$12[rsp], eax
  0038d	0f 8f a9 01 00
	00		 jg	 $LN17@buildMatch

; 89   : 		{
; 90   : 			// If goto function is defined for character 'ch'
; 91   : 			// and 'state'
; 92   : 			if (g[state][ch] != -1)

  00393	48 63 44 24 78	 movsxd	 rax, DWORD PTR state$11[rsp]
  00398	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  0039f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003a7	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  003af	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR ch$12[rsp]
  003b4	83 3c 88 ff	 cmp	 DWORD PTR [rax+rcx*4], -1
  003b8	0f 84 79 01 00
	00		 je	 $LN24@buildMatch

; 93   : 			{
; 94   : 				// Find failure state of removed state
; 95   : 				int failure = f[state];

  003be	48 63 44 24 78	 movsxd	 rax, DWORD PTR state$11[rsp]
  003c3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003cb	8b 84 81 d8 07
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2008]
  003d2	89 84 24 80 00
	00 00		 mov	 DWORD PTR failure$13[rsp], eax
$LN19@buildMatch:

; 96   : 
; 97   : 				// Find the deepest node labeled by proper
; 98   : 				// suffix of string from root to current
; 99   : 				// state.
; 100  : 				while (g[failure][ch] == -1)

  003d9	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR failure$13[rsp]
  003e1	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  003e8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003f0	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  003f8	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR ch$12[rsp]
  003fd	83 3c 88 ff	 cmp	 DWORD PTR [rax+rcx*4], -1
  00401	75 20		 jne	 SHORT $LN20@buildMatch

; 101  : 					failure = f[failure];

  00403	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR failure$13[rsp]
  0040b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00413	8b 84 81 d8 07
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2008]
  0041a	89 84 24 80 00
	00 00		 mov	 DWORD PTR failure$13[rsp], eax
  00421	eb b6		 jmp	 SHORT $LN19@buildMatch
$LN20@buildMatch:

; 102  : 
; 103  : 				failure = g[failure][ch];

  00423	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR failure$13[rsp]
  0042b	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  00432	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0043a	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  00442	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR ch$12[rsp]
  00447	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0044a	89 84 24 80 00
	00 00		 mov	 DWORD PTR failure$13[rsp], eax

; 104  : 				f[g[state][ch]] = failure;

  00451	48 63 44 24 78	 movsxd	 rax, DWORD PTR state$11[rsp]
  00456	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  0045d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00465	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  0046d	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR ch$12[rsp]
  00472	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  00476	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0047e	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR failure$13[rsp]
  00485	89 94 81 d8 07
	00 00		 mov	 DWORD PTR [rcx+rax*4+2008], edx

; 105  : 
; 106  : 				// Merge output values
; 107  : 				out[g[state][ch]] |= out[failure];

  0048c	48 63 44 24 78	 movsxd	 rax, DWORD PTR state$11[rsp]
  00491	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  00498	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004a0	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  004a8	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR ch$12[rsp]
  004ad	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  004b1	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR failure$13[rsp]
  004b9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  004c1	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  004c9	41 8b 4c 88 08	 mov	 ecx, DWORD PTR [r8+rcx*4+8]
  004ce	8b 44 82 08	 mov	 eax, DWORD PTR [rdx+rax*4+8]
  004d2	0b c1		 or	 eax, ecx
  004d4	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR ch$12[rsp]
  004d9	48 63 54 24 78	 movsxd	 rdx, DWORD PTR state$11[rsp]
  004de	48 69 d2 d0 07
	00 00		 imul	 rdx, rdx, 2000		; 000007d0H
  004e5	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  004ed	49 8d 94 10 a8
	0f 00 00	 lea	 rdx, QWORD PTR [r8+rdx+4008]
  004f5	48 63 0c 8a	 movsxd	 rcx, DWORD PTR [rdx+rcx*4]
  004f9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00501	89 44 8a 08	 mov	 DWORD PTR [rdx+rcx*4+8], eax

; 108  : 
; 109  : 				// Insert the next level node (of Trie) in Queue
; 110  : 				q.push(g[state][ch]);

  00505	48 63 44 24 78	 movsxd	 rax, DWORD PTR state$11[rsp]
  0050a	48 69 c0 d0 07
	00 00		 imul	 rax, rax, 2000		; 000007d0H
  00511	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00519	48 8d 84 01 a8
	0f 00 00	 lea	 rax, QWORD PTR [rcx+rax+4008]
  00521	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR ch$12[rsp]
  00526	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0052a	48 8b d0	 mov	 rdx, rax
  0052d	48 8d 4c 24 48	 lea	 rcx, QWORD PTR q$[rsp]
  00532	e8 00 00 00 00	 call	 ?push@?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAAXAEBH@Z ; std::queue<int,std::deque<int,std::allocator<int> > >::push
$LN24@buildMatch:

; 111  : 			}
; 112  : 		}

  00537	e9 38 fe ff ff	 jmp	 $LN16@buildMatch
$LN17@buildMatch:

; 113  : 	}

  0053c	e9 fc fd ff ff	 jmp	 $LN14@buildMatch
$LN15@buildMatch:

; 114  : 
; 115  : 	return states;

  00541	8b 44 24 20	 mov	 eax, DWORD PTR states$[rsp]
  00545	89 84 24 84 00
	00 00		 mov	 DWORD PTR $T14[rsp], eax
  0054c	48 8d 4c 24 48	 lea	 rcx, QWORD PTR q$[rsp]
  00551	e8 00 00 00 00	 call	 ??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
  00556	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR $T14[rsp]

; 116  : }

  0055d	8b f8		 mov	 edi, eax
  0055f	48 8b cc	 mov	 rcx, rsp
  00562	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$rtcFrameData
  00569	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0056e	8b c7		 mov	 eax, edi
  00570	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00577	5f		 pop	 rdi
  00578	c3		 ret	 0
?buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; pattern_searcher_t::buildMatchingMachine
_TEXT	ENDS
text$x	SEGMENT
states$ = 32
i$4 = 36
word$5 = 40
currentState$6 = 48
j$7 = 52
ch$8 = 56
ch$9 = 60
q$ = 72
ch$10 = 116
state$11 = 120
ch$12 = 124
failure$13 = 128
$T14 = 132
tv78 = 136
tv86 = 144
this$ = 176
arr$ = 184
k$ = 192
?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA PROC ; `pattern_searcher_t::buildMatchingMachine'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR q$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA ENDP ; `pattern_searcher_t::buildMatchingMachine'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
states$ = 32
i$4 = 36
word$5 = 40
currentState$6 = 48
j$7 = 52
ch$8 = 56
ch$9 = 60
q$ = 72
ch$10 = 116
state$11 = 120
ch$12 = 124
failure$13 = 128
$T14 = 132
tv78 = 136
tv86 = 144
this$ = 176
arr$ = 184
k$ = 192
?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA PROC ; `pattern_searcher_t::buildMatchingMachine'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR q$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$queue@HV?$deque@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??buildMatchingMachine@pattern_searcher_t@@AEAAHQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z@4HA ENDP ; `pattern_searcher_t::buildMatchingMachine'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\pattern_searcher.cpp
_TEXT	SEGMENT
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?search@pattern_searcher_t@@QEAAHXZ PROC		; pattern_searcher_t::search

; 171  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0000d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00012	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR [rsp+384]
  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002d	48 33 c4	 xor	 rax, rsp
  00030	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 172  : 	std::string arr[] = { "he", "she", "hers", "his" };

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39757
  0003f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR arr$[rsp]
  00044	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00049	90		 npad	 1
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39758
  00051	48 8d 4c 24 58	 lea	 rcx, QWORD PTR arr$[rsp+40]
  00056	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005b	90		 npad	 1
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39759
  00063	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR arr$[rsp+80]
  0006b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00070	90		 npad	 1
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39760
  00078	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR arr$[rsp+120]
  00080	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00085	90		 npad	 1

; 173  : 	std::string text = "ahishers";

  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39761
  0008d	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR text$[rsp]
  00095	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0009a	90		 npad	 1

; 174  : 	int k = sizeof(arr) / sizeof(arr[0]);

  0009b	c7 84 24 14 01
	00 00 04 00 00
	00		 mov	 DWORD PTR k$[rsp], 4

; 175  : 
; 176  : 	searchWords(arr, k, text);

  000a6	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  000ae	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR $T6[rsp], rax
  000b6	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR text$[rsp]
  000be	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR $T6[rsp]
  000c6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cb	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv143[rsp], rax
  000d3	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tv143[rsp]
  000db	44 8b 84 24 14
	01 00 00	 mov	 r8d, DWORD PTR k$[rsp]
  000e3	48 8d 54 24 30	 lea	 rdx, QWORD PTR arr$[rsp]
  000e8	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f0	e8 00 00 00 00	 call	 ?searchWords@pattern_searcher_t@@AEAAXQEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@HV23@@Z ; pattern_searcher_t::searchWords

; 177  : 
; 178  : 	return 0;

  000f5	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR $T7[rsp], 0
  00100	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR text$[rsp]
  00108	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0010d	90		 npad	 1
  0010e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00115	41 b8 04 00 00
	00		 mov	 r8d, 4
  0011b	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00120	48 8d 4c 24 30	 lea	 rcx, QWORD PTR arr$[rsp]
  00125	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  0012a	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR $T7[rsp]

; 179  : }

  00131	8b f8		 mov	 edi, eax
  00133	48 8b cc	 mov	 rcx, rsp
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?search@pattern_searcher_t@@QEAAHXZ$rtcFrameData
  0013d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00142	8b c7		 mov	 eax, edi
  00144	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0014c	48 33 cc	 xor	 rcx, rsp
  0014f	e8 00 00 00 00	 call	 __security_check_cookie
  00154	48 81 c4 70 01
	00 00		 add	 rsp, 368		; 00000170H
  0015b	5f		 pop	 rdi
  0015c	c3		 ret	 0
?search@pattern_searcher_t@@QEAAHXZ ENDP		; pattern_searcher_t::search
_TEXT	ENDS
text$x	SEGMENT
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 30	 lea	 rcx, QWORD PTR arr$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$0
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8d 4d 58	 lea	 rcx, QWORD PTR arr$[rbp+40]
  0003a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$1
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$2
  00046	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00050	55		 push	 rbp
  00051	57		 push	 rdi
  00052	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00056	48 8b ea	 mov	 rbp, rdx
  00059	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR arr$[rbp+80]
  00060	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$2
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$4
  0006c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00071	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00076	55		 push	 rbp
  00077	57		 push	 rdi
  00078	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007c	48 8b ea	 mov	 rbp, rdx
  0007f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00086	41 b8 04 00 00
	00		 mov	 r8d, 4
  0008c	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00091	48 8d 4d 30	 lea	 rcx, QWORD PTR arr$[rbp]
  00095	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  0009a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009e	5f		 pop	 rdi
  0009f	5d		 pop	 rbp
  000a0	c3		 ret	 0
?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$4
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$5
  000a1	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000a6	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ab	55		 push	 rbp
  000ac	57		 push	 rdi
  000ad	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000b1	48 8b ea	 mov	 rbp, rdx
  000b4	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR text$[rbp]
  000bb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c4	5f		 pop	 rdi
  000c5	5d		 pop	 rbp
  000c6	c3		 ret	 0
?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 30	 lea	 rcx, QWORD PTR arr$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$1
  00023	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00028	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0002d	55		 push	 rbp
  0002e	57		 push	 rdi
  0002f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8d 4d 58	 lea	 rcx, QWORD PTR arr$[rbp+40]
  0003a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?dtor$1@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$2
  00046	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0004b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00050	55		 push	 rbp
  00051	57		 push	 rdi
  00052	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00056	48 8b ea	 mov	 rbp, rdx
  00059	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR arr$[rbp+80]
  00060	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$2@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$4
  0006c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00071	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00076	55		 push	 rbp
  00077	57		 push	 rdi
  00078	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0007c	48 8b ea	 mov	 rbp, rdx
  0007f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00086	41 b8 04 00 00
	00		 mov	 r8d, 4
  0008c	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00091	48 8d 4d 30	 lea	 rcx, QWORD PTR arr$[rbp]
  00095	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  0009a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009e	5f		 pop	 rdi
  0009f	5d		 pop	 rbp
  000a0	c3		 ret	 0
?dtor$4@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
arr$ = 48
text$ = 232
k$ = 276
$T5 = 288
$T6 = 328
$T7 = 336
tv143 = 344
__$ArrayPad$ = 352
this$ = 384
?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA PROC	; `pattern_searcher_t::search'::`1'::dtor$5
  000a1	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  000a6	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  000ab	55		 push	 rbp
  000ac	57		 push	 rdi
  000ad	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  000b1	48 8b ea	 mov	 rbp, rdx
  000b4	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR text$[rbp]
  000bb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c4	5f		 pop	 rdi
  000c5	5d		 pop	 rbp
  000c6	c3		 ret	 0
?dtor$5@?0??search@pattern_searcher_t@@QEAAHXZ@4HA ENDP	; `pattern_searcher_t::search'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1382 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1383 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1378 :         return *this;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]

; 1379 :     }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4654 :     _CONSTEXPR20_CONTAINER const _Alty& _Getal() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 4655 :         return _Mypair._Get_first();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4656 :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4650 :     _CONSTEXPR20_CONTAINER _Alty& _Getal() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 4651 :         return _Mypair._Get_first();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4652 :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_Ptr$1 = 32
_Al$2 = 40
$T3 = 48
this$ = 80
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 4616 :     _CONSTEXPR20_CONTAINER void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 4617 :         _Mypair._Myval2._Orphan_all();

  0000a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00024	0f b6 c0	 movzx	 eax, al
  00027	85 c0		 test	 eax, eax
  00029	74 4c		 je	 SHORT $LN2@Tidy_deall

; 4619 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0002b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00034	48 89 44 24 20	 mov	 QWORD PTR _Ptr$1[rsp], rax

; 4620 :             auto& _Al          = _Getal();

  00039	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00043	48 89 44 24 28	 mov	 QWORD PTR _Al$2[rsp], rax

; 4621 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0004d	48 83 c0 08	 add	 rax, 8
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00059	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0005e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00062	48 ff c0	 inc	 rax
  00065	4c 8b c0	 mov	 r8, rax
  00068	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Ptr$1[rsp]
  0006d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Al$2[rsp]
  00072	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4623 :         }
; 4624 : 
; 4625 : #ifdef __cpp_lib_constexpr_string
; 4626 :         if (_STD is_constant_evaluated()) {
; 4627 :             _Mypair._Myval2._Bx._Ptr = nullptr;
; 4628 :             _Mypair._Myval2._Mysize  = 0;
; 4629 :             _Mypair._Myval2._Myres   = 0;
; 4630 :         } else
; 4631 : #endif // __cpp_lib_constexpr_string
; 4632 :         {
; 4633 :             _Mypair._Myval2._Mysize = 0;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0007c	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00084	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00089	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00091	c6 44 24 30 00	 mov	 BYTE PTR $T3[rsp], 0
  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	48 6b c0 00	 imul	 rax, rax, 0
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000a4	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000a9	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T3[rsp]
  000ae	48 8b c8	 mov	 rcx, rax
  000b1	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  000b6	90		 npad	 1

; 4637 :         }
; 4638 :     }

  000b7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 32
$T1 = 40
this$ = 64
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT

; 4594 :     _CONSTEXPR20_CONTAINER void _Tidy_init() noexcept { // initialize basic_string data members

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 4595 :         auto& _My_data   = _Mypair._Myval2;

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 89 44 24 20	 mov	 QWORD PTR _My_data$[rsp], rax

; 4596 :         _My_data._Mysize = 0;

  00014	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  00019	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR _My_data$[rsp]
  00026	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002e	c6 44 24 28 00	 mov	 BYTE PTR $T1[rsp], 0
  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 00	 imul	 rax, rax, 0
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _My_data$[rsp]
  00041	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  00046	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T1[rsp]
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 4613 :         }
; 4614 :     }

  00053	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 48
_Requested$ = 56
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4500 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 4501 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00014	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00019	4c 8b c0	 mov	 r8, rax
  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Requested$[rsp]
  0002a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth

; 4502 :     }

  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 40
$T4 = 56
_Requested$ = 80
_Old$ = 88
_Max$ = 96
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4487 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00019	b9 08 00 00 00	 mov	 ecx, 8
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002a	48 8b 44 24 50	 mov	 rax, QWORD PTR _Requested$[rsp]
  0002f	48 83 c8 0f	 or	 rax, 15
  00033	48 89 44 24 28	 mov	 QWORD PTR _Masked$[rsp], rax

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	48 8b 44 24 60	 mov	 rax, QWORD PTR _Max$[rsp]
  0003d	48 39 44 24 28	 cmp	 QWORD PTR _Masked$[rsp], rax
  00042	76 07		 jbe	 SHORT $LN2@Calculate_

; 4490 :             return _Max;

  00044	48 8b 44 24 60	 mov	 rax, QWORD PTR _Max$[rsp]
  00049	eb 59		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0004b	33 d2		 xor	 edx, edx
  0004d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Old$[rsp]
  00052	b9 02 00 00 00	 mov	 ecx, 2
  00057	48 f7 f1	 div	 rcx
  0005a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Max$[rsp]
  0005f	48 2b c8	 sub	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 39 44 24 58	 cmp	 QWORD PTR _Old$[rsp], rax
  0006a	76 07		 jbe	 SHORT $LN3@Calculate_

; 4494 :             return _Max;

  0006c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Max$[rsp]
  00071	eb 31		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4495 :         }
; 4496 : 
; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00073	33 d2		 xor	 edx, edx
  00075	48 8b 44 24 58	 mov	 rax, QWORD PTR _Old$[rsp]
  0007a	b9 02 00 00 00	 mov	 ecx, 2
  0007f	48 f7 f1	 div	 rcx
  00082	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Old$[rsp]
  00087	48 03 c8	 add	 rcx, rax
  0008a	48 8b c1	 mov	 rax, rcx
  0008d	48 89 44 24 38	 mov	 QWORD PTR $T4[rsp], rax
  00092	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T4[rsp]
  00097	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Masked$[rsp]
  0009c	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  000a1	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4498 :     }

  000a4	48 8b f8	 mov	 rdi, rax
  000a7	48 8b cc	 mov	 rcx, rsp
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData
  000b1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b6	48 8b c7	 mov	 rax, rdi
  000b9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000bd	5f		 pop	 rdi
  000be	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 40
_Storage_max$ = 56
$T4 = 64
$T5 = 72
$T6 = 80
this$ = 112
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 3943 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type max_size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000f	b9 10 00 00 00	 mov	 ecx, 16
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 3944 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00020	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  00032	48 89 44 24 28	 mov	 QWORD PTR _Alloc_max$[rsp], rax

; 3945 :         const size_type _Storage_max = // can always store small string

  00037	48 c7 44 24 40
	10 00 00 00	 mov	 QWORD PTR $T4[rsp], 16
  00040	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T4[rsp]
  00045	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Alloc_max$[rsp]
  0004a	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 89 44 24 38	 mov	 QWORD PTR _Storage_max$[rsp], rax

; 3946 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3947 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00057	48 8b 44 24 38	 mov	 rax, QWORD PTR _Storage_max$[rsp]
  0005c	48 ff c8	 dec	 rax
  0005f	48 89 44 24 48	 mov	 QWORD PTR $T5[rsp], rax
  00064	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00069	48 89 44 24 50	 mov	 QWORD PTR $T6[rsp], rax
  0006e	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T5[rsp]
  00073	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T6[rsp]
  00078	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  0007d	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 3948 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3949 :         );
; 3950 :     }

  00080	48 8b f8	 mov	 rdi, rax
  00083	48 8b cc	 mov	 rcx, rsp
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
  0008d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00092	48 8b c7	 mov	 rax, rdi
  00095	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 16
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 3939 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 3940 :         return _Mypair._Myval2._Mysize;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 3941 :     }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 48
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT

; 3925 :     _NODISCARD _CONSTEXPR20_CONTAINER _Ret_z_ const _Elem* data() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3926 :         return _Mypair._Myval2._Myptr();

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b c8	 mov	 rcx, rax
  00012	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3927 :     }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z
_TEXT	SEGMENT
this$ = 64
_Off$ = 72
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT

; 3847 :     /* strengthened */ {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
$LN4@operator:

; 3848 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3849 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");

  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00018	48 39 44 24 48	 cmp	 QWORD PTR _Off$[rsp], rax
  0001d	77 02		 ja	 SHORT $LN7@operator
  0001f	eb 6b		 jmp	 SHORT $LN9@operator
$LN7@operator:
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
  00028	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	45 33 c9	 xor	 r9d, r9d
  0003c	41 b8 09 0f 00
	00		 mov	 r8d, 3849		; 00000f09H
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@FKEOHBGC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00049	b9 02 00 00 00	 mov	 ecx, 2
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00054	83 f8 01	 cmp	 eax, 1
  00057	75 03		 jne	 SHORT $LN11@operator
  00059	cc		 int	 3
  0005a	33 c0		 xor	 eax, eax
$LN11@operator:
  0005c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00065	41 b9 09 0f 00
	00		 mov	 r9d, 3849		; 00000f09H
  0006b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@LAIGCHJK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00086	33 c0		 xor	 eax, eax
  00088	85 c0		 test	 eax, eax
  0008a	75 95		 jne	 SHORT $LN7@operator
$LN9@operator:
  0008c	33 c0		 xor	 eax, eax
  0008e	85 c0		 test	 eax, eax
  00090	0f 85 79 ff ff
	ff		 jne	 $LN4@operator

; 3850 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3851 :         return _Mypair._Myval2._Myptr()[_Off];

  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000a3	48 03 44 24 48	 add	 rax, QWORD PTR _Off$[rsp]

; 3852 :     }

  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
_TEXT	SEGMENT
this$ = 64
_Off$ = 72
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT

; 3839 :     _NODISCARD _CONSTEXPR20_CONTAINER reference operator[](const size_type _Off) noexcept /* strengthened */ {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
$LN4@operator:

; 3840 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3841 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");

  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00018	48 39 44 24 48	 cmp	 QWORD PTR _Off$[rsp], rax
  0001d	77 02		 ja	 SHORT $LN7@operator
  0001f	eb 6b		 jmp	 SHORT $LN9@operator
$LN7@operator:
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
  00028	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	45 33 c9	 xor	 r9d, r9d
  0003c	41 b8 01 0f 00
	00		 mov	 r8d, 3841		; 00000f01H
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@FKEOHBGC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00049	b9 02 00 00 00	 mov	 ecx, 2
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00054	83 f8 01	 cmp	 eax, 1
  00057	75 03		 jne	 SHORT $LN11@operator
  00059	cc		 int	 3
  0005a	33 c0		 xor	 eax, eax
$LN11@operator:
  0005c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00065	41 b9 01 0f 00
	00		 mov	 r9d, 3841		; 00000f01H
  0006b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@LAIGCHJK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00086	33 c0		 xor	 eax, eax
  00088	85 c0		 test	 eax, eax
  0008a	75 95		 jne	 SHORT $LN7@operator
$LN9@operator:
  0008c	33 c0		 xor	 eax, eax
  0008e	85 c0		 test	 eax, eax
  00090	0f 85 79 ff ff
	ff		 jne	 $LN4@operator

; 3842 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3843 :         return _Mypair._Myval2._Myptr()[_Off];

  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  000a3	48 03 44 24 48	 add	 rax, QWORD PTR _Off$[rsp]

; 3844 :     }

  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3263 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00014	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  00021	4c 8b c0	 mov	 r8, rax
  00024	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3265 :     }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_Old_ptr$1 = 32
$T2 = 40
$T3 = 41
this$ = 64
_Ptr$ = 72
_Count$ = 80
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001d	48 39 44 24 50	 cmp	 QWORD PTR _Count$[rsp], rax
  00022	77 5d		 ja	 SHORT $LN2@assign

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00031	48 89 44 24 20	 mov	 QWORD PTR _Old_ptr$1[rsp], rax

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Count$[rsp]
  00040	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  00044	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  00049	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Old_ptr$1[rsp]
  00053	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00058	c6 44 24 28 00	 mov	 BYTE PTR $T2[rsp], 0
  0005d	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00062	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Old_ptr$1[rsp]
  00067	48 03 c8	 add	 rcx, rax
  0006a	48 8b c1	 mov	 rax, rcx
  0006d	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T2[rsp]
  00072	48 8b c8	 mov	 rcx, rax
  00075	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3251 :             return *this;

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0007f	eb 2b		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3252 :         }
; 3253 : 
; 3254 :         return _Reallocate_for(

  00081	48 8d 44 24 29	 lea	 rax, QWORD PTR $T3[rsp]
  00086	48 8b f8	 mov	 rdi, rax
  00089	33 c0		 xor	 eax, eax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	f3 aa		 rep stosb
  00092	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Ptr$[rsp]
  00097	44 0f b6 44 24
	29		 movzx	 r8d, BYTE PTR $T3[rsp]
  0009d	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Count$[rsp]
  000a2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a7	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
$LN1@assign:

; 3255 :             _Count,
; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3257 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S8$ = 52
_To_delete$ = 72
this$ = 96
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000f	b9 0c 00 00 00	 mov	 ecx, 12
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 3003 :         _Tidy_deallocate();

  00020	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3004 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3005 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0002a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S8$[rsp]
  0003c	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00041	48 8d 44 24 34	 lea	 rax, QWORD PTR $S8$[rsp]
  00046	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 3006 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  0004b	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00053	48 89 44 24 48	 mov	 QWORD PTR _To_delete$[rsp], rax

; 3007 :         _Mypair._Myval2._Myproxy = nullptr;

  00058	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0005d	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3008 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00064	48 8b 54 24 48	 mov	 rdx, QWORD PTR _To_delete$[rsp]
  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Alproxy$[rsp]
  0006e	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 3009 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3010 :     }

  00073	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00080	48 8b cc	 mov	 rcx, rsp
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData
  0008a	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00093	5f		 pop	 rdi
  00094	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
_TEXT	SEGMENT
_Right_data$ = 32
_Right_size$ = 40
_Right_ptr$ = 48
_My_data$ = 56
_Stay_small$ = 64
_Al$ = 72
_New_capacity$ = 80
_New_array$ = 104
$T4 = 120
$T5 = 128
tv72 = 136
tv134 = 144
this$ = 176
_Right$ = 184
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT

; 2915 :     _CONSTEXPR20_CONTAINER void _Construct_lv_contents(const basic_string& _Right) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]

; 2916 :         // assign by copying data stored in _Right
; 2917 :         // pre: this != &_Right
; 2918 :         // pre: *this owns no memory, iterators orphaned (note:
; 2919 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2920 :         auto& _Right_data             = _Right._Mypair._Myval2;

  0002b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR _Right$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR _Right_data$[rsp], rax

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR _Right_data$[rsp]
  0003d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00041	48 89 44 24 28	 mov	 QWORD PTR _Right_size$[rsp], rax

; 2922 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Right_data$[rsp]
  0004b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00050	48 89 44 24 30	 mov	 QWORD PTR _Right_ptr$[rsp], rax

; 2923 :         auto& _My_data                = _Mypair._Myval2;

  00055	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0005d	48 89 44 24 38	 mov	 QWORD PTR _My_data$[rsp], rax

; 2924 : 
; 2925 : #ifdef __cpp_lib_constexpr_string
; 2926 :         const bool _Stay_small = _Right_size < _BUF_SIZE && !_STD is_constant_evaluated();
; 2927 : #else // ^^^ __cpp_lib_constexpr_string / !__cpp_lib_constexpr_string vvv
; 2928 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  00062	48 83 7c 24 28
	10		 cmp	 QWORD PTR _Right_size$[rsp], 16
  00068	73 0a		 jae	 SHORT $LN4@Construct_
  0006a	c6 84 24 88 00
	00 00 01	 mov	 BYTE PTR tv72[rsp], 1
  00072	eb 08		 jmp	 SHORT $LN5@Construct_
$LN4@Construct_:
  00074	c6 84 24 88 00
	00 00 00	 mov	 BYTE PTR tv72[rsp], 0
$LN5@Construct_:
  0007c	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR tv72[rsp]
  00084	88 44 24 40	 mov	 BYTE PTR _Stay_small$[rsp], al

; 2929 : #endif // __cpp_lib_constexpr_string
; 2930 : 
; 2931 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2932 :         // requires it
; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00088	0f b6 44 24 40	 movzx	 eax, BYTE PTR _Stay_small$[rsp]
  0008d	85 c0		 test	 eax, eax
  0008f	74 3c		 je	 SHORT $LN2@Construct_

; 2934 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  00091	48 8b 44 24 38	 mov	 rax, QWORD PTR _My_data$[rsp]
  00096	48 83 c0 08	 add	 rax, 8
  0009a	41 b8 10 00 00
	00		 mov	 r8d, 16
  000a0	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Right_ptr$[rsp]
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 2935 :             _My_data._Mysize = _Right_size;

  000ad	48 8b 44 24 38	 mov	 rax, QWORD PTR _My_data$[rsp]
  000b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right_size$[rsp]
  000b7	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  000bb	48 8b 44 24 38	 mov	 rax, QWORD PTR _My_data$[rsp]
  000c0	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 2937 :             return;

  000c8	e9 cd 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();

  000cd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d5	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000da	48 89 44 24 48	 mov	 QWORD PTR _Al$[rsp], rax

; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  000df	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e7	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  000ec	48 89 44 24 78	 mov	 QWORD PTR $T4[rsp], rax
  000f1	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right_size$[rsp]
  000f6	48 83 c8 0f	 or	 rax, 15
  000fa	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  00102	48 8d 54 24 78	 lea	 rdx, QWORD PTR $T4[rsp]
  00107	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  0010f	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  00114	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00117	48 89 44 24 50	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  0011c	48 8b 44 24 50	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  00121	48 ff c0	 inc	 rax
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al$[rsp]
  0012c	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00131	48 89 44 24 68	 mov	 QWORD PTR _New_array$[rsp], rax

; 2943 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00136	48 8b 44 24 38	 mov	 rax, QWORD PTR _My_data$[rsp]
  0013b	48 83 c0 08	 add	 rax, 8
  0013f	48 8d 54 24 68	 lea	 rdx, QWORD PTR _New_array$[rsp]
  00144	48 8b c8	 mov	 rcx, rax
  00147	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2944 : 
; 2945 : #ifdef __cpp_lib_constexpr_string
; 2946 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2947 :             _Traits::assign(_Unfancy(_New_array), _New_capacity + 1, _Elem());
; 2948 :         }
; 2949 : #endif // __cpp_lib_constexpr_string
; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0014c	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right_size$[rsp]
  00151	48 ff c0	 inc	 rax
  00154	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv134[rsp], rax
  0015c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _New_array$[rsp]
  00161	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00166	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv134[rsp]
  0016e	4c 8b c1	 mov	 r8, rcx
  00171	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Right_ptr$[rsp]
  00176	48 8b c8	 mov	 rcx, rax
  00179	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 2951 :         _My_data._Mysize = _Right_size;

  0017e	48 8b 44 24 38	 mov	 rax, QWORD PTR _My_data$[rsp]
  00183	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right_size$[rsp]
  00188	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2952 :         _My_data._Myres  = _New_capacity;

  0018c	48 8b 44 24 38	 mov	 rax, QWORD PTR _My_data$[rsp]
  00191	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  00196	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
$LN1@Construct_:

; 2953 :     }

  0019a	48 8b cc	 mov	 rcx, rsp
  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z$rtcFrameData
  001a4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001a9	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  001b0	5f		 pop	 rdi
  001b1	c3		 ret	 0
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2517 :     _CONSTEXPR20_CONTAINER basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 18 00 00 00	 mov	 ecx, 24
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  0002b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00033	0f b6 54 24 74	 movzx	 edx, BYTE PTR $T5[rsp]
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00040	90		 npad	 1

; 2518 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00041	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00049	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0004e	48 8b d0	 mov	 rdx, rax
  00051	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S10$[rsp]
  00056	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005b	48 8d 44 24 34	 lea	 rax, QWORD PTR $S10$[rsp]
  00060	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 2519 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00065	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0006d	4c 8b c0	 mov	 r8, rax
  00070	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  00075	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  0007a	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0007f	90		 npad	 1

; 2520 :         _Tidy_init();

  00080	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00088	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2521 :         assign(_Ptr);

  0008d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00095	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2522 :         _Proxy._Release();

  000a2	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000a7	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  000ac	90		 npad	 1

; 2523 :     }

  000ad	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000b2	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000b7	90		 npad	 1
  000b8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000c0	48 8b f8	 mov	 rdi, rax
  000c3	48 8b cc	 mov	 rcx, rsp
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z$rtcFrameData
  000cd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d2	48 8b c7	 mov	 rax, rdi
  000d5	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000dc	5f		 pop	 rdi
  000dd	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S10$ = 52
_Proxy$ = 88
$T5 = 116
this$ = 144
_Ptr$ = 152
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 117
this$ = 144
_Right$ = 152
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2451 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 18 00 00 00	 mov	 ecx, 24
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  0002b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Right$[rsp]
  00033	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00038	48 8b d0	 mov	 rdx, rax
  0003b	48 8d 4c 24 74	 lea	 rcx, QWORD PTR $T5[rsp]
  00040	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  00045	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0004d	4c 8b c0	 mov	 r8, rax
  00050	0f b6 54 24 75	 movzx	 edx, BYTE PTR $T6[rsp]
  00055	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
  0005a	90		 npad	 1

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0005b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8d 4c 24 34	 lea	 rcx, QWORD PTR $S12$[rsp]
  00070	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00075	48 8d 44 24 34	 lea	 rax, QWORD PTR $S12$[rsp]
  0007a	48 89 44 24 20	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0007f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00087	4c 8b c0	 mov	 r8, rax
  0008a	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  0008f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  00094	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  00099	90		 npad	 1

; 2454 :         _Construct_lv_contents(_Right);

  0009a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR _Right$[rsp]
  000a2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000aa	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2455 :         _Proxy._Release();

  000af	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000b4	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  000b9	90		 npad	 1

; 2456 :     }

  000ba	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  000bf	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000c4	90		 npad	 1
  000c5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000cd	48 8b f8	 mov	 rdi, rax
  000d0	48 8b cc	 mov	 rcx, rsp
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z$rtcFrameData
  000da	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000df	48 8b c7	 mov	 rax, rdi
  000e2	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  000e9	5f		 pop	 rdi
  000ea	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 117
this$ = 144
_Right$ = 152
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 117
this$ = 144
_Right$ = 152
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 117
this$ = 144
_Right$ = 152
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	5f		 pop	 rdi
  00024	5d		 pop	 rbp
  00025	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 32
$S12$ = 52
_Proxy$ = 88
$T5 = 116
$T6 = 117
this$ = 144
_Right$ = 152
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 58	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00017	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 83 c0 08	 add	 rax, 8
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5f		 pop	 rdi
  00020	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 0
this$ = 32
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 2313 :     _CONSTEXPR20_CONTAINER bool _Large_string_engaged() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16

; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;

  0000a	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 83 78 20 10	 cmp	 QWORD PTR [rax+32], 16
  00014	72 09		 jb	 SHORT $LN3@Large_stri
  00016	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv66[rsp], 1
  0001d	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  0001f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv66[rsp], 0
$LN4@Large_stri:
  00026	0f b6 04 24	 movzx	 eax, BYTE PTR tv66[rsp]

; 2320 :     }

  0002a	48 83 c4 10	 add	 rsp, 16
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2304 :     _CONSTEXPR20_CONTAINER const value_type* _Myptr() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2305 :         const value_type* _Result = _Bx._Buf;

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 83 c0 08	 add	 rax, 8
  00013	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax

; 2306 :         if (_Large_string_engaged()) {

  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00022	0f b6 c0	 movzx	 eax, al
  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN2@Myptr

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00032	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00037	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2308 :         }
; 2309 : 
; 2310 :         return _Result;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR _Result$[rsp]

; 2311 :     }

  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2295 :     _CONSTEXPR20_CONTAINER value_type* _Myptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2296 :         value_type* _Result = _Bx._Buf;

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 83 c0 08	 add	 rax, 8
  00013	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax

; 2297 :         if (_Large_string_engaged()) {

  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00022	0f b6 c0	 movzx	 eax, al
  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN2@Myptr

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00032	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00037	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2299 :         }
; 2300 : 
; 2301 :         return _Result;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR _Result$[rsp]

; 2302 :     }

  00041	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 2284 :     _CONSTEXPR20_CONTAINER _String_val() noexcept : _Bx() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 83 c0 08	 add	 rax, 8
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2285 : 
; 2286 :     // length of internal buffer, [1, 16]:
; 2287 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2288 :     // roundup mask for allocated buffers, [0, 15]:
; 2289 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2290 :                                            : sizeof(value_type) <= 2 ? 7
; 2291 :                                            : sizeof(value_type) <= 4 ? 3
; 2292 :                                            : sizeof(value_type) <= 8 ? 1
; 2293 :                                                                      : 0;
; 2294 : 
; 2295 :     _CONSTEXPR20_CONTAINER value_type* _Myptr() noexcept {
; 2296 :         value_type* _Result = _Bx._Buf;
; 2297 :         if (_Large_string_engaged()) {
; 2298 :             _Result = _Unfancy(_Bx._Ptr);
; 2299 :         }
; 2300 : 
; 2301 :         return _Result;
; 2302 :     }
; 2303 : 
; 2304 :     _CONSTEXPR20_CONTAINER const value_type* _Myptr() const noexcept {
; 2305 :         const value_type* _Result = _Bx._Buf;
; 2306 :         if (_Large_string_engaged()) {
; 2307 :             _Result = _Unfancy(_Bx._Ptr);
; 2308 :         }
; 2309 : 
; 2310 :         return _Result;
; 2311 :     }
; 2312 : 
; 2313 :     _CONSTEXPR20_CONTAINER bool _Large_string_engaged() const noexcept {
; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;
; 2320 :     }
; 2321 : 
; 2322 :     _CONSTEXPR20_CONTAINER void _Check_offset(const size_type _Off) const {
; 2323 :         // checks whether _Off is in the bounds of [0, size()]
; 2324 :         if (_Mysize < _Off) {
; 2325 :             _Xran();
; 2326 :         }
; 2327 :     }
; 2328 : 
; 2329 :     _CONSTEXPR20_CONTAINER void _Check_offset_exclusive(const size_type _Off) const {
; 2330 :         // checks whether _Off is in the bounds of [0, size())
; 2331 :         if (_Mysize <= _Off) {
; 2332 :             _Xran();
; 2333 :         }
; 2334 :     }
; 2335 : 
; 2336 :     [[noreturn]] static void _Xran() {
; 2337 :         _Xout_of_range("invalid string position");
; 2338 :     }
; 2339 : 
; 2340 :     _CONSTEXPR20_CONTAINER size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2341 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2342 :         return (_STD min)(_Size, _Mysize - _Off);
; 2343 :     }
; 2344 : 
; 2345 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers
; 2347 : 
; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2349 : 
; 2350 :         value_type _Buf[_BUF_SIZE];
; 2351 :         pointer _Ptr;
; 2352 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2353 :     } _Bx;
; 2354 : 
; 2355 :     size_type _Mysize = 0; // current length of string

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 2284 :     _CONSTEXPR20_CONTAINER _String_val() noexcept : _Bx() {}

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
_Al$ = 24
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 731  :     _NODISCARD static _CONSTEXPR20_DYNALLOC _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 732  :         return _Al;

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 733  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00006	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 729  :     }

  0000d	5f		 pop	 rdi
  0000e	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00014	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YA_K_K@Z ; std::_Get_size_of_n<1>
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  00019	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0001e	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 836  :     }

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5f		 pop	 rdi
  00028	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 825  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2373 : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2374 :     _Xlength_error("string too long");

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  0000d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2375 : }

  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5f		 pop	 rdi
  00017	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 477  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN3:
  00000	40 57		 push	 rdi

; 478  :         return static_cast<int_type>(EOF);

  00002	b8 ff ff ff ff	 mov	 eax, -1

; 479  :     }

  00007	5f		 pop	 rdi
  00008	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
_Left$ = 32
_Right$ = 40
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 470  :         return _Left == _Right;

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00014	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00019	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001b	39 08		 cmp	 DWORD PTR [rax], ecx
  0001d	75 09		 jne	 SHORT $LN3@eq_int_typ
  0001f	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  00026	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@eq_int_typ:
  0002f	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]

; 471  :     }

  00033	48 83 c4 10	 add	 rsp, 16
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 16
_Right$ = 24
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 449  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 450  :         _Left = _Right;

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR _Left$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Right$[rsp]
  00015	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00018	88 08		 mov	 BYTE PTR [rax], cl

; 451  :     }

  0001a	5f		 pop	 rdi
  0001b	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 48
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  0000f	e8 00 00 00 00	 call	 strlen

; 413  : #endif // _HAS_CXX17
; 414  :     }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 80   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 81   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 82   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 83   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 84   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 85   : #ifdef __cpp_lib_is_constant_evaluated
; 86   :         if (_STD is_constant_evaluated()) {
; 87   :             // dest: [_First1, _First1 + _Count)
; 88   :             // src: [_First2, _First2 + _Count)
; 89   :             // We need to handle overlapping ranges.
; 90   :             // If _First1 is in the src range, we need a backward loop.
; 91   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 92   : 
; 93   :             if (_First1 == _First2) {
; 94   :                 return _First1; // Self-assignment; either loop would work, but returning immediately is faster.
; 95   :             }
; 96   : 
; 97   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 98   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 99   :             bool _Loop_forward = true;
; 100  : 
; 101  :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 102  :                 if (_First1 == _Src) {
; 103  :                     _Loop_forward = false;
; 104  :                     break;
; 105  :                 }
; 106  :             }
; 107  : 
; 108  :             if (_Loop_forward) {
; 109  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 110  :                     _First1[_Idx] = _First2[_Idx];
; 111  :                 }
; 112  :             } else {
; 113  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 114  :                     _First1[_Count - 1 - _Idx] = _First2[_Count - 1 - _Idx];
; 115  :                 }
; 116  :             }
; 117  : 
; 118  :             return _First1;
; 119  :         }
; 120  : #endif // __cpp_lib_is_constant_evaluated
; 121  : 
; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00014	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First2$[rsp]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First1$[rsp]
  00023	e8 00 00 00 00	 call	 memmove

; 123  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 124  : 
; 125  :         return _First1;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR _First1$[rsp]

; 126  :     }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 49   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 50   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 51   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 52   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 53   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 54   : #ifdef __cpp_lib_is_constant_evaluated
; 55   :         if (_STD is_constant_evaluated()) {
; 56   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 57   :             for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 58   :                 _First1[_Idx] = _First2[_Idx];
; 59   :             }
; 60   : 
; 61   :             return _First1;
; 62   :         }
; 63   : #endif // __cpp_lib_is_constant_evaluated
; 64   : 
; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00014	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First2$[rsp]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First1$[rsp]
  00023	e8 00 00 00 00	 call	 memcpy

; 66   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 67   : 
; 68   :         return _First1;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR _First1$[rsp]

; 69   :     }

  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5f		 pop	 rdi
  00032	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1303 :     _CONSTEXPR20_CONTAINER _Basic_container_proxy_ptr12()             = default;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1296 :     _Container_proxy* _Ptr = nullptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1303 :     _CONSTEXPR20_CONTAINER _Basic_container_proxy_ptr12()             = default;

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1298 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1299 :         _Ptr = nullptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1300 :     }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ PROC	; std::_Container_base12::_Orphan_all_locked, COMDAT

; 1095 :     void _Orphan_all_locked() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000f	b9 08 00 00 00	 mov	 ecx, 8
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1096 :         _Lockit _Lock(_LOCK_DEBUG);

  00020	ba 03 00 00 00	 mov	 edx, 3
  00025	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1097 :         _Orphan_all_unlocked();

  00030	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00035	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked

; 1098 :     }

  0003a	48 8d 4c 24 24	 lea	 rcx, QWORD PTR _Lock$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00045	48 8b cc	 mov	 rcx, rsp
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcFrameData
  0004f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00054	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ ENDP	; std::_Container_base12::_Orphan_all_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked, COMDAT

; 1220 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all_unlocked() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16

; 1221 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

  0000a	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	48 83 c0 08	 add	 rax, 8
  00016	48 89 04 24	 mov	 QWORD PTR _Pnext$1[rsp], rax
  0001a	eb 12		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0001c	48 8b 04 24	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 8b 0c 24	 mov	 rcx, QWORD PTR _Pnext$1[rsp]
  00027	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002b	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@Orphan_all:
  0002e	48 8b 04 24	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  00032	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00036	74 10		 je	 SHORT $LN3@Orphan_all

; 1222 :         _Pnext->_Myproxy = nullptr;

  00038	48 8b 04 24	 mov	 rax, QWORD PTR _Pnext$1[rsp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1223 :     }

  00046	eb d4		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1224 :     _Myproxy->_Myfirstiter = nullptr;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1225 : }

  00058	48 83 c4 10	 add	 rsp, 16
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1227 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1228 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1229 :     if (_Myproxy) { // proxy allocated, drain it

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00013	74 0a		 je	 SHORT $LN2@Orphan_all

; 1230 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1231 :         if (_STD is_constant_evaluated()) {
; 1232 :             _Orphan_all_unlocked();
; 1233 :         } else
; 1234 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1235 :         {
; 1236 :             _Orphan_all_locked();

  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001a	e8 00 00 00 00	 call	 ?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked
$LN2@Orphan_all:

; 1237 :         }
; 1238 :     }
; 1239 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1240 : }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 1065 : 
; 1066 :     _Container_base12(const _Container_base12&) = delete;
; 1067 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1068 : 
; 1069 :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept;
; 1070 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1071 : 
; 1072 :     template <class _Alloc>
; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {
; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1075 :         _Construct_in_place(*_New_proxy, this);
; 1076 :         _Myproxy            = _New_proxy;
; 1077 :         _New_proxy->_Mycont = this;
; 1078 :     }
; 1079 : 
; 1080 :     template <class _Alloc>
; 1081 :     _CONSTEXPR20_CONTAINER void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1082 :         // pre: no iterators refer to the existing proxy
; 1083 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1084 :         _Construct_in_place(*_New_proxy, this);
; 1085 :         _New_proxy->_Mycont = this;
; 1086 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1087 :     }
; 1088 : 
; 1089 :     _Container_proxy* _Myproxy = nullptr;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Mycont_$[rsp]
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1057 : 
; 1058 :     const _Container_base12* _Mycont       = nullptr;
; 1059 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00018	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  00025	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 16
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 978  : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 979  :     // convert size_t to size_t, unchanged
; 980  :     return _Len;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR _Len$[rsp]

; 981  : }

  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 153  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

  0000f	48 8b 44 24 68	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0001b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00020	48 89 01	 mov	 QWORD PTR [rcx], rax

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00023	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 44 24 30	 mov	 QWORD PTR _Ptr_user$[rsp], rax

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00030	b8 08 00 00 00	 mov	 eax, 8
  00035	48 6b c0 ff	 imul	 rax, rax, -1
  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr_user$[rsp]
  0003e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00042	48 89 44 24 38	 mov	 QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00047	b8 08 00 00 00	 mov	 eax, 8
  0004c	48 6b c0 fe	 imul	 rax, rax, -2
  00050	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr_user$[rsp]
  00055	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  0005f	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  00063	75 02		 jne	 SHORT $LN14@Adjust_man
  00065	eb 6b		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0006e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00073	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	45 33 c9	 xor	 r9d, r9d
  00082	41 b8 a2 00 00
	00		 mov	 r8d, 162		; 000000a2H
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0008f	b9 02 00 00 00	 mov	 ecx, 2
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0009a	83 f8 01	 cmp	 eax, 1
  0009d	75 03		 jne	 SHORT $LN19@Adjust_man
  0009f	cc		 int	 3
  000a0	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000a2	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000ab	41 b9 a2 00 00
	00		 mov	 r9d, 162		; 000000a2H
  000b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000cc	33 c0		 xor	 eax, eax
  000ce	85 c0		 test	 eax, eax
  000d0	75 95		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	0f 85 6b ff ff
	ff		 jne	 $LN4@Adjust_man

; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000dc	48 c7 44 24 40
	10 00 00 00	 mov	 QWORD PTR _Min_back_shift$[rsp], 16

; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e5	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 2b c1	 sub	 rax, rcx
  000f5	48 89 44 24 48	 mov	 QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	48 83 7c 24 48
	10		 cmp	 QWORD PTR _Back_shift$[rsp], 16
  00100	72 0a		 jb	 SHORT $LN16@Adjust_man
  00102	48 83 7c 24 48
	2f		 cmp	 QWORD PTR _Back_shift$[rsp], 47 ; 0000002fH
  00108	77 02		 ja	 SHORT $LN16@Adjust_man
  0010a	eb 6b		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  0010c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  00113	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00118	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0011f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00124	45 33 c9	 xor	 r9d, r9d
  00127	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00134	b9 02 00 00 00	 mov	 ecx, 2
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0013f	83 f8 01	 cmp	 eax, 1
  00142	75 03		 jne	 SHORT $LN20@Adjust_man
  00144	cc		 int	 3
  00145	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  00147	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00150	41 b9 ac 00 00
	00		 mov	 r9d, 172		; 000000acH
  00156	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  00171	33 c0		 xor	 eax, eax
  00173	85 c0		 test	 eax, eax
  00175	75 95		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  00177	33 c0		 xor	 eax, eax
  00179	85 c0		 test	 eax, eax
  0017b	0f 85 79 ff ff
	ff		 jne	 $LN10@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00181	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00186	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  0018b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 174  : }

  0018e	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00192	5f		 pop	 rdi
  00193	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 84   :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 85   :         return ::operator new(_Bytes);

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0000f	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 86   :     }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 321  :     _THROW(bad_array_new_length{});

  00006	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0000b	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00010	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  00017	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001c	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 322  : }

  00021	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00025	5f		 pop	 rdi
  00026	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00018	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001c	83 e0 01	 and	 eax, 1
  0001f	85 c0		 test	 eax, eax
  00021	74 0f		 je	 SHORT $LN2@scalar
  00023	ba 18 00 00 00	 mov	 edx, 24
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00019	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 140  :         : bad_alloc("bad array new length")

  0000a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00016	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00027	48 89 08	 mov	 QWORD PTR [rax], rcx

; 142  :     }

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5f		 pop	 rdi
  00034	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00018	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001c	83 e0 01	 and	 eax, 1
  0001f	85 c0		 test	 eax, eax
  00021	74 0f		 je	 SHORT $LN2@scalar
  00023	ba 18 00 00 00	 mov	 edx, 24
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00019	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00036	5f		 pop	 rdi
  00037	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000f	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 129  :         : exception(_Message, 1)

  0000f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00015	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Message$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 130  :     {

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00030	48 89 08	 mov	 QWORD PTR [rax], rcx

; 131  :     }

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003c	5f		 pop	 rdi
  0003d	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00018	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001c	83 e0 01	 and	 eax, 1
  0001f	85 c0		 test	 eax, eax
  00021	74 0f		 je	 SHORT $LN2@scalar
  00023	ba 18 00 00 00	 mov	 edx, 24
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 10	 sub	 rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0000a	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00014	74 0f		 je	 SHORT $LN3@what
  00016	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001f	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
  00023	eb 0b		 jmp	 SHORT $LN4@what
$LN3@what:
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0002c	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@what:
  00030	48 8b 04 24	 mov	 rax, QWORD PTR tv69[rsp]

; 96   :     }

  00034	48 83 c4 10	 add	 rsp, 16
  00038	5f		 pop	 rdi
  00039	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00016	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001e	48 83 c0 08	 add	 rax, 8
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 10 00 00 00	 mov	 ecx, 16
  00031	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Other$[rsp]
  00041	48 83 c1 08	 add	 rcx, 8
  00045	48 8b d0	 mov	 rdx, rax
  00048	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 83 c0 08	 add	 rax, 8
  00028	48 8b f8	 mov	 rdi, rax
  0002b	33 c0		 xor	 eax, eax
  0002d	b9 10 00 00 00	 mov	 ecx, 16
  00032	f3 aa		 rep stosb

; 67   :         _Data._What = _Message;

  00034	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Message$[rsp]
  0003e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 68   :     }

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 647  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
  00000	40 57		 push	 rdi

; 648  :         return LLONG_MAX;

  00002	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 649  :     }

  0000c	5f		 pop	 rdi
  0000d	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

  0000b	48 8b 44 24 18	 mov	 rax, QWORD PTR _Where$[rsp]

; 170  :     }

  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\pattern_searcher.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\pattern_searcher.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
