; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30038.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG123423 DB	' ', 00H
	ORG $+6
$SG123430 DB	'Sorted array: ', 0aH, 00H
$SG132542 DB	'invalid argument', 00H
	ORG $+3
$SG132543 DB	'%s', 00H
	ORG $+1
$SG132544 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30037\include\xmemory', 00H
$SG132547 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG132545 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'0', 00H, '3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG132546 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG132573 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30037\include\xlocale', 00H
$SG124827 DB	'crash_in_main', 00H
	ORG $+2
$SG124828 DB	'crash_in_main', 0aH, 00H
	ORG $+1
$SG124831 DB	'crash_in_static_lib_a', 00H
	ORG $+2
$SG124832 DB	'crash_in_static_lib_a', 0aH, 00H
	ORG $+1
$SG124835 DB	'crash_in_static_lib_b', 00H
	ORG $+2
$SG124836 DB	'crash_in_static_lib_b', 0aH, 00H
	ORG $+1
$SG124839 DB	'crash_in_dynamic_lib_a', 00H
	ORG $+1
$SG124840 DB	'crash_in_dynamic_lib_a', 0aH, 00H
$SG124843 DB	'crash_in_dynamic_lib_b', 00H
	ORG $+1
$SG124844 DB	'crash_in_dynamic_lib_b', 0aH, 00H
$SG124845 DB	'Wrong command line option', 0aH, 00H
	ORG $+5
$SG124847 DB	'f', 00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, 00H, 00H
	ORG $+12
$SG124846 DB	'D', 00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H
	DB	'\', 00H, 'c', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'h', 00H, 'e'
	DB	00H, 'x', 00H, 'p', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 'e', 00H
	DB	'r', 00H, '\', 00H, 'c', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'h'
	DB	00H, 'e', 00H, 'x', 00H, 'p', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't'
	DB	00H, '_', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 't', 00H, 'e', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '\', 00H, 'm', 00H, 'a', 00H, 'i'
	DB	00H, 'n', 00H, '\', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?quick_sort@@YAXXZ				; quick_sort
PUBLIC	?swap@@YAXPEAH0@Z				; swap
PUBLIC	?partition@@YAHQEAHHH@Z				; partition
PUBLIC	?quickSort@@YAXQEAHHH@Z				; quickSort
PUBLIC	?printArray@@YAXQEAHH@Z				; printArray
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0pattern_searcher_t@@QEAA@XZ			; pattern_searcher_t::pattern_searcher_t
PUBLIC	??0Cmathlibrary@@QEAA@XZ			; Cmathlibrary::Cmathlibrary
PUBLIC	??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z		; Cmathlibrary::operator=
PUBLIC	??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z		; Cmathlibrary::operator=
PUBLIC	?function_in_main@@YAXXZ			; function_in_main
PUBLIC	main
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp__wassert:PROC
EXTRN	?search@pattern_searcher_t@@QEAAHXZ:PROC	; pattern_searcher_t::search
EXTRN	?calc_mininum_spaning@@YAXXZ:PROC		; calc_mininum_spaning
EXTRN	?calc_convex_hull@Cmathlibrary@@QEAAHXZ:PROC	; Cmathlibrary::calc_convex_hull
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?quick_sort@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+182
	DD	imagerel $unwind$?quick_sort@@YAXXZ
$pdata$?swap@@YAXPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?swap@@YAXPEAH0@Z
$pdata$?partition@@YAHQEAHHH@Z DD imagerel $LN7
	DD	imagerel $LN7+217
	DD	imagerel $unwind$?partition@@YAHQEAHHH@Z
$pdata$?quickSort@@YAXQEAHHH@Z DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$?quickSort@@YAXQEAHHH@Z
$pdata$?printArray@@YAXQEAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$?printArray@@YAXQEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1038
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+79
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0pattern_searcher_t@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??0pattern_searcher_t@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Cmathlibrary@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0Cmathlibrary@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?function_in_main@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$?function_in_main@@YAXXZ
$pdata$main DD	imagerel $LN16
	DD	imagerel $LN16+599
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+91
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+211
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'>'
	DB	02H
	DB	0a5H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 020f11H
	DD	0700b520fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Cmathlibrary@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0pattern_searcher_t@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	0f9H, 03H
	DB	02H
	DB	'B'
	DB	04H
	DB	019H, 0aH
	DB	02H
	DB	'x'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 032b19H
	DD	01a0112H
	DD	0700bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 048H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
voltbl	SEGMENT
_volmd	DDSymXIndex: 	FLAT:main
	DD	039H
	DD	023eH
_volmd	DDSymXIndex: 	FLAT:?quick_sort@@YAXXZ
	DD	021H
	DD	0a3H
voltbl	ENDS
xdata	SEGMENT
$unwind$?quick_sort@@YAXXZ DD 022619H
	DD	07002b206H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?swap@@YAXPEAH0@Z DD 020f01H
	DD	0700b120fH
$unwind$?partition@@YAHQEAHHH@Z DD 021301H
	DD	0700f7213H
$unwind$?quickSort@@YAXQEAHHH@Z DD 021301H
	DD	0700f5213H
$unwind$?printArray@@YAXQEAHH@Z DD 020e01H
	DD	0700a520eH
$unwind$?function_in_main@@YAXXZ DD 031a01H
	DD	0260109H
	DD	07002H
$unwind$main DD	044119H
	DD	052701117H
	DD	0700a000fH
	DD	imagerel __GSHandlerCheck
	DD	0f5260H
xdata	ENDS
CONST	SEGMENT
?quick_sort@@YAXXZ$rtcName$0 DB 061H			; quick_sort
	DB	072H
	DB	072H
	DB	00H
	ORG $+4
?quick_sort@@YAXXZ$rtcVarDesc DD 028H			; quick_sort
	DD	018H
	DQ	FLAT:?quick_sort@@YAXXZ$rtcName$0
	ORG $+48
?quick_sort@@YAXXZ$rtcFrameData DD 01H			; quick_sort
	DD	00H
	DQ	FLAT:?quick_sort@@YAXXZ$rtcVarDesc
?function_in_main@@YAXXZ$rtcName$0 DB 073H		; function_in_main
	DB	074H
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	06dH
	DB	065H
	DB	06dH
	DB	06fH
	DB	072H
	DB	079H
	DB	05fH
	DB	061H
	DB	00H
	ORG $+1
?function_in_main@@YAXXZ$rtcName$1 DB 05fH		; function_in_main
	DB	05fH
	DB	024H
	DB	041H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	050H
	DB	061H
	DB	064H
	DB	00H
	ORG $+4
?function_in_main@@YAXXZ$rtcVarDesc DD 0118H		; function_in_main
	DD	08H
	DQ	FLAT:?function_in_main@@YAXXZ$rtcName$1
	DD	030H
	DD	0c8H
	DQ	FLAT:?function_in_main@@YAXXZ$rtcName$0
	ORG $+96
?function_in_main@@YAXXZ$rtcFrameData DD 02H		; function_in_main
	DD	00H
	DQ	FLAT:?function_in_main@@YAXXZ$rtcVarDesc
main$rtcName$0 DB 070H
	DB	061H
	DB	074H
	DB	074H
	DB	065H
	DB	072H
	DB	06eH
	DB	05fH
	DB	073H
	DB	065H
	DB	061H
	DB	072H
	DB	063H
	DB	068H
	DB	065H
	DB	072H
	DB	00H
	ORG $+7
main$rtcName$1 DB 06dH
	DB	061H
	DB	074H
	DB	068H
	DB	05fH
	DB	06cH
	DB	069H
	DB	062H
	DB	072H
	DB	061H
	DB	072H
	DB	079H
	DB	00H
	ORG $+11
main$rtcVarDesc DD 0f5244H
	DD	01H
	DQ	FLAT:main$rtcName$1
	DD	040H
	DD	0f51e8H
	DQ	FLAT:main$rtcName$0
	ORG $+96
main$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 16
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 125  :             return _Ok;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 126  :         }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 32
tv72 = 33
this$ = 64
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0000a	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0000f	0f b6 c0	 movzx	 eax, al
  00012	85 c0		 test	 eax, eax
  00014	75 07		 jne	 SHORT $LN4@sentry
  00016	c6 44 24 21 01	 mov	 BYTE PTR tv72[rsp], 1
  0001b	eb 05		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0001d	c6 44 24 21 00	 mov	 BYTE PTR tv72[rsp], 0
$LN5@sentry:
  00022	0f b6 44 24 21	 movzx	 eax, BYTE PTR tv72[rsp]
  00027	88 44 24 20	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rsp], al

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0002b	0f b6 44 24 20	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rsp]
  00030	85 c0		 test	 eax, eax
  00032	74 0e		 je	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 120  :             }
; 121  :         }

  00042	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0004c	90		 npad	 1
  0004d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  00014	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00019	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0001e	90		 npad	 1

; 93   :             if (!_Ostr.good()) {

  0001f	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00024	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00027	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0002b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00030	48 03 c8	 add	 rcx, rax
  00033	48 8b c1	 mov	 rax, rcx
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0003f	0f b6 c0	 movzx	 eax, al
  00042	85 c0		 test	 eax, eax
  00044	75 0b		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004b	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 95   :                 return;

  0004f	eb 77		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00051	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00062	48 03 c8	 add	 rcx, rax
  00065	48 8b c1	 mov	 rax, rcx
  00068	48 8b c8	 mov	 rcx, rax
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00071	48 89 44 24 20	 mov	 QWORD PTR _Tied$[rsp], rax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  00076	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Tied$[rsp], 0
  0007c	74 0c		 je	 SHORT $LN4@sentry
  0007e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00083	48 39 44 24 20	 cmp	 QWORD PTR _Tied$[rsp], rax
  00088	75 0b		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  0008a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008f	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 101  :                 return;

  00093	eb 33		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Tied$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000a0	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ac	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000b1	48 03 c8	 add	 rcx, rax
  000b4	48 8b c1	 mov	 rax, rcx
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c5	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  000c8	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000cd	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 32
tv72 = 40
this$ = 64
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0000a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	48 89 44 24 28	 mov	 QWORD PTR tv72[rsp], rax
  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR tv72[rsp]
  0001c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00023	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv72[rsp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	48 8b c8	 mov	 rcx, rax
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00037	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 80   :             if (_Rdbuf) {

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00042	74 11		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  00051	ff 50 10	 call	 QWORD PTR [rax+16]
  00054	90		 npad	 1
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  00055	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 32
tv73 = 40
this$ = 64
_Ostr$ = 72
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00019	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00024	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  00029	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0002e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00031	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00035	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv73[rsp]
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	48 8b c8	 mov	 rcx, rax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00049	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 73   :             if (_Rdbuf) {

  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00054	74 10		 je	 SHORT $LN2@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  0005b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  00063	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 75   :             }
; 76   :         }

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
_TEXT	SEGMENT
svc_ret$5 = 32
pattern_searcher$6 = 64
math_library$7 = 1004100
__$ArrayPad$ = 1004128
argc$ = 1004160
argv$ = 1004168
main	PROC

; 35   : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 70 52 0f 00	 mov	 eax, 1004144		; 000f5270H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 94 d4 03 00	 mov	 ecx, 251028		; 0003d494H
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	8b 8c 24 80 52
	0f 00		 mov	 ecx, DWORD PTR [rsp+1004160]
  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00036	48 33 c4	 xor	 rax, rsp
  00039	48 89 84 24 60
	52 0f 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 36   :   if ((argc > 1) && ((*argv[1] == '-' || (*argv[1] == '/'))))

  00041	83 bc 24 80 52
	0f 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00049	0f 8e da 01 00
	00		 jle	 $LN2@main
  0004f	b8 08 00 00 00	 mov	 eax, 8
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 88
	52 0f 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00060	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00064	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00067	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0006a	74 21		 je	 SHORT $LN3@main
  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	48 8b 8c 24 88
	52 0f 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0007d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00081	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00084	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00087	0f 85 9c 01 00
	00		 jne	 $LN2@main
$LN3@main:

; 37   :   {
; 38   :     int svc_ret = 1;

  0008d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR svc_ret$5[rsp], 1

; 39   :     if (strcmp("crash_in_main", argv[1] + 1) == 0)

  00095	b8 08 00 00 00	 mov	 eax, 8
  0009a	48 6b c0 01	 imul	 rax, rax, 1
  0009e	48 8b 8c 24 88
	52 0f 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a6	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000aa	48 ff c0	 inc	 rax
  000ad	48 8b d0	 mov	 rdx, rax
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124827
  000b7	e8 00 00 00 00	 call	 strcmp
  000bc	85 c0		 test	 eax, eax
  000be	75 16		 jne	 SHORT $LN4@main

; 40   :     {
; 41   :       printf("crash_in_main\n");

  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124828
  000c7	e8 00 00 00 00	 call	 printf

; 42   :       function_in_main();

  000cc	e8 00 00 00 00	 call	 ?function_in_main@@YAXXZ ; function_in_main

; 43   :     }

  000d1	e9 53 01 00 00	 jmp	 $LN5@main
$LN4@main:

; 44   :     else if (strcmp("crash_in_static_lib_a", argv[1] + 1) == 0)

  000d6	b8 08 00 00 00	 mov	 eax, 8
  000db	48 6b c0 01	 imul	 rax, rax, 1
  000df	48 8b 8c 24 88
	52 0f 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e7	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000eb	48 ff c0	 inc	 rax
  000ee	48 8b d0	 mov	 rdx, rax
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124831
  000f8	e8 00 00 00 00	 call	 strcmp
  000fd	85 c0		 test	 eax, eax
  000ff	75 16		 jne	 SHORT $LN6@main

; 45   :     {
; 46   :       printf("crash_in_static_lib_a\n");

  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124832
  00108	e8 00 00 00 00	 call	 printf

; 47   :       quick_sort();//in static lib

  0010d	e8 00 00 00 00	 call	 ?quick_sort@@YAXXZ	; quick_sort

; 48   :     }

  00112	e9 12 01 00 00	 jmp	 $LN7@main
$LN6@main:

; 49   :     else if (strcmp("crash_in_static_lib_b", argv[1] + 1) == 0)

  00117	b8 08 00 00 00	 mov	 eax, 8
  0011c	48 6b c0 01	 imul	 rax, rax, 1
  00120	48 8b 8c 24 88
	52 0f 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00128	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0012c	48 ff c0	 inc	 rax
  0012f	48 8b d0	 mov	 rdx, rax
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124835
  00139	e8 00 00 00 00	 call	 strcmp
  0013e	85 c0		 test	 eax, eax
  00140	75 25		 jne	 SHORT $LN8@main

; 50   :     {
; 51   :       printf("crash_in_static_lib_b\n");

  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124836
  00149	e8 00 00 00 00	 call	 printf

; 52   : 
; 53   :       pattern_searcher_t pattern_searcher;

  0014e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pattern_searcher$6[rsp]
  00153	e8 00 00 00 00	 call	 ??0pattern_searcher_t@@QEAA@XZ

; 54   :       pattern_searcher.search();//in static lib

  00158	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pattern_searcher$6[rsp]
  0015d	e8 00 00 00 00	 call	 ?search@pattern_searcher_t@@QEAAHXZ ; pattern_searcher_t::search

; 55   :     }

  00162	e9 c2 00 00 00	 jmp	 $LN9@main
$LN8@main:

; 56   :     else if (strcmp("crash_in_dynamic_lib_a", argv[1] + 1) == 0)

  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 01	 imul	 rax, rax, 1
  00170	48 8b 8c 24 88
	52 0f 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00178	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0017c	48 ff c0	 inc	 rax
  0017f	48 8b d0	 mov	 rdx, rax
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124839
  00189	e8 00 00 00 00	 call	 strcmp
  0018e	85 c0		 test	 eax, eax
  00190	75 16		 jne	 SHORT $LN10@main

; 57   :     {
; 58   :       printf("crash_in_dynamic_lib_a\n");

  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124840
  00199	e8 00 00 00 00	 call	 printf

; 59   :       calc_mininum_spaning();

  0019e	e8 00 00 00 00	 call	 ?calc_mininum_spaning@@YAXXZ ; calc_mininum_spaning

; 60   :     }

  001a3	e9 81 00 00 00	 jmp	 $LN11@main
$LN10@main:

; 61   :     else if (strcmp("crash_in_dynamic_lib_b", argv[1] + 1) == 0)

  001a8	b8 08 00 00 00	 mov	 eax, 8
  001ad	48 6b c0 01	 imul	 rax, rax, 1
  001b1	48 8b 8c 24 88
	52 0f 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001b9	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  001bd	48 ff c0	 inc	 rax
  001c0	48 8b d0	 mov	 rdx, rax
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124843
  001ca	e8 00 00 00 00	 call	 strcmp
  001cf	85 c0		 test	 eax, eax
  001d1	75 28		 jne	 SHORT $LN12@main

; 62   :     {
; 63   :       printf("crash_in_dynamic_lib_b\n");

  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124844
  001da	e8 00 00 00 00	 call	 printf

; 64   :       Cmathlibrary math_library;

  001df	48 8d 8c 24 44
	52 0f 00	 lea	 rcx, QWORD PTR math_library$7[rsp]
  001e7	e8 00 00 00 00	 call	 ??0Cmathlibrary@@QEAA@XZ ; Cmathlibrary::Cmathlibrary

; 65   :       math_library.calc_convex_hull();//in dynamic lib

  001ec	48 8d 8c 24 44
	52 0f 00	 lea	 rcx, QWORD PTR math_library$7[rsp]
  001f4	e8 00 00 00 00	 call	 ?calc_convex_hull@Cmathlibrary@@QEAAHXZ ; Cmathlibrary::calc_convex_hull

; 66   :     }

  001f9	eb 2e		 jmp	 SHORT $LN13@main
$LN12@main:

; 67   :     else
; 68   :     {
; 69   :       printf("Wrong command line option\n");

  001fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124845
  00202	e8 00 00 00 00	 call	 printf

; 70   :       assert(false);

  00207	33 c0		 xor	 eax, eax
  00209	85 c0		 test	 eax, eax
  0020b	75 1c		 jne	 SHORT $LN15@main
  0020d	41 b8 46 00 00
	00		 mov	 r8d, 70			; 00000046H
  00213	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG124846
  0021a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG124847
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00227	33 c0		 xor	 eax, eax
$LN15@main:
$LN13@main:
$LN11@main:
$LN9@main:
$LN7@main:
$LN5@main:
$LN2@main:

; 71   :     }
; 72   :   }
; 73   : 
; 74   :   return 0;

  00229	33 c0		 xor	 eax, eax

; 75   : }

  0022b	8b f8		 mov	 edi, eax
  0022d	48 8b cc	 mov	 rcx, rsp
  00230	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  00237	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0023c	8b c7		 mov	 eax, edi
  0023e	48 8b 8c 24 60
	52 0f 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00246	48 33 cc	 xor	 rcx, rsp
  00249	e8 00 00 00 00	 call	 __security_check_cookie
  0024e	48 81 c4 70 52
	0f 00		 add	 rsp, 1004144		; 000f5270H
  00255	5f		 pop	 rdi
  00256	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
_TEXT	SEGMENT
?function_in_main@@YAXXZ PROC				; function_in_main

; 26   : {

$LN5:
  00000	40 57		 push	 rdi
  00002	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00009	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000e	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
$LN2@function_i:

; 27   :   while (true)

  0001a	33 c0		 xor	 eax, eax
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	74 07		 je	 SHORT $LN3@function_i

; 28   :   {
; 29   :     std::array<uint8_t, 200> stack_memory_a;
; 30   :     function_in_main();  //TEST crash in main: stack overflow

  00021	e8 00 00 00 00	 call	 ?function_in_main@@YAXXZ ; function_in_main

; 31   :   }

  00026	eb f2		 jmp	 SHORT $LN2@function_i
$LN3@function_i:

; 32   : }

  00028	48 8b cc	 mov	 rcx, rsp
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?function_in_main@@YAXXZ$rtcFrameData
  00032	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00037	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  0003e	5f		 pop	 rdi
  0003f	c3		 ret	 0
?function_in_main@@YAXXZ ENDP				; function_in_main
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z
_TEXT	SEGMENT
this$ = 16
__that$ = 24
??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z PROC		; Cmathlibrary::operator=, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??4Cmathlibrary@@QEAAAEAV0@$$QEAV0@@Z ENDP		; Cmathlibrary::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z
_TEXT	SEGMENT
this$ = 16
__that$ = 24
??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z PROC		; Cmathlibrary::operator=, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	5f		 pop	 rdi
  00011	c3		 ret	 0
??4Cmathlibrary@@QEAAAEAV0@AEBV0@@Z ENDP		; Cmathlibrary::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\dynamic_library\math_library.hpp
;	COMDAT ??0Cmathlibrary@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0Cmathlibrary@@QEAA@XZ PROC				; Cmathlibrary::Cmathlibrary, COMDAT

; 24   :   Cmathlibrary(void)

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 25   :   {
; 26   :   }

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??0Cmathlibrary@@QEAA@XZ ENDP				; Cmathlibrary::Cmathlibrary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0pattern_searcher_t@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0pattern_searcher_t@@QEAA@XZ PROC			; pattern_searcher_t::pattern_searcher_t, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	c7 00 f4 01 00
	00		 mov	 DWORD PTR [rax], 500	; 000001f4H
  00011	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00016	c7 40 04 1a 00
	00 00		 mov	 DWORD PTR [rax+4], 26
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 83 c0 08	 add	 rax, 8
  00026	48 8b f8	 mov	 rdi, rax
  00029	33 c0		 xor	 eax, eax
  0002b	b9 d0 07 00 00	 mov	 ecx, 2000		; 000007d0H
  00030	f3 aa		 rep stosb
  00032	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 05 d8 07 00
	00		 add	 rax, 2008		; 000007d8H
  0003d	48 8b f8	 mov	 rdi, rax
  00040	33 c0		 xor	 eax, eax
  00042	b9 d0 07 00 00	 mov	 ecx, 2000		; 000007d0H
  00047	f3 aa		 rep stosb
  00049	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 05 a8 0f 00
	00		 add	 rax, 4008		; 00000fa8H
  00054	48 8b f8	 mov	 rdi, rax
  00057	33 c0		 xor	 eax, eax
  00059	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0005e	f3 aa		 rep stosb
  00060	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
??0pattern_searcher_t@@QEAA@XZ ENDP			; pattern_searcher_t::pattern_searcher_t
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 48
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  0000a	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0001b	48 03 c8	 add	 rcx, rax
  0001e	48 8b c1	 mov	 rax, rcx
  00021	b2 0a		 mov	 dl, 10
  00023	48 8b c8	 mov	 rcx, rax
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
  0002c	0f b6 d0	 movzx	 edx, al
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 980  :     _Ostr.flush();

  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 981  :     return _Ostr;

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]

; 982  : }

  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5f		 pop	 rdi
  0004f	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00012	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00017	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+224]

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0002b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00033	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  0003b	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00040	48 89 44 24 28	 mov	 QWORD PTR _Count$[rsp], rax

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00045	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0005c	48 03 c8	 add	 rcx, rax
  0005f	48 8b c1	 mov	 rax, rcx
  00062	48 8b c8	 mov	 rcx, rax
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0006b	48 85 c0	 test	 rax, rax
  0006e	7e 62		 jle	 SHORT $LN17@operator
  00070	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0007f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00087	48 03 c8	 add	 rcx, rax
  0008a	48 8b c1	 mov	 rax, rcx
  0008d	48 8b c8	 mov	 rcx, rax
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00096	48 3b 44 24 28	 cmp	 rax, QWORD PTR _Count$[rsp]
  0009b	7e 35		 jle	 SHORT $LN17@operator
  0009d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ac	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000b4	48 03 c8	 add	 rcx, rax
  000b7	48 8b c1	 mov	 rax, rcx
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000c3	48 2b 44 24 28	 sub	 rax, QWORD PTR _Count$[rsp]
  000c8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv137[rsp], rax
  000d0	eb 0c		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000d2	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv137[rsp], 0
$LN18@operator:
  000de	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv137[rsp]
  000e6	48 89 44 24 30	 mov	 QWORD PTR _Pad$[rsp], rax

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000eb	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  000f3	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000f8	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000fd	90		 npad	 1

; 742  : 
; 743  :     if (!_Ok) {

  000fe	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00103	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00108	0f b6 c0	 movzx	 eax, al
  0010b	85 c0		 test	 eax, eax
  0010d	75 10		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  0010f	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00113	83 c8 04	 or	 eax, 4
  00116	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 745  :     } else { // state okay, insert

  0011a	e9 88 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN
; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0011f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00127	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0012e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00136	48 03 c8	 add	 rcx, rax
  00139	48 8b c1	 mov	 rax, rcx
  0013c	48 8b c8	 mov	 rcx, rax
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00145	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  0014c	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv139[rsp]
  00153	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00158	83 f8 40	 cmp	 eax, 64			; 00000040H
  0015b	0f 84 cf 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00161	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pad$[rsp]
  00168	48 ff c8	 dec	 rax
  0016b	48 89 44 24 30	 mov	 QWORD PTR _Pad$[rsp], rax
$LN4@operator:
  00170	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00176	0f 8e b4 00 00
	00		 jle	 $LN11@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0017c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00184	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00187	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0018b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00193	48 03 c8	 add	 rcx, rax
  00196	48 8b c1	 mov	 rax, rcx
  00199	48 8b c8	 mov	 rcx, rax
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001a2	88 84 24 8c 00
	00 00		 mov	 BYTE PTR tv294[rsp], al
  001a9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  001b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001b8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  001c0	48 03 c8	 add	 rcx, rax
  001c3	48 8b c1	 mov	 rax, rcx
  001c6	48 8b c8	 mov	 rcx, rax
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001cf	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
  001d7	0f b6 94 24 8c
	00 00 00	 movzx	 edx, BYTE PTR tv294[rsp]
  001df	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv295[rsp]
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001ed	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv296[rsp], eax
  001f4	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv296[rsp]
  001fb	89 44 24 64	 mov	 DWORD PTR $T4[rsp], eax
  001ff	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00204	89 44 24 68	 mov	 DWORD PTR $T5[rsp], eax
  00208	48 8d 54 24 64	 lea	 rdx, QWORD PTR $T4[rsp]
  0020d	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T5[rsp]
  00212	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00217	0f b6 c0	 movzx	 eax, al
  0021a	85 c0		 test	 eax, eax
  0021c	74 0d		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  0021e	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00222	83 c8 04	 or	 eax, 4
  00225	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 751  :                     break;

  00229	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  0022b	e9 33 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00230	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00235	75 6b		 jne	 SHORT $LN13@operator
  00237	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0023f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00242	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00246	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0024e	48 03 c8	 add	 rcx, rax
  00251	48 8b c1	 mov	 rax, rcx
  00254	48 8b c8	 mov	 rcx, rax
  00257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0025d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv297[rsp], rax
  00265	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Count$[rsp]
  0026a	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR _Val$[rsp]
  00272	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv297[rsp]
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00280	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv298[rsp], rax
  00288	48 8b 44 24 28	 mov	 rax, QWORD PTR _Count$[rsp]
  0028d	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR tv298[rsp], rax
  00295	74 0b		 je	 SHORT $LN13@operator

; 757  :             _State |= ios_base::badbit;

  00297	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0029b	83 c8 04	 or	 eax, 4
  0029e	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  002a2	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  002a7	0f 85 cf 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ad	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002af	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pad$[rsp]
  002b4	48 ff c8	 dec	 rax
  002b7	48 89 44 24 30	 mov	 QWORD PTR _Pad$[rsp], rax
$LN7@operator:
  002bc	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  002c2	0f 8e b4 00 00
	00		 jle	 $LN14@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002c8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002d0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002df	48 03 c8	 add	 rcx, rax
  002e2	48 8b c1	 mov	 rax, rcx
  002e5	48 8b c8	 mov	 rcx, rax
  002e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002ee	88 84 24 b0 00
	00 00		 mov	 BYTE PTR tv299[rsp], al
  002f5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00300	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00304	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0030c	48 03 c8	 add	 rcx, rax
  0030f	48 8b c1	 mov	 rax, rcx
  00312	48 8b c8	 mov	 rcx, rax
  00315	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0031b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv300[rsp], rax
  00323	0f b6 94 24 b0
	00 00 00	 movzx	 edx, BYTE PTR tv299[rsp]
  0032b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv300[rsp]
  00333	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00339	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv301[rsp], eax
  00340	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv301[rsp]
  00347	89 44 24 6c	 mov	 DWORD PTR $T6[rsp], eax
  0034b	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00350	89 44 24 70	 mov	 DWORD PTR $T7[rsp], eax
  00354	48 8d 54 24 6c	 lea	 rdx, QWORD PTR $T6[rsp]
  00359	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T7[rsp]
  0035e	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00363	0f b6 c0	 movzx	 eax, al
  00366	85 c0		 test	 eax, eax
  00368	74 0d		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  0036a	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0036e	83 c8 04	 or	 eax, 4
  00371	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 764  :                     break;

  00375	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  00377	e9 33 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  0037c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00384	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00387	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0038b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00393	48 03 c8	 add	 rcx, rax
  00396	48 8b c1	 mov	 rax, rcx
  00399	33 d2		 xor	 edx, edx
  0039b	48 8b c8	 mov	 rcx, rax
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  003a4	90		 npad	 1
  003a5	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 770  :         _CATCH_IO_(ios_base, _Ostr)
; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  003a7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  003af	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003b6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  003be	48 03 c8	 add	 rcx, rax
  003c1	48 8b c1	 mov	 rax, rcx
  003c4	45 33 c0	 xor	 r8d, r8d
  003c7	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  003cb	48 8b c8	 mov	 rcx, rax
  003ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 774  :     return _Ostr;

  003d4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  003dc	48 89 44 24 78	 mov	 QWORD PTR $T8[rsp], rax
  003e1	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  003e6	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003eb	48 8b 44 24 78	 mov	 rax, QWORD PTR $T8[rsp]

; 775  : }

  003f0	48 8b f8	 mov	 rdi, rax
  003f3	48 8b cc	 mov	 rcx, rsp
  003f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  003fd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00402	48 8b c7	 mov	 rax, rdi
  00405	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0040c	5f		 pop	 rdi
  0040d	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00017	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00021	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	41 b0 01	 mov	 r8b, 1
  00031	ba 04 00 00 00	 mov	 edx, 4
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0003f	90		 npad	 1
  00040	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
  0004e	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00017	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	5f		 pop	 rdi
  00021	5d		 pop	 rbp
  00022	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
_Count$ = 40
_Pad$ = 48
_Ok$ = 72
$T4 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 120
tv137 = 128
tv139 = 136
tv294 = 140
tv295 = 144
tv296 = 152
tv297 = 160
tv298 = 168
tv299 = 176
tv300 = 184
tv301 = 192
_Ostr$ = 224
_Val$ = 232
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00021	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00028	48 03 c8	 add	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	41 b0 01	 mov	 r8b, 1
  00031	ba 04 00 00 00	 mov	 edx, 4
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0003f	90		 npad	 1
  00040	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
  0004e	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
_TEXT	SEGMENT
i$ = 32
arr$ = 64
size$ = 72
?printArray@@YAXQEAHH@Z PROC				; printArray

; 53   : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 54   :   int i;
; 55   :   for (i = 0; i < size; i++)

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00016	eb 0a		 jmp	 SHORT $LN4@printArray
$LN2@printArray:
  00018	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001c	ff c0		 inc	 eax
  0001e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@printArray:
  00022	8b 44 24 48	 mov	 eax, DWORD PTR size$[rsp]
  00026	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0002a	7d 2b		 jge	 SHORT $LN3@printArray

; 56   :     std::cout << arr[i] << " ";

  0002c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arr$[rsp]
  00036	8b 14 81	 mov	 edx, DWORD PTR [rcx+rax*4]
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG123423
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00055	eb c1		 jmp	 SHORT $LN2@printArray
$LN3@printArray:

; 57   :   std::cout << std::endl;

  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 58   : }

  0006b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
?printArray@@YAXQEAHH@Z ENDP				; printArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
_TEXT	SEGMENT
pi$1 = 32
arr$ = 64
low$ = 72
high$ = 80
?quickSort@@YAXQEAHHH@Z PROC				; quickSort

; 37   : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 38   :   if (low < high)

  00013	8b 44 24 50	 mov	 eax, DWORD PTR high$[rsp]
  00017	39 44 24 48	 cmp	 DWORD PTR low$[rsp], eax
  0001b	7d 45		 jge	 SHORT $LN2@quickSort

; 39   :   {
; 40   :     /* pi is partitioning index, arr[p] is now
; 41   :     at right place */
; 42   :     int pi = partition(arr, low, high);

  0001d	44 8b 44 24 50	 mov	 r8d, DWORD PTR high$[rsp]
  00022	8b 54 24 48	 mov	 edx, DWORD PTR low$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arr$[rsp]
  0002b	e8 00 00 00 00	 call	 ?partition@@YAHQEAHHH@Z	; partition
  00030	89 44 24 20	 mov	 DWORD PTR pi$1[rsp], eax

; 43   : 
; 44   :     // Separately sort elements before
; 45   :     // partition and after partition
; 46   :     quickSort(arr, low, pi - 1);

  00034	8b 44 24 20	 mov	 eax, DWORD PTR pi$1[rsp]
  00038	ff c8		 dec	 eax
  0003a	44 8b c0	 mov	 r8d, eax
  0003d	8b 54 24 48	 mov	 edx, DWORD PTR low$[rsp]
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arr$[rsp]
  00046	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort

; 47   :     quickSort(arr, pi + 1, high);

  0004b	8b 44 24 20	 mov	 eax, DWORD PTR pi$1[rsp]
  0004f	ff c0		 inc	 eax
  00051	44 8b 44 24 50	 mov	 r8d, DWORD PTR high$[rsp]
  00056	8b d0		 mov	 edx, eax
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR arr$[rsp]
  0005d	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort
$LN2@quickSort:

; 48   :   }
; 49   : }

  00062	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
?quickSort@@YAXQEAHHH@Z ENDP				; quickSort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
_TEXT	SEGMENT
pivot$ = 32
i$ = 36
j$1 = 40
a$2 = 48
arr$ = 80
low$ = 88
high$ = 96
?partition@@YAHQEAHHH@Z PROC				; partition

; 15   : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 16   :   int pivot = arr[high]; // pivot

  00013	48 63 44 24 60	 movsxd	 rax, DWORD PTR high$[rsp]
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arr$[rsp]
  0001d	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00020	89 44 24 20	 mov	 DWORD PTR pivot$[rsp], eax

; 17   :   int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far

  00024	8b 44 24 58	 mov	 eax, DWORD PTR low$[rsp]
  00028	ff c8		 dec	 eax
  0002a	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 18   : 
; 19   :   for (int j = low; j <= high - 1; j++)

  0002e	8b 44 24 58	 mov	 eax, DWORD PTR low$[rsp]
  00032	89 44 24 28	 mov	 DWORD PTR j$1[rsp], eax
  00036	eb 0a		 jmp	 SHORT $LN4@partition
$LN2@partition:
  00038	8b 44 24 28	 mov	 eax, DWORD PTR j$1[rsp]
  0003c	ff c0		 inc	 eax
  0003e	89 44 24 28	 mov	 DWORD PTR j$1[rsp], eax
$LN4@partition:
  00042	8b 44 24 60	 mov	 eax, DWORD PTR high$[rsp]
  00046	ff c8		 dec	 eax
  00048	39 44 24 28	 cmp	 DWORD PTR j$1[rsp], eax
  0004c	7f 57		 jg	 SHORT $LN3@partition

; 20   :   {
; 21   :     // If current element is smaller than the pivot
; 22   :     if (arr[j] < pivot)

  0004e	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$1[rsp]
  00053	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arr$[rsp]
  00058	8b 54 24 20	 mov	 edx, DWORD PTR pivot$[rsp]
  0005c	39 14 81	 cmp	 DWORD PTR [rcx+rax*4], edx
  0005f	7d 42		 jge	 SHORT $LN5@partition

; 23   :     {
; 24   :       i++; // increment index of smaller element

  00061	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00065	ff c0		 inc	 eax
  00067	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 25   :       
; 26   :       int* a = nullptr;

  0006b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR a$2[rsp], 0

; 27   :       *a = 42; //TEST crash: write access violation

  00074	48 8b 44 24 30	 mov	 rax, QWORD PTR a$2[rsp]
  00079	c7 00 2a 00 00
	00		 mov	 DWORD PTR [rax], 42	; 0000002aH

; 28   :   
; 29   :       swap(&arr[i], &arr[j]);

  0007f	48 63 44 24 28	 movsxd	 rax, DWORD PTR j$1[rsp]
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arr$[rsp]
  00089	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0008d	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR arr$[rsp]
  00097	48 8d 0c 8a	 lea	 rcx, QWORD PTR [rdx+rcx*4]
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	e8 00 00 00 00	 call	 ?swap@@YAXPEAH0@Z	; swap
$LN5@partition:

; 30   :     }
; 31   :   }

  000a3	eb 93		 jmp	 SHORT $LN2@partition
$LN3@partition:

; 32   :   swap(&arr[i + 1], &arr[high]);

  000a5	48 63 44 24 60	 movsxd	 rax, DWORD PTR high$[rsp]
  000aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR arr$[rsp]
  000af	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  000b3	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  000b7	ff c1		 inc	 ecx
  000b9	48 63 c9	 movsxd	 rcx, ecx
  000bc	48 8b 54 24 50	 mov	 rdx, QWORD PTR arr$[rsp]
  000c1	48 8d 0c 8a	 lea	 rcx, QWORD PTR [rdx+rcx*4]
  000c5	48 8b d0	 mov	 rdx, rax
  000c8	e8 00 00 00 00	 call	 ?swap@@YAXPEAH0@Z	; swap

; 33   :   return (i + 1);

  000cd	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000d1	ff c0		 inc	 eax

; 34   : }

  000d3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000d7	5f		 pop	 rdi
  000d8	c3		 ret	 0
?partition@@YAHQEAHHH@Z ENDP				; partition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
_TEXT	SEGMENT
t$ = 0
a$ = 32
b$ = 40
?swap@@YAXPEAH0@Z PROC					; swap

; 8    : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 9    :   int t = *a;

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	89 04 24	 mov	 DWORD PTR t$[rsp], eax

; 10   :   *a = *b;

  00019	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0001e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  00023	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00025	89 08		 mov	 DWORD PTR [rax], ecx

; 11   :   *b = t;

  00027	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0002c	8b 0c 24	 mov	 ecx, DWORD PTR t$[rsp]
  0002f	89 08		 mov	 DWORD PTR [rax], ecx

; 12   : }

  00031	48 83 c4 10	 add	 rsp, 16
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
?swap@@YAXPEAH0@Z ENDP					; swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\static_library\quick_sort.cpp
_TEXT	SEGMENT
arr$ = 40
n$ = 68
__$ArrayPad$ = 80
?quick_sort@@YAXXZ PROC					; quick_sort

; 61   : {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00006	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0000b	b9 10 00 00 00	 mov	 ecx, 16
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 62   :   int arr[] = { 10, 7, 8, 9, 1, 5 };

  00026	c7 44 24 28 0a
	00 00 00	 mov	 DWORD PTR arr$[rsp], 10
  0002e	c7 44 24 2c 07
	00 00 00	 mov	 DWORD PTR arr$[rsp+4], 7
  00036	c7 44 24 30 08
	00 00 00	 mov	 DWORD PTR arr$[rsp+8], 8
  0003e	c7 44 24 34 09
	00 00 00	 mov	 DWORD PTR arr$[rsp+12], 9
  00046	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR arr$[rsp+16], 1
  0004e	c7 44 24 3c 05
	00 00 00	 mov	 DWORD PTR arr$[rsp+20], 5

; 63   :   int n = sizeof(arr) / sizeof(arr[0]);

  00056	c7 44 24 44 06
	00 00 00	 mov	 DWORD PTR n$[rsp], 6

; 64   :   quickSort(arr, 0, n - 1);

  0005e	8b 44 24 44	 mov	 eax, DWORD PTR n$[rsp]
  00062	ff c8		 dec	 eax
  00064	44 8b c0	 mov	 r8d, eax
  00067	33 d2		 xor	 edx, edx
  00069	48 8d 4c 24 28	 lea	 rcx, QWORD PTR arr$[rsp]
  0006e	e8 00 00 00 00	 call	 ?quickSort@@YAXQEAHHH@Z	; quickSort

; 65   :   std::cout << "Sorted array: \n";

  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG123430
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00081	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 66   :   printArray(arr, n);

  00086	8b 54 24 44	 mov	 edx, DWORD PTR n$[rsp]
  0008a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR arr$[rsp]
  0008f	e8 00 00 00 00	 call	 ?printArray@@YAXQEAHH@Z	; printArray

; 67   : }

  00094	48 8b cc	 mov	 rcx, rsp
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?quick_sort@@YAXXZ$rtcFrameData
  0009e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000a8	48 33 cc	 xor	 rcx, rsp
  000ab	e8 00 00 00 00	 call	 __security_check_cookie
  000b0	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000b4	5f		 pop	 rdi
  000b5	c3		 ret	 0
?quick_sort@@YAXXZ ENDP					; quick_sort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 477  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN3:
  00000	40 57		 push	 rdi

; 478  :         return static_cast<int_type>(EOF);

  00002	b8 ff ff ff ff	 mov	 eax, -1

; 479  :     }

  00007	5f		 pop	 rdi
  00008	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
_Left$ = 32
_Right$ = 40
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 470  :         return _Left == _Right;

  0000f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00014	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00019	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001b	39 08		 cmp	 DWORD PTR [rax], ecx
  0001d	75 09		 jne	 SHORT $LN3@eq_int_typ
  0001f	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  00026	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@eq_int_typ:
  0002f	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]

; 471  :     }

  00033	48 83 c4 10	 add	 rsp, 16
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 48
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  0000f	e8 00 00 00 00	 call	 strlen

; 413  : #endif // _HAS_CXX17
; 414  :     }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5f		 pop	 rdi
  00019	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00019	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  0002f	48 8d 44 24 68	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00034	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00039	b9 01 00 00 00	 mov	 ecx, 1
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00044	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00049	45 33 c0	 xor	 r8d, r8d
  0004c	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Format$[rsp]
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 _vfprintf_l
  00059	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

  0005d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

  00066	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 963  :     }

  0006a	8b f8		 mov	 edi, eax
  0006c	48 8b cc	 mov	 rcx, rsp
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  00076	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0007b	8b c7		 mov	 eax, edi
  0007d	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00081	5f		 pop	 rdi
  00082	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00019	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00023	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00028	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002d	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00032	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00037	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5f		 pop	 rdi
  00045	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
  00000	40 57		 push	 rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\dev\crashexplorer\crashexplorer\test_projects\test_project\main\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
